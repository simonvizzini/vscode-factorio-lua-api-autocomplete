{
  "LuaAISettings": {
    "name": "LuaAISettings",
    "type": "LuaAISettings",
    "inherits": [],
    "properties": {
      "allow_destroy_when_commands_fail": {
        "name": "allow_destroy_when_commands_fail",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "If enabled, units that repeatedly fail to succeed at commands will be destroye"
      },
      "allow_try_return_to_spawner": {
        "name": "allow_try_return_to_spawner",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "If enabled, units that have nothing else to do will attempt to return to a spawne"
      },
      "do_separation": {
        "name": "do_separation",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "If enabled, units will try to separate themselves from nearby friendly unit"
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "object_name": {
        "name": "object_name",
        "type": "string",
        "mode": "[R]",
        "doc": "The class name of this object."
      },
      "path_resolution_modifier": {
        "name": "path_resolution_modifier",
        "type": "int8",
        "mode": "[RW]",
        "doc": "The pathing resolution modifier, must be between -8 and"
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": "If enabled, units that repeatedly fail to succeed at commands will be destroyed."
  },
  "LuaAccumulatorControlBehavior": {
    "name": "LuaAccumulatorControlBehavior",
    "type": "LuaAccumulatorControlBehavior",
    "inherits": [
      "Inherited from LuaControlBehavior: get_circuit_network, type, entity"
    ],
    "properties": {
      "entity": {
        "name": "entity",
        "type": "LuaEntity",
        "mode": "[R]",
        "doc": "The entity this control behavior belongs to."
      },
      "get_circuit_network": {
        "name": "get_circuit_network",
        "type": "function",
        "returns": "LuaCircuitNetwork",
        "args": {
          "circuit_connector": {
            "name": "circuit_connector",
            "type": "defines.circuit_connector_id",
            "doc": "circuit_connector :: [defines.circuit_connector_id](http://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional): The connector to get circuit network fo  \nMust be specified for entities with more than one circuit network connector."
          },
          "wire": {
            "name": "wire",
            "type": "defines.wire_type",
            "doc": "wire :: [defines.wire_type](http://lua-api.factorio.com/latest/defines.html#defines.wire_type): Wire color of the network connected to this entity."
          }
        },
        "doc": "**Parameters**  \nwire :: [defines.wire_type](http://lua-api.factorio.com/latest/defines.html#defines.wire_type): Wire color of the network connected to this entity.  \ncircuit_connector :: [defines.circuit_connector_id](http://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional): The connector to get circuit network fo  \nMust be specified for entities with more than one circuit network connector.  \n\n**Return value**  \nThe circuit network or nil."
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "object_name": {
        "name": "object_name",
        "type": "string",
        "mode": "[R]",
        "doc": "The class name of this object."
      },
      "output_signal": {
        "name": "output_signal",
        "type": "SignalID",
        "mode": "[RW]"
      },
      "type": {
        "name": "type",
        "type": "defines.control_behavior.type",
        "mode": "[R]",
        "doc": "The concrete type of this control behavior."
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": "Control behavior for accumulators."
  },
  "LuaAchievementPrototype": {
    "name": "LuaAchievementPrototype",
    "type": "LuaAchievementPrototype",
    "inherits": [],
    "properties": {
      "allowed_without_fight": {
        "name": "allowed_without_fight",
        "type": "boolean",
        "mode": "[R]"
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "hidden": {
        "name": "hidden",
        "type": "boolean",
        "mode": "[R]"
      },
      "localised_description": {
        "name": "localised_description",
        "type": "LocalisedString",
        "mode": "[R]"
      },
      "localised_name": {
        "name": "localised_name",
        "type": "LocalisedString",
        "mode": "[R]"
      },
      "name": {
        "name": "name",
        "type": "string",
        "mode": "[R]",
        "doc": "Name of this prototype."
      },
      "object_name": {
        "name": "object_name",
        "type": "string",
        "mode": "[R]",
        "doc": "The class name of this object."
      },
      "order": {
        "name": "order",
        "type": "string",
        "mode": "[R]",
        "doc": "Order string of this prototype."
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": ""
  },
  "LuaAmmoCategoryPrototype": {
    "name": "LuaAmmoCategoryPrototype",
    "type": "LuaAmmoCategoryPrototype",
    "inherits": [],
    "properties": {
      "bonus_gui_order": {
        "name": "bonus_gui_order",
        "type": "string",
        "mode": "[R]"
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "localised_description": {
        "name": "localised_description",
        "type": "LocalisedString",
        "mode": "[R]"
      },
      "localised_name": {
        "name": "localised_name",
        "type": "LocalisedString",
        "mode": "[R]"
      },
      "name": {
        "name": "name",
        "type": "string",
        "mode": "[R]",
        "doc": "Name of this prototype."
      },
      "object_name": {
        "name": "object_name",
        "type": "string",
        "mode": "[R]",
        "doc": "The class name of this object."
      },
      "order": {
        "name": "order",
        "type": "string",
        "mode": "[R]",
        "doc": "Order string of this prototype."
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": ""
  },
  "LuaArithmeticCombinatorControlBehavior": {
    "name": "LuaArithmeticCombinatorControlBehavior",
    "type": "LuaArithmeticCombinatorControlBehavior",
    "inherits": [
      "Inherited from LuaControlBehavior: get_circuit_network, type, entity",
      "Inherited from LuaCombinatorControlBehavior: get_signal_last_tick, signals_last_tick"
    ],
    "properties": {
      "entity": {
        "name": "entity",
        "type": "LuaEntity",
        "mode": "[R]",
        "doc": "The entity this control behavior belongs to."
      },
      "get_circuit_network": {
        "name": "get_circuit_network",
        "type": "function",
        "returns": "LuaCircuitNetwork",
        "args": {
          "circuit_connector": {
            "name": "circuit_connector",
            "type": "defines.circuit_connector_id",
            "doc": "circuit_connector :: [defines.circuit_connector_id](http://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional): The connector to get circuit network fo  \nMust be specified for entities with more than one circuit network connector."
          },
          "wire": {
            "name": "wire",
            "type": "defines.wire_type",
            "doc": "wire :: [defines.wire_type](http://lua-api.factorio.com/latest/defines.html#defines.wire_type): Wire color of the network connected to this entity."
          }
        },
        "doc": "**Parameters**  \nwire :: [defines.wire_type](http://lua-api.factorio.com/latest/defines.html#defines.wire_type): Wire color of the network connected to this entity.  \ncircuit_connector :: [defines.circuit_connector_id](http://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional): The connector to get circuit network fo  \nMust be specified for entities with more than one circuit network connector.  \n\n**Return value**  \nThe circuit network or nil."
      },
      "get_signal_last_tick": {
        "name": "get_signal_last_tick",
        "type": "function",
        "doc": "Gets the value of a specific signal sent by this combinator behavior last tick or nil if the signal didn't exis    \n\n**Parameters**  \nsignal :: [SignalID](http://lua-api.factorio.com/latest/Concepts.html#SignalID): The signal to get  \n\n**Return value**  \nThe value or ````\nnil````\nif none.",
        "returns": "int",
        "args": {
          "signal": {
            "name": "signal",
            "type": "SignalID",
            "doc": "signal :: [SignalID](http://lua-api.factorio.com/latest/Concepts.html#SignalID): The signal to get"
          }
        }
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "object_name": {
        "name": "object_name",
        "type": "string",
        "mode": "[R]",
        "doc": "The class name of this object."
      },
      "parameters": {
        "name": "parameters",
        "type": "ArithmeticCombinatorParameters",
        "mode": "[RW]",
        "doc": "The arithmetic combinator parameters.   \n\n**Note: ** ````\nparameters````\nmay be ````\nnil````\nin order to clear the parameters."
      },
      "signals_last_tick": {
        "name": "signals_last_tick",
        "type": "array of Signal",
        "mode": "[R]",
        "doc": "The circuit network signals sent by this combinator last tick."
      },
      "type": {
        "name": "type",
        "type": "defines.control_behavior.type",
        "mode": "[R]",
        "doc": "The concrete type of this control behavior."
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": "Control behavior for arithmetic combinators."
  },
  "LuaAutoplaceControlPrototype": {
    "name": "LuaAutoplaceControlPrototype",
    "type": "LuaAutoplaceControlPrototype",
    "inherits": [],
    "properties": {
      "category": {
        "name": "category",
        "type": "string",
        "mode": "[R]",
        "doc": "Category name of this prototype."
      },
      "control_order": {
        "name": "control_order",
        "type": "string",
        "mode": "[R]"
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "localised_description": {
        "name": "localised_description",
        "type": "LocalisedString",
        "mode": "[R]"
      },
      "localised_name": {
        "name": "localised_name",
        "type": "LocalisedString",
        "mode": "[R]"
      },
      "name": {
        "name": "name",
        "type": "string",
        "mode": "[R]",
        "doc": "Name of this prototype."
      },
      "object_name": {
        "name": "object_name",
        "type": "string",
        "mode": "[R]",
        "doc": "The class name of this object."
      },
      "order": {
        "name": "order",
        "type": "string",
        "mode": "[R]",
        "doc": "Order string of this prototype."
      },
      "richness": {
        "name": "richness",
        "type": "boolean",
        "mode": "[R]"
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": ""
  },
  "LuaBootstrap": {
    "name": "LuaBootstrap",
    "type": "LuaBootstrap",
    "inherits": [],
    "properties": {
      "active_mods": {
        "name": "active_mods",
        "type": "dictionary string → string",
        "mode": "[R]",
        "doc": "A dictionary listing the names of all currently active mods and mapping them to their versio    \n\n**Example**  \nThis will print the names and versions of all active mods to the consol    \n````\nfor name, version in pairs(script.active_mods) do  \n  game.print(name .. \" version \" .. version)  \nend````"
      },
      "generate_event_name": {
        "name": "generate_event_name",
        "type": "function",
        "doc": "Generate a new, unique event ID.  \n\n**Return value**  \nThe new ID",
        "returns": "uint"
      },
      "get_event_filter": {
        "name": "get_event_filter",
        "type": "function",
        "doc": "Gets the filters for the given even    \n\n**Parameters**  \nevent :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): ID of the event to get.  \n\n**Return value**  \nThe filters or ````\nnil````\nif none are defined.",
        "returns": "table",
        "args": {
          "event": {
            "name": "event",
            "type": "uint",
            "doc": "event :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): ID of the event to get."
          }
        }
      },
      "get_event_handler": {
        "name": "get_event_handler",
        "doc": "Find the event handler for an event.   \n\n**Parameters**  \nevent :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The event identifier to get a handler for  \n\n**Return value**  \nReference to the function currently registered as the handler.",
        "type": "function",
        "args": {
          "event": {
            "name": "event",
            "type": "uint",
            "doc": "event :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The event identifier to get a handler for"
          }
        }
      },
      "get_event_order": {
        "name": "get_event_order",
        "doc": "Gets the mod event orde  \ntype(string)",
        "type": "function"
      },
      "level": {
        "name": "level",
        "type": "table",
        "mode": "[R]",
        "doc": "Information about the currently running scenario/campaign/tutori  \nTable with the following fields:   \nis_simulation :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): Is this level a simulation? (menu, tips&amp;tricks)  \nis_tutorial :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): Is this level a tutorial?  \ncampaign_name :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): The campaign name if any.  \nlevel_name :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): The level name.  \nmod_name :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): The mod name if any."
      },
      "mod_name": {
        "name": "mod_name",
        "type": "string",
        "mode": "[R]",
        "doc": "The name of the mod from the environment this is used i"
      },
      "object_name": {
        "name": "object_name",
        "type": "string",
        "mode": "[R]",
        "doc": "This object's nam"
      },
      "on_configuration_changed": {
        "name": "on_configuration_changed",
        "doc": "Register a function to be run when mod configuration change  \nThis is called any time the game version changes, prototypes change, startup mod settings change, and any time mod versions change including adding or removing mod    \n\n**Parameters**  \nf :: function([ConfigurationChangedData](http://lua-api.factorio.com/latest/Concepts.html#ConfigurationChangedData))  \nThe handler for this event. Passing ````\nnil````\nwill unregister the handler.",
        "type": "function",
        "args": {
          "f": {
            "name": "f",
            "type": "function(ConfigurationChangedData)",
            "doc": "f :: function([ConfigurationChangedData](http://lua-api.factorio.com/latest/Concepts.html#ConfigurationChangedData))  \nThe handler for this event. Passing ````\nnil````\nwill unregister the handler."
          }
        }
      },
      "on_event": {
        "name": "on_event",
        "doc": "Register a handler to run on event or event    \n\n**Parameters**  \nevent :: [defines.events](http://lua-api.factorio.com/latest/defines.html#defines.events) or array of [defines.events](http://lua-api.factorio.com/latest/defines.html#defines.events) or [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): The events or custom-input name to invoke the handler on  \nf :: function(Event): The handler to run. Passing nil will unregister the handler. The handl  \nwill receive a table that contains the key ````\nname````\n(of type [defines.events](http://lua-api.factorio.com/latest/defines.html#defines.events)) specifying the na  \nof the event it was called to handle, and ````\ntick````\nthat specifies when the event was created. This table wi  \nalso contain other fields, depending on the type of the event. S  \n[ the list of Factorio events](http://lua-api.factorio.com/latest/events.html) for a listing of these additional fields.  \nfilters :: Filters (optional): The filters for this single event registratio  \nSee [ the list of event filters](http://lua-api.factorio.com/latest/Event-Filters.html) for a listing of these filters.  \n\n**Note: ** Events raised by [LuaBootstrap::raise_event](http://lua-api.factorio.com/latest/LuaBootstrap.html#LuaBootstrap.raise_event) contain ````\nmod_name````\nadditionally to the above properties.",
        "type": "function",
        "args": {
          "event": {
            "name": "event",
            "type": "defines.events or array of defines.events or string",
            "doc": "event :: [defines.events](http://lua-api.factorio.com/latest/defines.html#defines.events) or array of [defines.events](http://lua-api.factorio.com/latest/defines.html#defines.events) or [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): The events or custom-input name to invoke the handler on"
          },
          "f": {
            "name": "f",
            "type": "function(Event)",
            "doc": "f :: function(Event): The handler to run. Passing nil will unregister the handler. The handl  \nwill receive a table that contains the key ````\nname````\n(of type [defines.events](http://lua-api.factorio.com/latest/defines.html#defines.events)) specifying the na  \nof the event it was called to handle, and ````\ntick````\nthat specifies when the event was created. This table wi  \nalso contain other fields, depending on the type of the event. S  \n[ the list of Factorio events](http://lua-api.factorio.com/latest/events.html) for a listing of these additional fields."
          },
          "filters": {
            "name": "filters",
            "type": "Filters",
            "doc": "filters :: Filters (optional): The filters for this single event registratio  \nSee [ the list of event filters](http://lua-api.factorio.com/latest/Event-Filters.html) for a listing of these filters."
          }
        }
      },
      "on_init": {
        "name": "on_init",
        "doc": "Register a callback to be run on mod ini  \nThis is called once when a new save game is created or once when a save file is loaded that previously didn't contain the mo  \nThis is always called before other event handlers and is meant for setting up initial values that a mod will use for its lifetim    \n\n**Parameters**  \nf :: function(): The function to call. Passing nil wi  \nunregister the handler.",
        "type": "function",
        "args": {
          "f": {
            "name": "f",
            "type": "function()",
            "doc": "f :: function(): The function to call. Passing nil wi  \nunregister the handler."
          }
        }
      },
      "on_load": {
        "name": "on_load",
        "doc": "Register a function to be run on module loa  \nThis is called every time a save file is loaded *except* for the instance when a mod is loaded into a save file that it previously wasn't part o  \nAdditionally this is called when connecting to any other game in a multiplayer session and should never change the game state. This is meant for 3 specific reasons and only     \nre-register conditional event handlers  \nre-setup meta tables  \ncreate local references to tables stored in the global table  \nIn all other instances the [LuaBootstrap::on_init](http://lua-api.factorio.com/latest/LuaBootstrap.html#LuaBootstrap.on_init), [LuaBootstrap::on_configuration_changed](http://lua-api.factorio.com/latest/LuaBootstrap.html#LuaBootstrap.on_configuration_changed) or migration scripts should be use  \nDoing any other logic when loading a save file can break the replay and cause desync issues if the mod is used in multiplaye    \n\n**Parameters**  \nf :: function(): The function to call. Passing ````\nnil````\nwill unregister the handler.  \n\n**Note: ** [LuaGameScript](http://lua-api.factorio.com/latest/LuaGameScript.html) and [LuaRendering](http://lua-api.factorio.com/latest/LuaRendering.html) are unavailable in this event.",
        "type": "function",
        "args": {
          "f": {
            "name": "f",
            "type": "function()",
            "doc": "f :: function(): The function to call. Passing ````\nnil````\nwill unregister the handler."
          }
        }
      },
      "on_nth_tick": {
        "name": "on_nth_tick",
        "doc": "Register a handler to run every nth tick(s). When the game is on tick 0 it will trigger all registered handler    \n\n**Parameters**  \ntick :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) or array of [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The nth-tick(s) to invoke the handler on. Passing ````\nnil````\nas the only parameter will unregister all nth-tick handlers.  \nf :: function([NthTickEvent](http://lua-api.factorio.com/latest/Concepts.html#NthTickEvent)): The handler to run. Passing ````\nnil````\nwill unregister the handler for the provided ticks.",
        "type": "function",
        "args": {
          "f": {
            "name": "f",
            "type": "function(NthTickEvent)",
            "doc": "f :: function([NthTickEvent](http://lua-api.factorio.com/latest/Concepts.html#NthTickEvent)): The handler to run. Passing ````\nnil````\nwill unregister the handler for the provided ticks."
          },
          "tick": {
            "name": "tick",
            "type": "uint or array of uint",
            "doc": "tick :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) or array of [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The nth-tick(s) to invoke the handler on. Passing ````\nnil````\nas the only parameter will unregister all nth-tick handlers."
          }
        }
      },
      "raise_biter_base_built": {
        "name": "raise_biter_base_built",
        "doc": "Raises [on_biter_base_built](http://lua-api.factorio.com/latest/events.html#on_biter_base_buil    \n\n**Parameters**  \ntable :: [RaiseEvent\n\n**Parameters**  \n](http://lua-api.factorio.com/latest/Concepts.html#RaiseEvent\n\n**Parameters**  \n)",
        "type": "function",
        "args": {
          "table": {
            "name": "table",
            "type": "RaiseEventParameters",
            "doc": "table :: [RaiseEvent\n\n**Parameters**  \n](http://lua-api.factorio.com/latest/Concepts.html#RaiseEvent\n\n**Parameters**  \n)"
          }
        }
      },
      "raise_console_chat": {
        "name": "raise_console_chat",
        "doc": "Raises [on_console_chat](http://lua-api.factorio.com/latest/events.html#on_console_cha    \n\n**Parameters**  \ntable :: [RaiseEvent\n\n**Parameters**  \n](http://lua-api.factorio.com/latest/Concepts.html#RaiseEvent\n\n**Parameters**  \n)",
        "type": "function",
        "args": {
          "table": {
            "name": "table",
            "type": "RaiseEventParameters",
            "doc": "table :: [RaiseEvent\n\n**Parameters**  \n](http://lua-api.factorio.com/latest/Concepts.html#RaiseEvent\n\n**Parameters**  \n)"
          }
        }
      },
      "raise_event": {
        "name": "raise_event",
        "doc": "Raise an event. Only events generated with [LuaBootstrap::generate_event_name](http://lua-api.factorio.com/latest/LuaBootstrap.html#LuaBootstrap.generate_event_name) and the following can be raise  \n[on_console_chat](http://lua-api.factorio.com/latest/events.html#on_console_cha  \n[on_player_crafted_item](http://lua-api.factorio.com/latest/events.html#on_player_crafted_ite  \n[on_player_fast_transferred](http://lua-api.factorio.com/latest/events.html#on_player_fast_transferre  \n[on_biter_base_built](http://lua-api.factorio.com/latest/events.html#on_biter_base_buil  \n[on_market_item_purchased](http://lua-api.factorio.com/latest/events.html#on_market_item_purchase  \n[script_raised_built](http://lua-api.factorio.com/latest/events.html#script_raised_buil  \n[script_raised_destroy](http://lua-api.factorio.com/latest/events.html#script_raised_destro  \n[script_raised_revive](http://lua-api.factorio.com/latest/events.html#script_raised_reviv  \n[script_raised_set_tiles](http://lua-api.factorio.com/latest/events.html#script_raised_set_tile    \n\n**Parameters**  \nevent :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): ID of the event to raise  \ntable: Table with extra data. This table will be passed to the event handler.",
        "type": "function",
        "args": {
          "event": {
            "name": "event",
            "type": "uint",
            "doc": "event :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): ID of the event to raise"
          },
          "table": {
            "name": "table",
            "doc": "table: Table with extra data. This table will be passed to the event handler.",
            "type": "table"
          }
        }
      },
      "raise_market_item_purchased": {
        "name": "raise_market_item_purchased",
        "doc": "Raises [on_market_item_purchased](http://lua-api.factorio.com/latest/events.html#on_market_item_purchase    \n\n**Parameters**  \ntable :: [RaiseEvent\n\n**Parameters**  \n](http://lua-api.factorio.com/latest/Concepts.html#RaiseEvent\n\n**Parameters**  \n)",
        "type": "function",
        "args": {
          "table": {
            "name": "table",
            "type": "RaiseEventParameters",
            "doc": "table :: [RaiseEvent\n\n**Parameters**  \n](http://lua-api.factorio.com/latest/Concepts.html#RaiseEvent\n\n**Parameters**  \n)"
          }
        }
      },
      "raise_player_crafted_item": {
        "name": "raise_player_crafted_item",
        "doc": "Raises [on_player_crafted_item](http://lua-api.factorio.com/latest/events.html#on_player_crafted_ite    \n\n**Parameters**  \ntable :: [RaiseEvent\n\n**Parameters**  \n](http://lua-api.factorio.com/latest/Concepts.html#RaiseEvent\n\n**Parameters**  \n)",
        "type": "function",
        "args": {
          "table": {
            "name": "table",
            "type": "RaiseEventParameters",
            "doc": "table :: [RaiseEvent\n\n**Parameters**  \n](http://lua-api.factorio.com/latest/Concepts.html#RaiseEvent\n\n**Parameters**  \n)"
          }
        }
      },
      "raise_player_fast_transferred": {
        "name": "raise_player_fast_transferred",
        "doc": "Raises [on_player_fast_transferred](http://lua-api.factorio.com/latest/events.html#on_player_fast_transferre    \n\n**Parameters**  \ntable :: [RaiseEvent\n\n**Parameters**  \n](http://lua-api.factorio.com/latest/Concepts.html#RaiseEvent\n\n**Parameters**  \n)",
        "type": "function",
        "args": {
          "table": {
            "name": "table",
            "type": "RaiseEventParameters",
            "doc": "table :: [RaiseEvent\n\n**Parameters**  \n](http://lua-api.factorio.com/latest/Concepts.html#RaiseEvent\n\n**Parameters**  \n)"
          }
        }
      },
      "raise_script_built": {
        "name": "raise_script_built",
        "doc": "Raises [script_raised_built](http://lua-api.factorio.com/latest/events.html#script_raised_buil    \n\n**Parameters**  \ntable :: [RaiseEvent\n\n**Parameters**  \n](http://lua-api.factorio.com/latest/Concepts.html#RaiseEvent\n\n**Parameters**  \n)",
        "type": "function",
        "args": {
          "table": {
            "name": "table",
            "type": "RaiseEventParameters",
            "doc": "table :: [RaiseEvent\n\n**Parameters**  \n](http://lua-api.factorio.com/latest/Concepts.html#RaiseEvent\n\n**Parameters**  \n)"
          }
        }
      },
      "raise_script_destroy": {
        "name": "raise_script_destroy",
        "doc": "Raises [script_raised_destroy](http://lua-api.factorio.com/latest/events.html#script_raised_destro    \n\n**Parameters**  \ntable :: [RaiseEvent\n\n**Parameters**  \n](http://lua-api.factorio.com/latest/Concepts.html#RaiseEvent\n\n**Parameters**  \n)",
        "type": "function",
        "args": {
          "table": {
            "name": "table",
            "type": "RaiseEventParameters",
            "doc": "table :: [RaiseEvent\n\n**Parameters**  \n](http://lua-api.factorio.com/latest/Concepts.html#RaiseEvent\n\n**Parameters**  \n)"
          }
        }
      },
      "raise_script_revive": {
        "name": "raise_script_revive",
        "doc": "Raises [script_raised_revive](http://lua-api.factorio.com/latest/events.html#script_raised_reviv    \n\n**Parameters**  \ntable :: [RaiseEvent\n\n**Parameters**  \n](http://lua-api.factorio.com/latest/Concepts.html#RaiseEvent\n\n**Parameters**  \n)",
        "type": "function",
        "args": {
          "table": {
            "name": "table",
            "type": "RaiseEventParameters",
            "doc": "table :: [RaiseEvent\n\n**Parameters**  \n](http://lua-api.factorio.com/latest/Concepts.html#RaiseEvent\n\n**Parameters**  \n)"
          }
        }
      },
      "raise_script_set_tiles": {
        "name": "raise_script_set_tiles",
        "doc": "Raises [script_raised_set_tiles](http://lua-api.factorio.com/latest/events.html#script_raised_set_tile    \n\n**Parameters**  \ntable :: [RaiseEvent\n\n**Parameters**  \n](http://lua-api.factorio.com/latest/Concepts.html#RaiseEvent\n\n**Parameters**  \n)",
        "type": "function",
        "args": {
          "table": {
            "name": "table",
            "type": "RaiseEventParameters",
            "doc": "table :: [RaiseEvent\n\n**Parameters**  \n](http://lua-api.factorio.com/latest/Concepts.html#RaiseEvent\n\n**Parameters**  \n)"
          }
        }
      },
      "register_on_entity_destroyed": {
        "name": "register_on_entity_destroyed",
        "type": "function",
        "doc": "Registers an entity so that after it's destroyed [on_entity_destroyed](http://lua-api.factorio.com/latest/events.html#on_entity_destroyed) is calle    \n\n**Parameters**  \nentity :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html): The entity to register.  \n\n**Return value**  \nThe registration number.  \n\n**Note: ** Once an entity is registered it's registered forever (until it's destroyed) and persists through save/load.  \n\n**Note: ** Registered is global across all mods: once an entity is registered the event will be fired for all mods when its destroyed.  \n\n**Note: ** An entity registered multiple times will only fire the event once and gives back the same registration number.  \n\n**Note: ** Depending on when a given entity is destroyed [on_entity_destroyed](http://lua-api.factorio.com/latest/events.html#on_entity_destroyed) will be fired at the end of the current tick or end of the next tick.",
        "returns": "uint64",
        "args": {
          "entity": {
            "name": "entity",
            "type": "LuaEntity",
            "doc": "entity :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html): The entity to register."
          }
        }
      },
      "set_event_filter": {
        "name": "set_event_filter",
        "doc": "Sets the filters for the given even    \n\n**Parameters**  \nevent :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): ID of the event to filter.  \nfilters :: Filters (optional): The [ filters](http://lua-api.factorio.com/latest/Event-Filters.html) or ````\nnil````\nto clear the filters",
        "type": "function",
        "args": {
          "event": {
            "name": "event",
            "type": "uint",
            "doc": "event :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): ID of the event to filter."
          },
          "filters": {
            "name": "filters",
            "type": "Filters",
            "doc": "filters :: Filters (optional): The [ filters](http://lua-api.factorio.com/latest/Event-Filters.html) or ````\nnil````\nto clear the filters"
          }
        }
      }
    },
    "doc": "Register a callback to be run on mod init.\n This is called once when a new save game is created or once when a save file is loaded that previously didn't contain the mod.\n This is always called before other event handlers and is meant for setting up initial values that a mod will use for its lifetime."
  },
  "LuaBurner": {
    "name": "LuaBurner",
    "type": "LuaBurner",
    "inherits": [],
    "properties": {
      "burnt_result_inventory": {
        "name": "burnt_result_inventory",
        "type": "LuaInventory",
        "mode": "[R]",
        "doc": "The burnt result inventor"
      },
      "currently_burning": {
        "name": "currently_burning",
        "type": "LuaItemPrototype",
        "mode": "[RW]",
        "doc": "**Note: ** Writing automatically handles correcting [LuaBurner::remaining_burning_fuel](http://lua-api.factorio.com/latest/LuaBurner.html#LuaBurner.remaining_burning_fuel)."
      },
      "fuel_categories": {
        "name": "fuel_categories",
        "type": "dictionary string → boolean",
        "mode": "[R]",
        "doc": "The fuel categories this burner use    \n\n**Note: ** The value in the dictionary is meaningless and exists just to allow the dictionary type for easy lookup."
      },
      "heat": {
        "name": "heat",
        "type": "double",
        "mode": "[RW]"
      },
      "heat_capacity": {
        "name": "heat_capacity",
        "type": "double",
        "mode": "[R]"
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "inventory": {
        "name": "inventory",
        "type": "LuaInventory",
        "mode": "[R]",
        "doc": "The fuel inventor"
      },
      "object_name": {
        "name": "object_name",
        "type": "string",
        "mode": "[R]",
        "doc": "The class name of this object."
      },
      "owner": {
        "name": "owner",
        "type": "LuaEntity or LuaEquipment",
        "mode": "[R]",
        "doc": "The owner of this burner energy sour"
      },
      "remaining_burning_fuel": {
        "name": "remaining_burning_fuel",
        "type": "double",
        "mode": "[RW]",
        "doc": "**Note: ** Writing will silently do nothing if there's no [LuaBurner::currently_burning](http://lua-api.factorio.com/latest/LuaBurner.html#LuaBurner.currently_burning) set."
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": "The owner of this burner energy source"
  },
  "LuaBurnerPrototype": {
    "name": "LuaBurnerPrototype",
    "type": "LuaBurnerPrototype",
    "inherits": [],
    "properties": {
      "burnt_inventory_size": {
        "name": "burnt_inventory_size",
        "type": "uint",
        "mode": "[R]"
      },
      "effectivity": {
        "name": "effectivity",
        "type": "double",
        "mode": "[R]"
      },
      "emissions": {
        "name": "emissions",
        "type": "double",
        "mode": "[R]"
      },
      "fuel_categories": {
        "name": "fuel_categories",
        "type": "dictionary string → boolean",
        "mode": "[R]",
        "doc": "**Note: ** The value in the dictionary is meaningless and exists just to allow the dictionary type for easy lookup."
      },
      "fuel_inventory_size": {
        "name": "fuel_inventory_size",
        "type": "uint",
        "mode": "[R]"
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "light_flicker": {
        "name": "light_flicker",
        "type": "table",
        "mode": "[R]",
        "doc": "The light flicker definition for this burner prototype if an  \nTable with the following fields:   \nminimum_intensity :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float)  \nmaximum_intensity :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float)  \nderivation_change_frequency :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float)  \nderivation_change_deviation :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float)  \nborder_fix_speed :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float)  \nminimum_light_size :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float)  \nlight_intensity_to_size_coefficient :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float)  \ncolor :: [Color](http://lua-api.factorio.com/latest/Concepts.html#Color)"
      },
      "object_name": {
        "name": "object_name",
        "type": "string",
        "mode": "[R]",
        "doc": "The class name of this object."
      },
      "render_no_network_icon": {
        "name": "render_no_network_icon",
        "type": "boolean",
        "mode": "[R]"
      },
      "render_no_power_icon": {
        "name": "render_no_power_icon",
        "type": "boolean",
        "mode": "[R]"
      },
      "smoke": {
        "name": "smoke",
        "type": "array of SmokeSource",
        "mode": "[R]",
        "doc": "The smoke sources for this burner prototype if an"
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": ""
  },
  "LuaChunkIterator": {
    "name": "LuaChunkIterator",
    "type": "LuaChunkIterator",
    "inherits": [],
    "properties": {
      "()": {
        "name": "()",
        "type": "function",
        "doc": "Get the next chunk position or ````\nnil````\n, and increments the iterator.",
        "returns": "ChunkPositionAndArea"
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "object_name": {
        "name": "object_name",
        "type": "string",
        "mode": "[R]",
        "doc": "The class name of this object."
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": ""
  },
  "LuaCircuitNetwork": {
    "name": "LuaCircuitNetwork",
    "type": "LuaCircuitNetwork",
    "inherits": [],
    "properties": {
      "circuit_connector_id": {
        "name": "circuit_connector_id",
        "type": "defines.circuit_connector_id",
        "mode": "[R]",
        "doc": "The circuit connector ID on the associated entity this network was gotten from."
      },
      "connected_circuit_count": {
        "name": "connected_circuit_count",
        "type": "uint",
        "mode": "[R]",
        "doc": "The number of circuits connected to this network."
      },
      "entity": {
        "name": "entity",
        "type": "LuaEntity",
        "mode": "[R]",
        "doc": "The entity this circuit network reference is associated with"
      },
      "get_signal": {
        "name": "get_signal",
        "type": "function",
        "returns": "int",
        "args": {
          "signal": {
            "name": "signal",
            "type": "SignalID",
            "doc": "signal :: [SignalID](http://lua-api.factorio.com/latest/Concepts.html#SignalID): The signal to read."
          }
        },
        "doc": "**Parameters**  \nsignal :: [SignalID](http://lua-api.factorio.com/latest/Concepts.html#SignalID): The signal to read.  \n\n**Return value**  \nThe current value of the signal."
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "network_id": {
        "name": "network_id",
        "type": "uint",
        "mode": "[R]",
        "doc": "The circuit networks ID."
      },
      "object_name": {
        "name": "object_name",
        "type": "string",
        "mode": "[R]",
        "doc": "The class name of this object."
      },
      "signals": {
        "name": "signals",
        "type": "array of Signal",
        "mode": "[R]",
        "doc": "The circuit network signals last tick. ````\nnil````\nif there are no signals."
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      },
      "wire_type": {
        "name": "wire_type",
        "type": "defines.wire_type",
        "mode": "[R]",
        "doc": "The wire type this network is associated with."
      }
    },
    "doc": ""
  },
  "LuaCombinatorControlBehavior": {
    "name": "LuaCombinatorControlBehavior",
    "type": "LuaCombinatorControlBehavior",
    "inherits": [],
    "properties": {
      "get_signal_last_tick": {
        "name": "get_signal_last_tick",
        "type": "function",
        "doc": "Gets the value of a specific signal sent by this combinator behavior last tick or nil if the signal didn't exis    \n\n**Parameters**  \nsignal :: [SignalID](http://lua-api.factorio.com/latest/Concepts.html#SignalID): The signal to get  \n\n**Return value**  \nThe value or ````\nnil````\nif none.",
        "returns": "int",
        "args": {
          "signal": {
            "name": "signal",
            "type": "SignalID",
            "doc": "signal :: [SignalID](http://lua-api.factorio.com/latest/Concepts.html#SignalID): The signal to get"
          }
        }
      },
      "signals_last_tick": {
        "name": "signals_last_tick",
        "type": "array of Signal",
        "mode": "[R]",
        "doc": "The circuit network signals sent by this combinator last tick."
      }
    },
    "doc": ""
  },
  "LuaCommandProcessor": {
    "name": "LuaCommandProcessor",
    "type": "LuaCommandProcessor",
    "inherits": [],
    "properties": {
      "add_command": {
        "name": "add_command",
        "doc": "Add a custom console command  \nThe function registered to the command is passed a table when the command is invoked. This table contain    \nname :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): The name of the command.  \ntick :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The tick the command was used in.  \nplayer_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional): The player who issued the command, or ````\nnil````\nif it was issued from the server console.  \nparameter :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): The parameter passed after the command, if there is one.  \n\n**Parameters**  \nname :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): The desired name of the command (case sensitive).  \nhelp :: [LocalisedString](http://lua-api.factorio.com/latest/Concepts.html#LocalisedString): The localised help message. It will be shown to players using the ````\n/help````\ncommand.  \nfunction :: function: The function that will be called when this command is invoked.  \n\n**Note: ** Trying to add a command with the ````\nname````\nof a game command or the name of a custom command that is already in use will result in an error.  \n\n**Example**  \nThis will register a custom event called ````\nprint_tick````\nthat prints the current tick to either the player issuing the command or to everyone on the server, depending on the command parameter. It shows the usage of the table that gets passed to any function handling a custom command. This specific example makes use of the ````\ntick````\nand the optional ````\nplayer_index````\nand ````\nparameter````\nfields. The user is supposed to either call it without any parameter (````\n\"/print_tick\"````\n) or with the ````\n\"me\"````\nparameter (````\n\"/print_tick me\"````  \n````\ncommands.add_command(\"print_tick\", nil, function(command)  \n  if command.player_index ~= nil and command.parameter == \"me\" then  \n    game.get_player(command.player_index).print(command.tick)  \n  else  \n    game.print(command.tick)  \n  end  \nend)````",
        "type": "function",
        "args": {
          "function": {
            "name": "function",
            "type": "function",
            "doc": "function :: function: The function that will be called when this command is invoked."
          },
          "help": {
            "name": "help",
            "type": "LocalisedString",
            "doc": "help :: [LocalisedString](http://lua-api.factorio.com/latest/Concepts.html#LocalisedString): The localised help message. It will be shown to players using the ````\n/help````\ncommand."
          },
          "name": {
            "name": "name",
            "type": "string",
            "doc": "name :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): The desired name of the command (case sensitive)."
          }
        }
      },
      "commands": {
        "name": "commands",
        "type": "dictionary string → LocalisedString",
        "mode": "[R]",
        "doc": "Lists the custom commands registered by scripts through ````\nLuaCommandProcessor````"
      },
      "game_commands": {
        "name": "game_commands",
        "type": "dictionary string → LocalisedString",
        "mode": "[R]",
        "doc": "Lists the built-in commands of the core game. The <a href=\"https://wiki.factorio.com/Console\"> wiki</a> has an overview of thes"
      },
      "object_name": {
        "name": "object_name",
        "type": "string",
        "mode": "[R]",
        "doc": "This object's nam"
      },
      "remove_command": {
        "name": "remove_command",
        "type": "function",
        "doc": "Remove a custom console comman    \n\n**Parameters**  \nname :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): The name of the command to remove (case sensitive).  \n\n**Return value**  \nWhether the command was successfully removed. Returns ````\nfalse````\nif the command didn't exist.",
        "returns": "boolean",
        "args": {
          "name": {
            "name": "name",
            "type": "string",
            "doc": "name :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): The name of the command to remove (case sensitive)."
          }
        }
      }
    },
    "doc": "Add a custom console command."
  },
  "LuaConstantCombinatorControlBehavior": {
    "name": "LuaConstantCombinatorControlBehavior",
    "type": "LuaConstantCombinatorControlBehavior",
    "inherits": [
      "Inherited from LuaControlBehavior: get_circuit_network, type, entity"
    ],
    "properties": {
      "enabled": {
        "name": "enabled",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "Turns this constant combinator on and of"
      },
      "entity": {
        "name": "entity",
        "type": "LuaEntity",
        "mode": "[R]",
        "doc": "The entity this control behavior belongs to."
      },
      "get_circuit_network": {
        "name": "get_circuit_network",
        "type": "function",
        "returns": "LuaCircuitNetwork",
        "args": {
          "circuit_connector": {
            "name": "circuit_connector",
            "type": "defines.circuit_connector_id",
            "doc": "circuit_connector :: [defines.circuit_connector_id](http://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional): The connector to get circuit network fo  \nMust be specified for entities with more than one circuit network connector."
          },
          "wire": {
            "name": "wire",
            "type": "defines.wire_type",
            "doc": "wire :: [defines.wire_type](http://lua-api.factorio.com/latest/defines.html#defines.wire_type): Wire color of the network connected to this entity."
          }
        },
        "doc": "**Parameters**  \nwire :: [defines.wire_type](http://lua-api.factorio.com/latest/defines.html#defines.wire_type): Wire color of the network connected to this entity.  \ncircuit_connector :: [defines.circuit_connector_id](http://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional): The connector to get circuit network fo  \nMust be specified for entities with more than one circuit network connector.  \n\n**Return value**  \nThe circuit network or nil."
      },
      "get_signal": {
        "name": "get_signal",
        "type": "function",
        "doc": "Gets the signal at the given index. Returned [Signal](http://lua-api.factorio.com/latest/Concepts.html#Signal) will not contain signal if none is set for the inde    \n\n**Parameters**  \nindex :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)",
        "returns": "Signal",
        "args": {
          "index": {
            "name": "index",
            "type": "uint",
            "doc": "index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)"
          }
        }
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "object_name": {
        "name": "object_name",
        "type": "string",
        "mode": "[R]",
        "doc": "The class name of this object."
      },
      "parameters": {
        "name": "parameters",
        "type": "ConstantCombinatorParameters",
        "mode": "[RW]",
        "doc": "The constant combinator paramete    \n\n**Note: ** Setting to ````\nnil````\nclears the parameters."
      },
      "set_signal": {
        "name": "set_signal",
        "doc": "Sets the signal at the given ind    \n\n**Parameters**  \nindex :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \nsignal :: [Signal](http://lua-api.factorio.com/latest/Concepts.html#Signal)",
        "type": "function",
        "args": {
          "index": {
            "name": "index",
            "type": "uint",
            "doc": "index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)"
          },
          "signal": {
            "name": "signal",
            "type": "Signal",
            "doc": "signal :: [Signal](http://lua-api.factorio.com/latest/Concepts.html#Signal)"
          }
        }
      },
      "signals_count": {
        "name": "signals_count",
        "type": "uint",
        "mode": "[R]",
        "doc": "The number of signals this constant combinator suppor"
      },
      "type": {
        "name": "type",
        "type": "defines.control_behavior.type",
        "mode": "[R]",
        "doc": "The concrete type of this control behavior."
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": "Control behavior for constant combinators."
  },
  "LuaContainerControlBehavior": {
    "name": "LuaContainerControlBehavior",
    "type": "LuaContainerControlBehavior",
    "inherits": [
      "Inherited from LuaControlBehavior: get_circuit_network, type, entity"
    ],
    "properties": {
      "entity": {
        "name": "entity",
        "type": "LuaEntity",
        "mode": "[R]",
        "doc": "The entity this control behavior belongs to."
      },
      "get_circuit_network": {
        "name": "get_circuit_network",
        "type": "function",
        "returns": "LuaCircuitNetwork",
        "args": {
          "circuit_connector": {
            "name": "circuit_connector",
            "type": "defines.circuit_connector_id",
            "doc": "circuit_connector :: [defines.circuit_connector_id](http://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional): The connector to get circuit network fo  \nMust be specified for entities with more than one circuit network connector."
          },
          "wire": {
            "name": "wire",
            "type": "defines.wire_type",
            "doc": "wire :: [defines.wire_type](http://lua-api.factorio.com/latest/defines.html#defines.wire_type): Wire color of the network connected to this entity."
          }
        },
        "doc": "**Parameters**  \nwire :: [defines.wire_type](http://lua-api.factorio.com/latest/defines.html#defines.wire_type): Wire color of the network connected to this entity.  \ncircuit_connector :: [defines.circuit_connector_id](http://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional): The connector to get circuit network fo  \nMust be specified for entities with more than one circuit network connector.  \n\n**Return value**  \nThe circuit network or nil."
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "object_name": {
        "name": "object_name",
        "type": "string",
        "mode": "[R]",
        "doc": "The class name of this object."
      },
      "type": {
        "name": "type",
        "type": "defines.control_behavior.type",
        "mode": "[R]",
        "doc": "The concrete type of this control behavior."
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": "Control behavior for container entities."
  },
  "LuaControl": {
    "name": "LuaControl",
    "type": "LuaControl",
    "inherits": [],
    "properties": {
      "begin_crafting": {
        "name": "begin_crafting",
        "type": "function",
        "doc": "Begins crafting the given count of the given recip    \n\n**Parameters**  \ncount :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The count to craft.  \nrecipe :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) or [LuaRecipe](http://lua-api.factorio.com/latest/LuaRecipe.html): The recipe to craft.  \nsilent :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If false and the recipe can't be crafted the requested number of times printing the failure is skipped.  \n\n**Return value**  \nThe count that was actually started crafting.",
        "returns": "uint",
        "args": {
          "count": {
            "name": "count",
            "type": "uint",
            "doc": "count :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The count to craft.  \nrecipe :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) or [LuaRecipe](http://lua-api.factorio.com/latest/LuaRecipe.html): The recipe to craft.  \nsilent :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If false and the recipe can't be crafted the requested number of times printing the failure is skipped."
          }
        }
      },
      "build_distance": {
        "name": "build_distance",
        "type": "uint",
        "mode": "[R]",
        "doc": "The build distance of this character or max uint when not a character or player connected to a characte"
      },
      "can_insert": {
        "name": "can_insert",
        "type": "function",
        "doc": "Can at least some items be inserted?   \n\n**Parameters**  \nitems :: [ItemStackSpecification](http://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification): Items that would be inserted.  \n\n**Return value**  \n````\ntrue````\nif at least a part of the given items could be inserted into this inventory.",
        "returns": "boolean",
        "args": {
          "items": {
            "name": "items",
            "type": "ItemStackSpecification",
            "doc": "items :: [ItemStackSpecification](http://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification): Items that would be inserted."
          }
        }
      },
      "can_reach_entity": {
        "name": "can_reach_entity",
        "type": "function",
        "doc": "Can a given entity be opened or accessed?   \n\n**Parameters**  \nentity :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)",
        "returns": "boolean",
        "args": {
          "entity": {
            "name": "entity",
            "type": "LuaEntity",
            "doc": "entity :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)"
          }
        }
      },
      "cancel_crafting": {
        "name": "cancel_crafting",
        "doc": "Cancels crafting the given count of the given crafting queue index   \n\n**Parameters**  \noptions: :   \nindex :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The crafting queue index.  \ncount :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The count to cancel crafting.",
        "type": "function",
        "args": {
          "options": {
            "name": "options",
            "type": "uint",
            "doc": "options: :   \nindex :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The crafting queue index.  \ncount :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The count to cancel crafting."
          }
        }
      },
      "character_additional_mining_categories": {
        "name": "character_additional_mining_categories",
        "type": "array of string",
        "mode": "[RW]",
        "doc": "**Note: ** When called on a [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html), it must be associated with a character (see [LuaPlayer::character](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character))."
      },
      "character_build_distance_bonus": {
        "name": "character_build_distance_bonus",
        "type": "uint",
        "mode": "[RW]",
        "doc": "**Note: ** When called on a [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html), it must be associated with a character (see [LuaPlayer::character](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character))."
      },
      "character_crafting_speed_modifier": {
        "name": "character_crafting_speed_modifier",
        "type": "double",
        "mode": "[RW]",
        "doc": "**Note: ** When called on a [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html), it must be associated with a character (see [LuaPlayer::character](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character))."
      },
      "character_health_bonus": {
        "name": "character_health_bonus",
        "type": "float",
        "mode": "[RW]",
        "doc": "**Note: ** When called on a [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html), it must be associated with a character (see [LuaPlayer::character](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character))."
      },
      "character_inventory_slots_bonus": {
        "name": "character_inventory_slots_bonus",
        "type": "uint",
        "mode": "[RW]",
        "doc": "**Note: ** When called on a [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html), it must be associated with a character (see [LuaPlayer::character](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character))."
      },
      "character_item_drop_distance_bonus": {
        "name": "character_item_drop_distance_bonus",
        "type": "uint",
        "mode": "[RW]",
        "doc": "**Note: ** When called on a [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html), it must be associated with a character (see [LuaPlayer::character](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character))."
      },
      "character_item_pickup_distance_bonus": {
        "name": "character_item_pickup_distance_bonus",
        "type": "uint",
        "mode": "[RW]",
        "doc": "**Note: ** When called on a [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html), it must be associated with a character (see [LuaPlayer::character](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character))."
      },
      "character_loot_pickup_distance_bonus": {
        "name": "character_loot_pickup_distance_bonus",
        "type": "uint",
        "mode": "[RW]",
        "doc": "**Note: ** When called on a [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html), it must be associated with a character (see [LuaPlayer::character](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character))."
      },
      "character_maximum_following_robot_count_bonus": {
        "name": "character_maximum_following_robot_count_bonus",
        "type": "uint",
        "mode": "[RW]",
        "doc": "**Note: ** When called on a [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html), it must be associated with a character (see [LuaPlayer::character](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character))."
      },
      "character_mining_progress": {
        "name": "character_mining_progress",
        "type": "double",
        "mode": "[R]",
        "doc": "Gets the current mining progress between 0 and 1 of this character, or 0 if they aren't minin"
      },
      "character_mining_speed_modifier": {
        "name": "character_mining_speed_modifier",
        "type": "double",
        "mode": "[RW]",
        "doc": "**Note: ** When called on a [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html), it must be associated with a character (see [LuaPlayer::character](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character))."
      },
      "character_personal_logistic_requests_enabled": {
        "name": "character_personal_logistic_requests_enabled",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "If personal logistic requests are enabled for this character or players character."
      },
      "character_reach_distance_bonus": {
        "name": "character_reach_distance_bonus",
        "type": "uint",
        "mode": "[RW]",
        "doc": "**Note: ** When called on a [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html), it must be associated with a character (see [LuaPlayer::character](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character))."
      },
      "character_resource_reach_distance_bonus": {
        "name": "character_resource_reach_distance_bonus",
        "type": "uint",
        "mode": "[RW]",
        "doc": "**Note: ** When called on a [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html), it must be associated with a character (see [LuaPlayer::character](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character))."
      },
      "character_running_speed": {
        "name": "character_running_speed",
        "type": "double",
        "mode": "[R]",
        "doc": "Gets the current movement speed of this character, including effects from exoskeletons, tiles, stickers and shootin"
      },
      "character_running_speed_modifier": {
        "name": "character_running_speed_modifier",
        "type": "double",
        "mode": "[RW]",
        "doc": "**Note: ** When called on a [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html), it must be associated with a character (see [LuaPlayer::character](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character))."
      },
      "character_trash_slot_count_bonus": {
        "name": "character_trash_slot_count_bonus",
        "type": "uint",
        "mode": "[RW]",
        "doc": "**Note: ** When called on a [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html), it must be associated with a character (see [LuaPlayer::character](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character))."
      },
      "cheat_mode": {
        "name": "cheat_mode",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "When ````\ntrue````\nhand crafting is free and instant"
      },
      "clear_gui_arrow": {
        "name": "clear_gui_arrow",
        "doc": "Removes the arrow created by ````\nset_gui_arrow````\n.",
        "type": "function"
      },
      "clear_items_inside": {
        "name": "clear_items_inside",
        "doc": "Remove all items from this entity.",
        "type": "function"
      },
      "clear_personal_logistic_slot": {
        "name": "clear_personal_logistic_slot",
        "type": "function",
        "args": {
          "slot_index": {
            "name": "slot_index",
            "type": "uint",
            "doc": "slot_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The slot to clear."
          }
        },
        "doc": "**Parameters**  \nslot_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The slot to clear.  \n\n**Note: ** This will silently fail if personal logistics are not researched."
      },
      "clear_selected_entity": {
        "name": "clear_selected_entity",
        "doc": "Unselect any selected entity.",
        "type": "function"
      },
      "clear_vehicle_logistic_slot": {
        "name": "clear_vehicle_logistic_slot",
        "type": "function",
        "args": {
          "slot_index": {
            "name": "slot_index",
            "type": "uint",
            "doc": "slot_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The slot to clear."
          }
        },
        "doc": "**Parameters**  \nslot_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The slot to clear.  \n\n**Note: ** This will silently fail if the vehicle does not use logistics."
      },
      "crafting_queue": {
        "name": "crafting_queue",
        "mode": "[R]",
        "doc": "Gets the current crafting queue items. Each CraftingQueueItem is a table:   \nindex :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The crafting queue index  \nrecipe :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): The recipe.  \ncount :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The count being crafted.",
        "type": "array of CraftingQueueItem"
      },
      "crafting_queue_progress": {
        "name": "crafting_queue_progress",
        "type": "double",
        "mode": "[R]",
        "doc": "The crafting queue progress [0-  \n0 when no recipe is being crafte"
      },
      "crafting_queue_size": {
        "name": "crafting_queue_size",
        "type": "uint",
        "mode": "[R]",
        "doc": "Size of the crafting queue."
      },
      "cursor_ghost": {
        "name": "cursor_ghost",
        "type": "ItemPrototypeSpecification",
        "mode": "[RW]",
        "doc": "The ghost prototype in the player's curso    \n\n**Note: ** When read, it will be a [LuaItemPrototype](http://lua-api.factorio.com/latest/LuaItemPrototype.html).  \n\n**Note: ** Items in the cursor stack will take priority over the cursor ghost."
      },
      "cursor_stack": {
        "name": "cursor_stack",
        "type": "LuaItemStack",
        "mode": "[R]",
        "doc": "The player's cursor stack, or ````\nnil````\nif the player controller is a spectator. Even though this property is marked as read-only, it returns a [LuaItemStack](http://lua-api.factorio.com/latest/LuaItemStack.html), meaning it can be manipulated like so:   \n\n**Example**  \n````\nplayer.cursor_stack.clear()````"
      },
      "disable_flashlight": {
        "name": "disable_flashlight",
        "doc": "Disable the flashlight.",
        "type": "function"
      },
      "driving": {
        "name": "driving",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "````\ntrue````\nif the player is in a vehicle. Writing to this attribute puts the player in or out of  \nvehicle."
      },
      "drop_item_distance": {
        "name": "drop_item_distance",
        "type": "uint",
        "mode": "[R]",
        "doc": "The item drop distance of this character or max uint when not a character or player connected to a characte"
      },
      "enable_flashlight": {
        "name": "enable_flashlight",
        "doc": "Enable the flashlight.",
        "type": "function"
      },
      "following_robots": {
        "name": "following_robots",
        "type": "array of LuaEntity",
        "mode": "[R]",
        "doc": "The current combat robots following the charact    \n\n**Note: ** When called on a [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html), it must be associated with a character(see [LuaPlayer::character](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character))."
      },
      "force": {
        "name": "force",
        "type": "ForceSpecification",
        "mode": "[RW]",
        "doc": "The force of this entity. Reading will always give a [LuaForce](http://lua-api.factorio.com/latest/LuaForce.html), but it is possible   \nassign either [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) or [LuaForce](http://lua-api.factorio.com/latest/LuaForce.html) to this attribute to change the forc"
      },
      "get_blueprint_entities": {
        "name": "get_blueprint_entities",
        "doc": "Returns the same type of data as [LuaItemStack::get_blueprint_entities](http://lua-api.factorio.com/latest/LuaItemStack.html#LuaItemStack.get_blueprint_entities), but works for the currently selected blueprin  \nregardless of it being in a blueprint book or picked from the blueprint library.",
        "type": "function",
        "returns": "array of blueprint entity"
      },
      "get_craftable_count": {
        "name": "get_craftable_count",
        "type": "function",
        "doc": "Gets the count of the given recipe that can be crafted    \n\n**Parameters**  \nrecipe :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) or [LuaRecipe](http://lua-api.factorio.com/latest/LuaRecipe.html): The recipe.  \n\n**Return value**  \nThe count that can be crafted.",
        "returns": "uint",
        "args": {
          "recipe": {
            "name": "recipe",
            "type": "string or LuaRecipe",
            "doc": "recipe :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) or [LuaRecipe](http://lua-api.factorio.com/latest/LuaRecipe.html): The recipe."
          }
        }
      },
      "get_inventory": {
        "name": "get_inventory",
        "type": "function",
        "doc": "Get an inventory belonging to this entity. This can be either the \"main\" inventory or some auxilia  \none, like the module slots or logistic trash slot    \n\n**Parameters**  \ninventory :: [defines.inventory](http://lua-api.factorio.com/latest/defines.html#defines.inventory)  \n\n**Return value**  \nor ````\nnil````\nif this entity doesn't have an inventory with the given index.  \n\n**Note: ** A given [defines.inventory](http://lua-api.factorio.com/latest/defines.html#defines.inventory) is only meaningful for the corresponding LuaObject type. EG: get_inventory(defines.inventory.character_main) is only meaningful if 'this' is a player character. You may get a value back but if the type of 'this' isn't the type referred to by the [defines.inventory](http://lua-api.factorio.com/latest/defines.html#defines.inventory) it's almost guaranteed to not be the inventory asked for.",
        "returns": "LuaInventory",
        "args": {
          "inventory": {
            "name": "inventory",
            "type": "defines.inventory",
            "doc": "inventory :: [defines.inventory](http://lua-api.factorio.com/latest/defines.html#defines.inventory)"
          }
        }
      },
      "get_item_count": {
        "name": "get_item_count",
        "type": "function",
        "doc": "Get the number of all or some items in this entity.   \n\n**Parameters**  \nitem :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): Prototype name of the item to count. If not specified, count all items.",
        "returns": "uint",
        "args": {
          "item": {
            "name": "item",
            "type": "string",
            "doc": "item :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): Prototype name of the item to count. If not specified, count all items."
          }
        }
      },
      "get_main_inventory": {
        "name": "get_main_inventory",
        "type": "function",
        "doc": "Gets the main inventory for this character or player if this is a character or player.   \n\n**Return value**  \nor ````\nnil````\nif this entity is not a character or player.",
        "returns": "LuaInventory"
      },
      "get_personal_logistic_slot": {
        "name": "get_personal_logistic_slot",
        "type": "function",
        "doc": "Sets the personal request and trash to the given value    \n\n**Parameters**  \nslot_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The slot to get.  \n\n**Note: ** This will silently return an empty value (.name will be nil) if personal logistics aren't researched yet.",
        "returns": "PersonalLogisticParameters",
        "args": {
          "slot_index": {
            "name": "slot_index",
            "type": "uint",
            "doc": "slot_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The slot to get."
          }
        }
      },
      "get_vehicle_logistic_slot": {
        "name": "get_vehicle_logistic_slot",
        "type": "function",
        "doc": "Sets the vehicle logistic request and trash to the given value    \n\n**Parameters**  \nslot_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The slot to get.  \n\n**Note: ** This will silently return an empty value (.name will be nil) if the vehicle does not use logistics.",
        "returns": "PersonalLogisticParameters",
        "args": {
          "slot_index": {
            "name": "slot_index",
            "type": "uint",
            "doc": "slot_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The slot to get."
          }
        }
      },
      "has_items_inside": {
        "name": "has_items_inside",
        "type": "function",
        "doc": "Does this entity have any item inside it?",
        "returns": "boolean"
      },
      "in_combat": {
        "name": "in_combat",
        "type": "boolean",
        "mode": "[R]",
        "doc": "If this character entity is in comba"
      },
      "insert": {
        "name": "insert",
        "type": "function",
        "doc": "Insert items into this entity. This works the same way as inserters or shift-clicking: the \"bes  \ninventory is chosen automatically.   \n\n**Parameters**  \nitems :: [ItemStackSpecification](http://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification): Items to insert.  \n\n**Return value**  \nNumber of items actually inserted.",
        "returns": "uint",
        "args": {
          "items": {
            "name": "items",
            "type": "ItemStackSpecification",
            "doc": "items :: [ItemStackSpecification](http://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification): Items to insert."
          }
        }
      },
      "is_cursor_blueprint": {
        "name": "is_cursor_blueprint",
        "type": "function",
        "doc": "Returns whether the player is holding a blueprint, it takes into account a blueprint as an item as well as bluepri  \nfrom the blueprint record from the blueprint librar  \nNote that the is_cursor_blueprint and get_cursor_blueprint_entities refer to the currently selected blueprint,   \nit returns blueprint related information also when holding a blueprint book with a blueprint being selected in it.",
        "returns": "boolean"
      },
      "is_flashlight_enabled": {
        "name": "is_flashlight_enabled",
        "doc": "Is the flashlight enabled.",
        "type": "function"
      },
      "is_player": {
        "name": "is_player",
        "type": "function",
        "doc": "When ````\ntrue````\ncontrol adapter is a LuaPlayer object, ````\nfalse````\nfor entities including characters with players",
        "returns": "boolean"
      },
      "item_pickup_distance": {
        "name": "item_pickup_distance",
        "type": "double",
        "mode": "[R]",
        "doc": "The item pickup distance of this character or max double when not a character or player connected to a characte"
      },
      "loot_pickup_distance": {
        "name": "loot_pickup_distance",
        "type": "double",
        "mode": "[R]",
        "doc": "The loot pickup distance of this character or max double when not a character or player connected to a characte"
      },
      "mine_entity": {
        "name": "mine_entity",
        "type": "function",
        "doc": "Mines the given entity as if this player (or character) mined i    \n\n**Parameters**  \nentity :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html): The entity to mine  \nforce :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): Forces mining the entity even if the items can't fit in the player.  \n\n**Return value**  \nIf the mining succeeded.",
        "returns": "boolean",
        "args": {
          "entity": {
            "name": "entity",
            "type": "LuaEntity",
            "doc": "entity :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html): The entity to mine"
          },
          "force": {
            "name": "force",
            "type": "boolean",
            "doc": "force :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): Forces mining the entity even if the items can't fit in the player."
          }
        }
      },
      "mine_tile": {
        "name": "mine_tile",
        "type": "function",
        "doc": "Mines the given tile as if this player (or character) mined i    \n\n**Parameters**  \ntile :: [LuaTile](http://lua-api.factorio.com/latest/LuaTile.html): The tile to mine.  \n\n**Return value**  \nIf the mining succeeded.",
        "returns": "boolean",
        "args": {
          "tile": {
            "name": "tile",
            "type": "LuaTile",
            "doc": "tile :: [LuaTile](http://lua-api.factorio.com/latest/LuaTile.html): The tile to mine."
          }
        }
      },
      "mining_state": {
        "name": "mining_state",
        "type": "table",
        "mode": "[RW]",
        "doc": "Current mining stat  \nIt is a table with two fields:   \nmining :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean): Whether the player is mining at all  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) (optional): What tiles the player is mining; only used when the player is mining tiles (holding a tile in the cursor).  \n\n**Note: ** When the player isn't mining tiles the player will mine what ever entity is currently selected. See [LuaControl::selected](http://lua-api.factorio.com/latest/LuaControl.html#LuaControl.selected) and [LuaControl::update_selected_entity](http://lua-api.factorio.com/latest/LuaControl.html#LuaControl.update_selected_entity)."
      },
      "open_technology_gui": {
        "name": "open_technology_gui",
        "doc": "Open the technology GUI and select a given technolog    \n\n**Parameters**  \ntechnology :: [TechnologySpecification](http://lua-api.factorio.com/latest/Concepts.html#TechnologySpecification) (optional): The technology to select after opening the GUI.",
        "type": "function",
        "args": {
          "technology": {
            "name": "technology",
            "type": "TechnologySpecification",
            "doc": "technology :: [TechnologySpecification](http://lua-api.factorio.com/latest/Concepts.html#TechnologySpecification) (optional): The technology to select after opening the GUI."
          }
        }
      },
      "opened": {
        "name": "opened",
        "type": "LuaEntity or LuaItemStack or LuaEquipment or LuaEquipmentGrid or LuaPlayer or LuaGuiElement or defines.gui_type",
        "mode": "[RW]",
        "doc": "The GUI target the player currently has open; ````\nnil````\nif non    \n\n**Note: ** Write supports any of the types. Read will return the entity, equipment, equipment-grid, player, element or nil."
      },
      "opened_gui_type": {
        "name": "opened_gui_type",
        "type": "defines.gui_type",
        "mode": "[R]",
        "doc": "Returns the [defines.gui_type](http://lua-api.factorio.com/latest/defines.html#defines.gui_type) or ````\nnil````\n."
      },
      "picking_state": {
        "name": "picking_state",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "Current item-picking stat"
      },
      "position": {
        "name": "position",
        "type": "Position",
        "mode": "[R]",
        "doc": "Current position of the entity."
      },
      "reach_distance": {
        "name": "reach_distance",
        "type": "uint",
        "mode": "[R]",
        "doc": "The reach distance of this character or max uint when not a character or player connected to a characte"
      },
      "remove_item": {
        "name": "remove_item",
        "type": "function",
        "doc": "Remove items from this entity.   \n\n**Parameters**  \nitems :: [ItemStackSpecification](http://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification): Items to remove.  \n\n**Return value**  \nNumber of items actually removed.",
        "returns": "uint",
        "args": {
          "items": {
            "name": "items",
            "type": "ItemStackSpecification",
            "doc": "items :: [ItemStackSpecification](http://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification): Items to remove."
          }
        }
      },
      "repair_state": {
        "name": "repair_state",
        "type": "table",
        "mode": "[RW]",
        "doc": "Current repair stat  \nIt is a table with two fields:   \nrepairing :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean): The current state  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): The position being repaired"
      },
      "resource_reach_distance": {
        "name": "resource_reach_distance",
        "type": "double",
        "mode": "[R]",
        "doc": "The resource reach distance of this character or max double when not a character or player connected to a characte"
      },
      "riding_state": {
        "name": "riding_state",
        "type": "RidingState",
        "mode": "[RW]",
        "doc": "Current riding state of this car or the vehicle this player is riding i"
      },
      "selected": {
        "name": "selected",
        "type": "LuaEntity",
        "mode": "[RW]",
        "doc": "The currently selected entity; ````\nnil````\nif none. Assigning an entity will select it if selectable otherwise clears selection."
      },
      "set_gui_arrow": {
        "name": "set_gui_arrow",
        "doc": "Create an arrow which points at this entity. This is used in the tutorial. For examples, see ````\ncontrol.lua````  \nin the campaign missions.   \n\n**Parameters**  \nTable with the following fields:   \ntype :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Where to point to. This field determines what other fields are mandator  \nMay be ````\n\"nowhere\"````\n, ````\n\"goal\"````\n, ````\n\"entity_info\"````\n, ````\n\"active_window\"````\n, ````\n\"entity\"````\n, ````\n\"position\"````  \n````\n\"crafting_queue\"````\n, or ````\n\"item_stack\"````\n.  \nAdditional ````\ntype````\n-specific parameters  \nentity  \nentity :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)  \nposition  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position)  \ncrafting_queue  \ncrafting_queueindex :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \nitem_stack  \ninventory_index :: [defines.inventory](http://lua-api.factorio.com/latest/defines.html#defines.inventory)  \nitem_stack_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \nsource :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): May be either ````\n\"player\"````\nor ````\n\"target\"````\n.",
        "type": "function",
        "args": {
          "type": {
            "name": "type",
            "type": "string",
            "doc": "Table with the following fields:   \ntype :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Where to point to. This field determines what other fields are mandator  \nMay be ````\n\"nowhere\"````\n, ````\n\"goal\"````\n, ````\n\"entity_info\"````\n, ````\n\"active_window\"````\n, ````\n\"entity\"````\n, ````\n\"position\"````  \n````\n\"crafting_queue\"````\n, or ````\n\"item_stack\"````\n.  \nAdditional ````\ntype````\n-specific parameters  \nentity  \nentity :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)  \nposition  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position)  \ncrafting_queue  \ncrafting_queueindex :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \nitem_stack  \ninventory_index :: [defines.inventory](http://lua-api.factorio.com/latest/defines.html#defines.inventory)  \nitem_stack_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \nsource :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): May be either ````\n\"player\"````\nor ````\n\"target\"````\n."
          }
        }
      },
      "set_personal_logistic_slot": {
        "name": "set_personal_logistic_slot",
        "type": "function",
        "doc": "Sets the personal request and trash to the given value    \n\n**Parameters**  \nslot_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The slot to set/  \nvalue :: [PersonalLogistic\n\n**Parameters**  \n](http://lua-api.factorio.com/latest/Concepts.html#PersonalLogistic\n\n**Parameters**  \n)  \n\n**Return value**  \nIf the slot was set.  \n\n**Note: ** This will silently fail if personal logistics are not researched.",
        "returns": "boolean",
        "args": {
          "slot_index": {
            "name": "slot_index",
            "type": "uint",
            "doc": "slot_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The slot to set/"
          },
          "value": {
            "name": "value",
            "type": "PersonalLogisticParameters",
            "doc": "value :: [PersonalLogistic\n\n**Parameters**  \n](http://lua-api.factorio.com/latest/Concepts.html#PersonalLogistic\n\n**Parameters**  \n)"
          }
        }
      },
      "set_vehicle_logistic_slot": {
        "name": "set_vehicle_logistic_slot",
        "type": "function",
        "doc": "Sets the vehicle logistic request and trash to the given value    \n\n**Parameters**  \nslot_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The slot to set/  \nvalue :: [PersonalLogistic\n\n**Parameters**  \n](http://lua-api.factorio.com/latest/Concepts.html#PersonalLogistic\n\n**Parameters**  \n)  \n\n**Return value**  \nIf the slot was set.  \n\n**Note: ** This will silently fail if the spider does not use logistics.",
        "returns": "boolean",
        "args": {
          "slot_index": {
            "name": "slot_index",
            "type": "uint",
            "doc": "slot_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The slot to set/"
          },
          "value": {
            "name": "value",
            "type": "PersonalLogisticParameters",
            "doc": "value :: [PersonalLogistic\n\n**Parameters**  \n](http://lua-api.factorio.com/latest/Concepts.html#PersonalLogistic\n\n**Parameters**  \n)"
          }
        }
      },
      "shooting_state": {
        "name": "shooting_state",
        "type": "table",
        "mode": "[RW]",
        "doc": "Current shooting stat  \nIt is a table with two fields:   \nstate :: [defines.shooting](http://lua-api.factorio.com/latest/defines.html#defines.shooting): The current state  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): The position being shot at"
      },
      "surface": {
        "name": "surface",
        "type": "LuaSurface",
        "mode": "[R]",
        "doc": "The surface this entity is currently on."
      },
      "teleport": {
        "name": "teleport",
        "type": "function",
        "doc": "Teleport the entity to a given position, possibly on another surface    \n\n**Parameters**  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): Where to teleport to.  \nsurface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification) (optional): Surface to teleport to. If not given, will telepo  \nto the entity's current surface. Only players, cars, and spidertrons can be teleported cross-surface.  \n\n**Return value**  \n````\ntrue````\nwhen the entity was successfully teleported.  \n\n**Note: ** Some entities may not be teleported. For instance, transport bel  \nwon't allow teleportation and this method will always return ````\nfalse````\nwhen used on any such entity.  \n\n**Note: ** You can also pass 1 or 2 numbers as the parameters and they will be used as relative teleport coordinat  \n````\n'teleport(0, 1)'````\nto move the entity 1 tile positive   \n````\n'teleport(4)'````\nto move the entity 4 tiles to the positive x.",
        "returns": "boolean",
        "args": {
          "position": {
            "name": "position",
            "type": "Position",
            "doc": "position :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): Where to teleport to."
          },
          "surface": {
            "name": "surface",
            "type": "SurfaceSpecification",
            "doc": "surface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification) (optional): Surface to teleport to. If not given, will telepo  \nto the entity's current surface. Only players, cars, and spidertrons can be teleported cross-surface."
          }
        }
      },
      "update_selected_entity": {
        "name": "update_selected_entity",
        "doc": "Select an entity, as if by hovering the mouse above it.   \n\n**Parameters**  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): Position of the entity to select",
        "type": "function",
        "args": {
          "position": {
            "name": "position",
            "type": "Position",
            "doc": "position :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): Position of the entity to select"
          }
        }
      },
      "vehicle": {
        "name": "vehicle",
        "type": "LuaEntity",
        "mode": "[R]",
        "doc": "The vehicle the player is currently sitting in; ````\nnil````\nif none."
      },
      "vehicle_logistic_requests_enabled": {
        "name": "vehicle_logistic_requests_enabled",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "If personal logistic requests are enabled for this vehicle (spidertron)."
      },
      "walking_state": {
        "name": "walking_state",
        "type": "table",
        "mode": "[RW]",
        "doc": "Current walking stat  \nIt is a table with two fields:   \nwalking :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean): If ````\nfalse````\n, the player is currently not walking; otherwise it's going somewhere  \ndirection :: [defines.direction](http://lua-api.factorio.com/latest/defines.html#defines.direction): Direction where the player is walking  \n\n**Example**  \nMake the player go north. Note that a one-shot action like this will only make the player walk for one tic    \n````\ngame.player.walking_state = {walking = true, direction = defines.direction.north}````"
      }
    },
    "doc": "Get an inventory belonging to this entity. This can be either the \"main\" inventory or some auxiliary\n one, like the module slots or logistic trash slots."
  },
  "LuaControlBehavior": {
    "name": "LuaControlBehavior",
    "type": "LuaControlBehavior",
    "inherits": [],
    "properties": {
      "entity": {
        "name": "entity",
        "type": "LuaEntity",
        "mode": "[R]",
        "doc": "The entity this control behavior belongs to."
      },
      "get_circuit_network": {
        "name": "get_circuit_network",
        "type": "function",
        "returns": "LuaCircuitNetwork",
        "args": {
          "circuit_connector": {
            "name": "circuit_connector",
            "type": "defines.circuit_connector_id",
            "doc": "circuit_connector :: [defines.circuit_connector_id](http://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional): The connector to get circuit network fo  \nMust be specified for entities with more than one circuit network connector."
          },
          "wire": {
            "name": "wire",
            "type": "defines.wire_type",
            "doc": "wire :: [defines.wire_type](http://lua-api.factorio.com/latest/defines.html#defines.wire_type): Wire color of the network connected to this entity."
          }
        },
        "doc": "**Parameters**  \nwire :: [defines.wire_type](http://lua-api.factorio.com/latest/defines.html#defines.wire_type): Wire color of the network connected to this entity.  \ncircuit_connector :: [defines.circuit_connector_id](http://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional): The connector to get circuit network fo  \nMust be specified for entities with more than one circuit network connector.  \n\n**Return value**  \nThe circuit network or nil."
      },
      "type": {
        "name": "type",
        "type": "defines.control_behavior.type",
        "mode": "[R]",
        "doc": "The concrete type of this control behavior."
      }
    },
    "doc": "The control behavior for an entity. Inserters have logistic network and circuit network behavior logic, lamps have circuit logic and so on. This is an abstract base class that concrete control behaviors inherit."
  },
  "LuaCustomChartTag": {
    "name": "LuaCustomChartTag",
    "type": "LuaCustomChartTag",
    "inherits": [],
    "properties": {
      "destroy": {
        "name": "destroy",
        "doc": "Destroys this tag.",
        "type": "function"
      },
      "force": {
        "name": "force",
        "type": "LuaForce",
        "mode": "[R]",
        "doc": "The force this tag belongs t"
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "icon": {
        "name": "icon",
        "type": "SignalID",
        "mode": "[RW]"
      },
      "last_user": {
        "name": "last_user",
        "type": "LuaPlayer",
        "mode": "[RW]",
        "doc": "The player who last edited this ta"
      },
      "object_name": {
        "name": "object_name",
        "type": "string",
        "mode": "[R]",
        "doc": "The class name of this object."
      },
      "position": {
        "name": "position",
        "type": "Position",
        "mode": "[R]",
        "doc": "The position of this ta"
      },
      "surface": {
        "name": "surface",
        "type": "LuaSurface",
        "mode": "[R]",
        "doc": "The surface this tag belongs t"
      },
      "tag_number": {
        "name": "tag_number",
        "type": "uint",
        "mode": "[R]",
        "doc": "The unique ID for this tag on this forc"
      },
      "text": {
        "name": "text",
        "type": "string",
        "mode": "[RW]"
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": "Destroys this tag."
  },
  "LuaCustomInputPrototype": {
    "name": "LuaCustomInputPrototype",
    "type": "LuaCustomInputPrototype",
    "inherits": [],
    "properties": {
      "action": {
        "name": "action",
        "type": "string",
        "mode": "[R]",
        "doc": "The action that happens when this custom input is triggere"
      },
      "alternative_key_sequence": {
        "name": "alternative_key_sequence",
        "type": "string",
        "mode": "[R]",
        "doc": "The default alternative key sequence for this custom input. ````\nnil````\nwhen not define"
      },
      "consuming": {
        "name": "consuming",
        "type": "string",
        "mode": "[R]",
        "doc": "The consuming type: ````\n\"none\"````\nor ````\n\"game-only\"````"
      },
      "enabled": {
        "name": "enabled",
        "type": "boolean",
        "mode": "[R]",
        "doc": "If this custom input is enabled. Disabled custom inputs exist but are not used by the gam"
      },
      "enabled_while_in_cutscene": {
        "name": "enabled_while_in_cutscene",
        "type": "boolean",
        "mode": "[R]",
        "doc": "If this custom input is enabled while using the cutscene controlle"
      },
      "enabled_while_spectating": {
        "name": "enabled_while_spectating",
        "type": "boolean",
        "mode": "[R]",
        "doc": "If this custom input is enabled while using the spectator controlle"
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "include_selected_prototype": {
        "name": "include_selected_prototype",
        "type": "boolean",
        "mode": "[R]",
        "doc": "If this custom input will include the selected prototype (if any) when triggere"
      },
      "item_to_spawn": {
        "name": "item_to_spawn",
        "type": "LuaItemPrototype",
        "mode": "[R]",
        "doc": "The item that gets spawned when this custom input is fired or ````\nnil````"
      },
      "key_sequence": {
        "name": "key_sequence",
        "type": "string",
        "mode": "[R]",
        "doc": "The default key sequence for this custom inpu"
      },
      "linked_game_control": {
        "name": "linked_game_control",
        "type": "string",
        "mode": "[R]",
        "doc": "The linked game control name or ````\nnil````"
      },
      "localised_description": {
        "name": "localised_description",
        "type": "LocalisedString",
        "mode": "[R]"
      },
      "localised_name": {
        "name": "localised_name",
        "type": "LocalisedString",
        "mode": "[R]"
      },
      "name": {
        "name": "name",
        "type": "string",
        "mode": "[R]",
        "doc": "Name of this prototype."
      },
      "object_name": {
        "name": "object_name",
        "type": "string",
        "mode": "[R]",
        "doc": "The class name of this object."
      },
      "order": {
        "name": "order",
        "type": "string",
        "mode": "[R]",
        "doc": "Order string of this prototype."
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": ""
  },
  "LuaCustomTable": {
    "name": "LuaCustomTable",
    "type": "LuaCustomTable",
    "inherits": [],
    "properties": {
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "object_name": {
        "name": "object_name",
        "type": "string",
        "mode": "[R]",
        "doc": "The class name of this object."
      },
      "operator []": {
        "name": "operator []",
        "mode": "[RW]",
        "doc": "Access an element of this custom table."
      },
      "operator #": {
        "name": "operator #",
        "type": "uint",
        "mode": "[R]",
        "doc": "Number of elements in this table."
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": "Access an element of this custom table."
  },
  "LuaDamagePrototype": {
    "name": "LuaDamagePrototype",
    "type": "LuaDamagePrototype",
    "inherits": [],
    "properties": {
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "hidden": {
        "name": "hidden",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Whether this damage type is hidden from entity tooltip"
      },
      "localised_description": {
        "name": "localised_description",
        "type": "LocalisedString",
        "mode": "[R]"
      },
      "localised_name": {
        "name": "localised_name",
        "type": "LocalisedString",
        "mode": "[R]"
      },
      "name": {
        "name": "name",
        "type": "string",
        "mode": "[R]",
        "doc": "Name of this prototype."
      },
      "object_name": {
        "name": "object_name",
        "type": "string",
        "mode": "[R]",
        "doc": "The class name of this object."
      },
      "order": {
        "name": "order",
        "type": "string",
        "mode": "[R]",
        "doc": "Order string of this prototype."
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": ""
  },
  "LuaDeciderCombinatorControlBehavior": {
    "name": "LuaDeciderCombinatorControlBehavior",
    "type": "LuaDeciderCombinatorControlBehavior",
    "inherits": [
      "Inherited from LuaCombinatorControlBehavior: get_signal_last_tick, signals_last_tick",
      "Inherited from LuaControlBehavior: get_circuit_network, type, entity"
    ],
    "properties": {
      "entity": {
        "name": "entity",
        "type": "LuaEntity",
        "mode": "[R]",
        "doc": "The entity this control behavior belongs to."
      },
      "get_circuit_network": {
        "name": "get_circuit_network",
        "type": "function",
        "returns": "LuaCircuitNetwork",
        "args": {
          "circuit_connector": {
            "name": "circuit_connector",
            "type": "defines.circuit_connector_id",
            "doc": "circuit_connector :: [defines.circuit_connector_id](http://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional): The connector to get circuit network fo  \nMust be specified for entities with more than one circuit network connector."
          },
          "wire": {
            "name": "wire",
            "type": "defines.wire_type",
            "doc": "wire :: [defines.wire_type](http://lua-api.factorio.com/latest/defines.html#defines.wire_type): Wire color of the network connected to this entity."
          }
        },
        "doc": "**Parameters**  \nwire :: [defines.wire_type](http://lua-api.factorio.com/latest/defines.html#defines.wire_type): Wire color of the network connected to this entity.  \ncircuit_connector :: [defines.circuit_connector_id](http://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional): The connector to get circuit network fo  \nMust be specified for entities with more than one circuit network connector.  \n\n**Return value**  \nThe circuit network or nil."
      },
      "get_signal_last_tick": {
        "name": "get_signal_last_tick",
        "type": "function",
        "doc": "Gets the value of a specific signal sent by this combinator behavior last tick or nil if the signal didn't exis    \n\n**Parameters**  \nsignal :: [SignalID](http://lua-api.factorio.com/latest/Concepts.html#SignalID): The signal to get  \n\n**Return value**  \nThe value or ````\nnil````\nif none.",
        "returns": "int",
        "args": {
          "signal": {
            "name": "signal",
            "type": "SignalID",
            "doc": "signal :: [SignalID](http://lua-api.factorio.com/latest/Concepts.html#SignalID): The signal to get"
          }
        }
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "object_name": {
        "name": "object_name",
        "type": "string",
        "mode": "[R]",
        "doc": "The class name of this object."
      },
      "parameters": {
        "name": "parameters",
        "type": "DeciderCombinatorParameters",
        "mode": "[RW]",
        "doc": "The decider combinator parameters   \n\n**Note: ** Setting to ````\nnil````\nclears the parameters."
      },
      "signals_last_tick": {
        "name": "signals_last_tick",
        "type": "array of Signal",
        "mode": "[R]",
        "doc": "The circuit network signals sent by this combinator last tick."
      },
      "type": {
        "name": "type",
        "type": "defines.control_behavior.type",
        "mode": "[R]",
        "doc": "The concrete type of this control behavior."
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": "Control behavior for decider combinators."
  },
  "LuaDecorativePrototype": {
    "name": "LuaDecorativePrototype",
    "type": "LuaDecorativePrototype",
    "inherits": [],
    "properties": {
      "autoplace_specification": {
        "name": "autoplace_specification",
        "type": "AutoplaceSpecification",
        "mode": "[R]",
        "doc": "Autoplace specification for this decorative prototype. ````\nnil````\nif non"
      },
      "collision_box": {
        "name": "collision_box",
        "type": "BoundingBox",
        "mode": "[R]",
        "doc": "The bounding box used for collision checking."
      },
      "collision_mask": {
        "name": "collision_mask",
        "type": "CollisionMask",
        "mode": "[R]",
        "doc": "The collision masks this decorative uses"
      },
      "collision_mask_with_flags": {
        "name": "collision_mask_with_flags",
        "type": "CollisionMaskWithFlags",
        "mode": "[R]"
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "localised_description": {
        "name": "localised_description",
        "type": "LocalisedString",
        "mode": "[R]"
      },
      "localised_name": {
        "name": "localised_name",
        "type": "LocalisedString",
        "mode": "[R]"
      },
      "name": {
        "name": "name",
        "type": "string",
        "mode": "[R]",
        "doc": "Name of this prototype."
      },
      "object_name": {
        "name": "object_name",
        "type": "string",
        "mode": "[R]",
        "doc": "The class name of this object."
      },
      "order": {
        "name": "order",
        "type": "string",
        "mode": "[R]",
        "doc": "Order string of this prototype."
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": ""
  },
  "LuaElectricEnergySourcePrototype": {
    "name": "LuaElectricEnergySourcePrototype",
    "type": "LuaElectricEnergySourcePrototype",
    "inherits": [],
    "properties": {
      "buffer_capacity": {
        "name": "buffer_capacity",
        "type": "double",
        "mode": "[R]"
      },
      "drain": {
        "name": "drain",
        "type": "double",
        "mode": "[R]"
      },
      "emissions": {
        "name": "emissions",
        "type": "double",
        "mode": "[R]"
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "input_flow_limit": {
        "name": "input_flow_limit",
        "type": "double",
        "mode": "[R]"
      },
      "object_name": {
        "name": "object_name",
        "type": "string",
        "mode": "[R]",
        "doc": "The class name of this object."
      },
      "output_flow_limit": {
        "name": "output_flow_limit",
        "type": "double",
        "mode": "[R]"
      },
      "render_no_network_icon": {
        "name": "render_no_network_icon",
        "type": "boolean",
        "mode": "[R]"
      },
      "render_no_power_icon": {
        "name": "render_no_power_icon",
        "type": "boolean",
        "mode": "[R]"
      },
      "usage_priority": {
        "name": "usage_priority",
        "type": "string",
        "mode": "[R]"
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": ""
  },
  "LuaEntity": {
    "name": "LuaEntity",
    "type": "LuaEntity",
    "inherits": [
      "Inherited from LuaControl: get_inventory, get_main_inventory, can_insert, insert, set_gui_arrow, clear_gui_arrow, get_item_count, has_items_inside, can_reach_entity, clear_items_inside, remove_item, teleport, update_selected_entity, clear_selected_entity, disable_flashlight, enable_flashlight, is_flashlight_enabled, get_craftable_count, begin_crafting, cancel_crafting, mine_entity, mine_tile, is_player, open_technology_gui, set_personal_logistic_slot, set_vehicle_logistic_slot, get_personal_logistic_slot, get_vehicle_logistic_slot, clear_personal_logistic_slot, clear_vehicle_logistic_slot, is_cursor_blueprint, get_blueprint_entities, surface, position, vehicle, force, selected, opened, crafting_queue_size, crafting_queue_progress, walking_state, riding_state, mining_state, shooting_state, picking_state, repair_state, cursor_stack, cursor_ghost, driving, crafting_queue, following_robots, cheat_mode, character_crafting_speed_modifier, character_mining_speed_modifier, character_additional_mining_categories, character_running_speed_modifier, character_build_distance_bonus, character_item_drop_distance_bonus, character_reach_distance_bonus, character_resource_reach_distance_bonus, character_item_pickup_distance_bonus, character_loot_pickup_distance_bonus, character_inventory_slots_bonus, character_trash_slot_count_bonus, character_maximum_following_robot_count_bonus, character_health_bonus, character_personal_logistic_requests_enabled, vehicle_logistic_requests_enabled, opened_gui_type, build_distance, drop_item_distance, reach_distance, item_pickup_distance, loot_pickup_distance, resource_reach_distance, in_combat, character_running_speed, character_mining_progress"
    ],
    "properties": {
      "begin_crafting": {
        "name": "begin_crafting",
        "type": "function",
        "doc": "Begins crafting the given count of the given recip    \n\n**Parameters**  \ncount :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The count to craft.  \nrecipe :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) or [LuaRecipe](http://lua-api.factorio.com/latest/LuaRecipe.html): The recipe to craft.  \nsilent :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If false and the recipe can't be crafted the requested number of times printing the failure is skipped.  \n\n**Return value**  \nThe count that was actually started crafting.",
        "returns": "uint",
        "args": {
          "count": {
            "name": "count",
            "type": "uint",
            "doc": "count :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The count to craft.  \nrecipe :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) or [LuaRecipe](http://lua-api.factorio.com/latest/LuaRecipe.html): The recipe to craft.  \nsilent :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If false and the recipe can't be crafted the requested number of times printing the failure is skipped."
          }
        }
      },
      "build_distance": {
        "name": "build_distance",
        "type": "uint",
        "mode": "[R]",
        "doc": "The build distance of this character or max uint when not a character or player connected to a characte"
      },
      "can_insert": {
        "name": "can_insert",
        "type": "function",
        "doc": "Can at least some items be inserted?   \n\n**Parameters**  \nitems :: [ItemStackSpecification](http://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification): Items that would be inserted.  \n\n**Return value**  \n````\ntrue````\nif at least a part of the given items could be inserted into this inventory.",
        "returns": "boolean",
        "args": {
          "items": {
            "name": "items",
            "type": "ItemStackSpecification",
            "doc": "items :: [ItemStackSpecification](http://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification): Items that would be inserted."
          }
        }
      },
      "can_reach_entity": {
        "name": "can_reach_entity",
        "type": "function",
        "doc": "Can a given entity be opened or accessed?   \n\n**Parameters**  \nentity :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)",
        "returns": "boolean",
        "args": {
          "entity": {
            "name": "entity",
            "type": "LuaEntity",
            "doc": "entity :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)"
          }
        }
      },
      "cancel_crafting": {
        "name": "cancel_crafting",
        "doc": "Cancels crafting the given count of the given crafting queue index   \n\n**Parameters**  \noptions: :   \nindex :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The crafting queue index.  \ncount :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The count to cancel crafting.",
        "type": "function",
        "args": {
          "options": {
            "name": "options",
            "type": "uint",
            "doc": "options: :   \nindex :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The crafting queue index.  \ncount :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The count to cancel crafting."
          }
        }
      },
      "character_additional_mining_categories": {
        "name": "character_additional_mining_categories",
        "type": "array of string",
        "mode": "[RW]",
        "doc": "**Note: ** When called on a [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html), it must be associated with a character (see [LuaPlayer::character](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character))."
      },
      "character_build_distance_bonus": {
        "name": "character_build_distance_bonus",
        "type": "uint",
        "mode": "[RW]",
        "doc": "**Note: ** When called on a [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html), it must be associated with a character (see [LuaPlayer::character](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character))."
      },
      "character_crafting_speed_modifier": {
        "name": "character_crafting_speed_modifier",
        "type": "double",
        "mode": "[RW]",
        "doc": "**Note: ** When called on a [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html), it must be associated with a character (see [LuaPlayer::character](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character))."
      },
      "character_health_bonus": {
        "name": "character_health_bonus",
        "type": "float",
        "mode": "[RW]",
        "doc": "**Note: ** When called on a [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html), it must be associated with a character (see [LuaPlayer::character](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character))."
      },
      "character_inventory_slots_bonus": {
        "name": "character_inventory_slots_bonus",
        "type": "uint",
        "mode": "[RW]",
        "doc": "**Note: ** When called on a [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html), it must be associated with a character (see [LuaPlayer::character](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character))."
      },
      "character_item_drop_distance_bonus": {
        "name": "character_item_drop_distance_bonus",
        "type": "uint",
        "mode": "[RW]",
        "doc": "**Note: ** When called on a [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html), it must be associated with a character (see [LuaPlayer::character](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character))."
      },
      "character_item_pickup_distance_bonus": {
        "name": "character_item_pickup_distance_bonus",
        "type": "uint",
        "mode": "[RW]",
        "doc": "**Note: ** When called on a [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html), it must be associated with a character (see [LuaPlayer::character](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character))."
      },
      "character_loot_pickup_distance_bonus": {
        "name": "character_loot_pickup_distance_bonus",
        "type": "uint",
        "mode": "[RW]",
        "doc": "**Note: ** When called on a [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html), it must be associated with a character (see [LuaPlayer::character](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character))."
      },
      "character_maximum_following_robot_count_bonus": {
        "name": "character_maximum_following_robot_count_bonus",
        "type": "uint",
        "mode": "[RW]",
        "doc": "**Note: ** When called on a [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html), it must be associated with a character (see [LuaPlayer::character](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character))."
      },
      "character_mining_progress": {
        "name": "character_mining_progress",
        "type": "double",
        "mode": "[R]",
        "doc": "Gets the current mining progress between 0 and 1 of this character, or 0 if they aren't minin"
      },
      "character_mining_speed_modifier": {
        "name": "character_mining_speed_modifier",
        "type": "double",
        "mode": "[RW]",
        "doc": "**Note: ** When called on a [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html), it must be associated with a character (see [LuaPlayer::character](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character))."
      },
      "character_personal_logistic_requests_enabled": {
        "name": "character_personal_logistic_requests_enabled",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "If personal logistic requests are enabled for this character or players character."
      },
      "character_reach_distance_bonus": {
        "name": "character_reach_distance_bonus",
        "type": "uint",
        "mode": "[RW]",
        "doc": "**Note: ** When called on a [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html), it must be associated with a character (see [LuaPlayer::character](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character))."
      },
      "character_resource_reach_distance_bonus": {
        "name": "character_resource_reach_distance_bonus",
        "type": "uint",
        "mode": "[RW]",
        "doc": "**Note: ** When called on a [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html), it must be associated with a character (see [LuaPlayer::character](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character))."
      },
      "character_running_speed": {
        "name": "character_running_speed",
        "type": "double",
        "mode": "[R]",
        "doc": "Gets the current movement speed of this character, including effects from exoskeletons, tiles, stickers and shootin"
      },
      "character_running_speed_modifier": {
        "name": "character_running_speed_modifier",
        "type": "double",
        "mode": "[RW]",
        "doc": "**Note: ** When called on a [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html), it must be associated with a character (see [LuaPlayer::character](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character))."
      },
      "character_trash_slot_count_bonus": {
        "name": "character_trash_slot_count_bonus",
        "type": "uint",
        "mode": "[RW]",
        "doc": "**Note: ** When called on a [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html), it must be associated with a character (see [LuaPlayer::character](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character))."
      },
      "cheat_mode": {
        "name": "cheat_mode",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "When ````\ntrue````\nhand crafting is free and instant"
      },
      "clear_gui_arrow": {
        "name": "clear_gui_arrow",
        "doc": "Removes the arrow created by ````\nset_gui_arrow````\n.",
        "type": "function"
      },
      "clear_items_inside": {
        "name": "clear_items_inside",
        "doc": "Remove all items from this entity.",
        "type": "function"
      },
      "clear_personal_logistic_slot": {
        "name": "clear_personal_logistic_slot",
        "type": "function",
        "args": {
          "slot_index": {
            "name": "slot_index",
            "type": "uint",
            "doc": "slot_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The slot to clear."
          }
        },
        "doc": "**Parameters**  \nslot_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The slot to clear.  \n\n**Note: ** This will silently fail if personal logistics are not researched."
      },
      "clear_selected_entity": {
        "name": "clear_selected_entity",
        "doc": "Unselect any selected entity.",
        "type": "function"
      },
      "clear_vehicle_logistic_slot": {
        "name": "clear_vehicle_logistic_slot",
        "type": "function",
        "args": {
          "slot_index": {
            "name": "slot_index",
            "type": "uint",
            "doc": "slot_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The slot to clear."
          }
        },
        "doc": "**Parameters**  \nslot_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The slot to clear.  \n\n**Note: ** This will silently fail if the vehicle does not use logistics."
      },
      "crafting_queue": {
        "name": "crafting_queue",
        "mode": "[R]",
        "doc": "Gets the current crafting queue items. Each CraftingQueueItem is a table:   \nindex :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The crafting queue index  \nrecipe :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): The recipe.  \ncount :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The count being crafted.",
        "type": "array of CraftingQueueItem"
      },
      "crafting_queue_progress": {
        "name": "crafting_queue_progress",
        "type": "double",
        "mode": "[R]",
        "doc": "The crafting queue progress [0-  \n0 when no recipe is being crafte"
      },
      "crafting_queue_size": {
        "name": "crafting_queue_size",
        "type": "uint",
        "mode": "[R]",
        "doc": "Size of the crafting queue."
      },
      "cursor_ghost": {
        "name": "cursor_ghost",
        "type": "ItemPrototypeSpecification",
        "mode": "[RW]",
        "doc": "The ghost prototype in the player's curso    \n\n**Note: ** When read, it will be a [LuaItemPrototype](http://lua-api.factorio.com/latest/LuaItemPrototype.html).  \n\n**Note: ** Items in the cursor stack will take priority over the cursor ghost."
      },
      "cursor_stack": {
        "name": "cursor_stack",
        "type": "LuaItemStack",
        "mode": "[R]",
        "doc": "The player's cursor stack, or ````\nnil````\nif the player controller is a spectator. Even though this property is marked as read-only, it returns a [LuaItemStack](http://lua-api.factorio.com/latest/LuaItemStack.html), meaning it can be manipulated like so:   \n\n**Example**  \n````\nplayer.cursor_stack.clear()````"
      },
      "disable_flashlight": {
        "name": "disable_flashlight",
        "doc": "Disable the flashlight.",
        "type": "function"
      },
      "driving": {
        "name": "driving",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "````\ntrue````\nif the player is in a vehicle. Writing to this attribute puts the player in or out of  \nvehicle."
      },
      "drop_item_distance": {
        "name": "drop_item_distance",
        "type": "uint",
        "mode": "[R]",
        "doc": "The item drop distance of this character or max uint when not a character or player connected to a characte"
      },
      "enable_flashlight": {
        "name": "enable_flashlight",
        "doc": "Enable the flashlight.",
        "type": "function"
      },
      "following_robots": {
        "name": "following_robots",
        "type": "array of LuaEntity",
        "mode": "[R]",
        "doc": "The current combat robots following the charact    \n\n**Note: ** When called on a [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html), it must be associated with a character(see [LuaPlayer::character](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character))."
      },
      "force": {
        "name": "force",
        "type": "ForceSpecification",
        "mode": "[RW]",
        "doc": "The force of this entity. Reading will always give a [LuaForce](http://lua-api.factorio.com/latest/LuaForce.html), but it is possible   \nassign either [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) or [LuaForce](http://lua-api.factorio.com/latest/LuaForce.html) to this attribute to change the forc"
      },
      "get_blueprint_entities": {
        "name": "get_blueprint_entities",
        "doc": "Returns the same type of data as [LuaItemStack::get_blueprint_entities](http://lua-api.factorio.com/latest/LuaItemStack.html#LuaItemStack.get_blueprint_entities), but works for the currently selected blueprin  \nregardless of it being in a blueprint book or picked from the blueprint library.",
        "type": "function",
        "returns": "array of blueprint entity"
      },
      "get_craftable_count": {
        "name": "get_craftable_count",
        "type": "function",
        "doc": "Gets the count of the given recipe that can be crafted    \n\n**Parameters**  \nrecipe :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) or [LuaRecipe](http://lua-api.factorio.com/latest/LuaRecipe.html): The recipe.  \n\n**Return value**  \nThe count that can be crafted.",
        "returns": "uint",
        "args": {
          "recipe": {
            "name": "recipe",
            "type": "string or LuaRecipe",
            "doc": "recipe :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) or [LuaRecipe](http://lua-api.factorio.com/latest/LuaRecipe.html): The recipe."
          }
        }
      },
      "get_inventory": {
        "name": "get_inventory",
        "type": "function",
        "doc": "Get an inventory belonging to this entity. This can be either the \"main\" inventory or some auxilia  \none, like the module slots or logistic trash slot    \n\n**Parameters**  \ninventory :: [defines.inventory](http://lua-api.factorio.com/latest/defines.html#defines.inventory)  \n\n**Return value**  \nor ````\nnil````\nif this entity doesn't have an inventory with the given index.  \n\n**Note: ** A given [defines.inventory](http://lua-api.factorio.com/latest/defines.html#defines.inventory) is only meaningful for the corresponding LuaObject type. EG: get_inventory(defines.inventory.character_main) is only meaningful if 'this' is a player character. You may get a value back but if the type of 'this' isn't the type referred to by the [defines.inventory](http://lua-api.factorio.com/latest/defines.html#defines.inventory) it's almost guaranteed to not be the inventory asked for.",
        "returns": "LuaInventory",
        "args": {
          "inventory": {
            "name": "inventory",
            "type": "defines.inventory",
            "doc": "inventory :: [defines.inventory](http://lua-api.factorio.com/latest/defines.html#defines.inventory)"
          }
        }
      },
      "get_item_count": {
        "name": "get_item_count",
        "type": "function",
        "doc": "Get the number of all or some items in this entity.   \n\n**Parameters**  \nitem :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): Prototype name of the item to count. If not specified, count all items.",
        "returns": "uint",
        "args": {
          "item": {
            "name": "item",
            "type": "string",
            "doc": "item :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): Prototype name of the item to count. If not specified, count all items."
          }
        }
      },
      "get_main_inventory": {
        "name": "get_main_inventory",
        "type": "function",
        "doc": "Gets the main inventory for this character or player if this is a character or player.   \n\n**Return value**  \nor ````\nnil````\nif this entity is not a character or player.",
        "returns": "LuaInventory"
      },
      "get_personal_logistic_slot": {
        "name": "get_personal_logistic_slot",
        "type": "function",
        "doc": "Sets the personal request and trash to the given value    \n\n**Parameters**  \nslot_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The slot to get.  \n\n**Note: ** This will silently return an empty value (.name will be nil) if personal logistics aren't researched yet.",
        "returns": "PersonalLogisticParameters",
        "args": {
          "slot_index": {
            "name": "slot_index",
            "type": "uint",
            "doc": "slot_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The slot to get."
          }
        }
      },
      "get_vehicle_logistic_slot": {
        "name": "get_vehicle_logistic_slot",
        "type": "function",
        "doc": "Sets the vehicle logistic request and trash to the given value    \n\n**Parameters**  \nslot_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The slot to get.  \n\n**Note: ** This will silently return an empty value (.name will be nil) if the vehicle does not use logistics.",
        "returns": "PersonalLogisticParameters",
        "args": {
          "slot_index": {
            "name": "slot_index",
            "type": "uint",
            "doc": "slot_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The slot to get."
          }
        }
      },
      "has_items_inside": {
        "name": "has_items_inside",
        "type": "function",
        "doc": "Does this entity have any item inside it?",
        "returns": "boolean"
      },
      "in_combat": {
        "name": "in_combat",
        "type": "boolean",
        "mode": "[R]",
        "doc": "If this character entity is in comba"
      },
      "insert": {
        "name": "insert",
        "type": "function",
        "doc": "Insert items into this entity. This works the same way as inserters or shift-clicking: the \"bes  \ninventory is chosen automatically.   \n\n**Parameters**  \nitems :: [ItemStackSpecification](http://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification): Items to insert.  \n\n**Return value**  \nNumber of items actually inserted.",
        "returns": "uint",
        "args": {
          "items": {
            "name": "items",
            "type": "ItemStackSpecification",
            "doc": "items :: [ItemStackSpecification](http://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification): Items to insert."
          }
        }
      },
      "is_cursor_blueprint": {
        "name": "is_cursor_blueprint",
        "type": "function",
        "doc": "Returns whether the player is holding a blueprint, it takes into account a blueprint as an item as well as bluepri  \nfrom the blueprint record from the blueprint librar  \nNote that the is_cursor_blueprint and get_cursor_blueprint_entities refer to the currently selected blueprint,   \nit returns blueprint related information also when holding a blueprint book with a blueprint being selected in it.",
        "returns": "boolean"
      },
      "is_flashlight_enabled": {
        "name": "is_flashlight_enabled",
        "doc": "Is the flashlight enabled.",
        "type": "function"
      },
      "is_player": {
        "name": "is_player",
        "type": "function",
        "doc": "When ````\ntrue````\ncontrol adapter is a LuaPlayer object, ````\nfalse````\nfor entities including characters with players",
        "returns": "boolean"
      },
      "item_pickup_distance": {
        "name": "item_pickup_distance",
        "type": "double",
        "mode": "[R]",
        "doc": "The item pickup distance of this character or max double when not a character or player connected to a characte"
      },
      "loot_pickup_distance": {
        "name": "loot_pickup_distance",
        "type": "double",
        "mode": "[R]",
        "doc": "The loot pickup distance of this character or max double when not a character or player connected to a characte"
      },
      "mine_entity": {
        "name": "mine_entity",
        "type": "function",
        "doc": "Mines the given entity as if this player (or character) mined i    \n\n**Parameters**  \nentity :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html): The entity to mine  \nforce :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): Forces mining the entity even if the items can't fit in the player.  \n\n**Return value**  \nIf the mining succeeded.",
        "returns": "boolean",
        "args": {
          "entity": {
            "name": "entity",
            "type": "LuaEntity",
            "doc": "entity :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html): The entity to mine"
          },
          "force": {
            "name": "force",
            "type": "boolean",
            "doc": "force :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): Forces mining the entity even if the items can't fit in the player."
          }
        }
      },
      "mine_tile": {
        "name": "mine_tile",
        "type": "function",
        "doc": "Mines the given tile as if this player (or character) mined i    \n\n**Parameters**  \ntile :: [LuaTile](http://lua-api.factorio.com/latest/LuaTile.html): The tile to mine.  \n\n**Return value**  \nIf the mining succeeded.",
        "returns": "boolean",
        "args": {
          "tile": {
            "name": "tile",
            "type": "LuaTile",
            "doc": "tile :: [LuaTile](http://lua-api.factorio.com/latest/LuaTile.html): The tile to mine."
          }
        }
      },
      "mining_state": {
        "name": "mining_state",
        "type": "table",
        "mode": "[RW]",
        "doc": "Current mining stat  \nIt is a table with two fields:   \nmining :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean): Whether the player is mining at all  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) (optional): What tiles the player is mining; only used when the player is mining tiles (holding a tile in the cursor).  \n\n**Note: ** When the player isn't mining tiles the player will mine what ever entity is currently selected. See [LuaControl::selected](http://lua-api.factorio.com/latest/LuaControl.html#LuaControl.selected) and [LuaControl::update_selected_entity](http://lua-api.factorio.com/latest/LuaControl.html#LuaControl.update_selected_entity)."
      },
      "open_technology_gui": {
        "name": "open_technology_gui",
        "doc": "Open the technology GUI and select a given technolog    \n\n**Parameters**  \ntechnology :: [TechnologySpecification](http://lua-api.factorio.com/latest/Concepts.html#TechnologySpecification) (optional): The technology to select after opening the GUI.",
        "type": "function",
        "args": {
          "technology": {
            "name": "technology",
            "type": "TechnologySpecification",
            "doc": "technology :: [TechnologySpecification](http://lua-api.factorio.com/latest/Concepts.html#TechnologySpecification) (optional): The technology to select after opening the GUI."
          }
        }
      },
      "opened": {
        "name": "opened",
        "type": "LuaEntity or LuaItemStack or LuaEquipment or LuaEquipmentGrid or LuaPlayer or LuaGuiElement or defines.gui_type",
        "mode": "[RW]",
        "doc": "The GUI target the player currently has open; ````\nnil````\nif non    \n\n**Note: ** Write supports any of the types. Read will return the entity, equipment, equipment-grid, player, element or nil."
      },
      "opened_gui_type": {
        "name": "opened_gui_type",
        "type": "defines.gui_type",
        "mode": "[R]",
        "doc": "Returns the [defines.gui_type](http://lua-api.factorio.com/latest/defines.html#defines.gui_type) or ````\nnil````\n."
      },
      "picking_state": {
        "name": "picking_state",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "Current item-picking stat"
      },
      "position": {
        "name": "position",
        "type": "Position",
        "mode": "[R]",
        "doc": "Current position of the entity."
      },
      "reach_distance": {
        "name": "reach_distance",
        "type": "uint",
        "mode": "[R]",
        "doc": "The reach distance of this character or max uint when not a character or player connected to a characte"
      },
      "remove_item": {
        "name": "remove_item",
        "type": "function",
        "doc": "Remove items from this entity.   \n\n**Parameters**  \nitems :: [ItemStackSpecification](http://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification): Items to remove.  \n\n**Return value**  \nNumber of items actually removed.",
        "returns": "uint",
        "args": {
          "items": {
            "name": "items",
            "type": "ItemStackSpecification",
            "doc": "items :: [ItemStackSpecification](http://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification): Items to remove."
          }
        }
      },
      "repair_state": {
        "name": "repair_state",
        "type": "table",
        "mode": "[RW]",
        "doc": "Current repair stat  \nIt is a table with two fields:   \nrepairing :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean): The current state  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): The position being repaired"
      },
      "resource_reach_distance": {
        "name": "resource_reach_distance",
        "type": "double",
        "mode": "[R]",
        "doc": "The resource reach distance of this character or max double when not a character or player connected to a characte"
      },
      "riding_state": {
        "name": "riding_state",
        "type": "RidingState",
        "mode": "[RW]",
        "doc": "Current riding state of this car or the vehicle this player is riding i"
      },
      "selected": {
        "name": "selected",
        "type": "LuaEntity",
        "mode": "[RW]",
        "doc": "The currently selected entity; ````\nnil````\nif none. Assigning an entity will select it if selectable otherwise clears selection."
      },
      "set_gui_arrow": {
        "name": "set_gui_arrow",
        "doc": "Create an arrow which points at this entity. This is used in the tutorial. For examples, see ````\ncontrol.lua````  \nin the campaign missions.   \n\n**Parameters**  \nTable with the following fields:   \ntype :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Where to point to. This field determines what other fields are mandator  \nMay be ````\n\"nowhere\"````\n, ````\n\"goal\"````\n, ````\n\"entity_info\"````\n, ````\n\"active_window\"````\n, ````\n\"entity\"````\n, ````\n\"position\"````  \n````\n\"crafting_queue\"````\n, or ````\n\"item_stack\"````\n.  \nAdditional ````\ntype````\n-specific parameters  \nentity  \nentity :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)  \nposition  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position)  \ncrafting_queue  \ncrafting_queueindex :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \nitem_stack  \ninventory_index :: [defines.inventory](http://lua-api.factorio.com/latest/defines.html#defines.inventory)  \nitem_stack_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \nsource :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): May be either ````\n\"player\"````\nor ````\n\"target\"````\n.",
        "type": "function",
        "args": {
          "type": {
            "name": "type",
            "type": "string",
            "doc": "Table with the following fields:   \ntype :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Where to point to. This field determines what other fields are mandator  \nMay be ````\n\"nowhere\"````\n, ````\n\"goal\"````\n, ````\n\"entity_info\"````\n, ````\n\"active_window\"````\n, ````\n\"entity\"````\n, ````\n\"position\"````  \n````\n\"crafting_queue\"````\n, or ````\n\"item_stack\"````\n.  \nAdditional ````\ntype````\n-specific parameters  \nentity  \nentity :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)  \nposition  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position)  \ncrafting_queue  \ncrafting_queueindex :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \nitem_stack  \ninventory_index :: [defines.inventory](http://lua-api.factorio.com/latest/defines.html#defines.inventory)  \nitem_stack_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \nsource :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): May be either ````\n\"player\"````\nor ````\n\"target\"````\n."
          }
        }
      },
      "set_personal_logistic_slot": {
        "name": "set_personal_logistic_slot",
        "type": "function",
        "doc": "Sets the personal request and trash to the given value    \n\n**Parameters**  \nslot_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The slot to set/  \nvalue :: [PersonalLogistic\n\n**Parameters**  \n](http://lua-api.factorio.com/latest/Concepts.html#PersonalLogistic\n\n**Parameters**  \n)  \n\n**Return value**  \nIf the slot was set.  \n\n**Note: ** This will silently fail if personal logistics are not researched.",
        "returns": "boolean",
        "args": {
          "slot_index": {
            "name": "slot_index",
            "type": "uint",
            "doc": "slot_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The slot to set/"
          },
          "value": {
            "name": "value",
            "type": "PersonalLogisticParameters",
            "doc": "value :: [PersonalLogistic\n\n**Parameters**  \n](http://lua-api.factorio.com/latest/Concepts.html#PersonalLogistic\n\n**Parameters**  \n)"
          }
        }
      },
      "set_vehicle_logistic_slot": {
        "name": "set_vehicle_logistic_slot",
        "type": "function",
        "doc": "Sets the vehicle logistic request and trash to the given value    \n\n**Parameters**  \nslot_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The slot to set/  \nvalue :: [PersonalLogistic\n\n**Parameters**  \n](http://lua-api.factorio.com/latest/Concepts.html#PersonalLogistic\n\n**Parameters**  \n)  \n\n**Return value**  \nIf the slot was set.  \n\n**Note: ** This will silently fail if the spider does not use logistics.",
        "returns": "boolean",
        "args": {
          "slot_index": {
            "name": "slot_index",
            "type": "uint",
            "doc": "slot_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The slot to set/"
          },
          "value": {
            "name": "value",
            "type": "PersonalLogisticParameters",
            "doc": "value :: [PersonalLogistic\n\n**Parameters**  \n](http://lua-api.factorio.com/latest/Concepts.html#PersonalLogistic\n\n**Parameters**  \n)"
          }
        }
      },
      "shooting_state": {
        "name": "shooting_state",
        "type": "table",
        "mode": "[RW]",
        "doc": "Current shooting stat  \nIt is a table with two fields:   \nstate :: [defines.shooting](http://lua-api.factorio.com/latest/defines.html#defines.shooting): The current state  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): The position being shot at"
      },
      "surface": {
        "name": "surface",
        "type": "LuaSurface",
        "mode": "[R]",
        "doc": "The surface this entity is currently on."
      },
      "teleport": {
        "name": "teleport",
        "type": "function",
        "doc": "Teleport the entity to a given position, possibly on another surface    \n\n**Parameters**  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): Where to teleport to.  \nsurface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification) (optional): Surface to teleport to. If not given, will telepo  \nto the entity's current surface. Only players, cars, and spidertrons can be teleported cross-surface.  \n\n**Return value**  \n````\ntrue````\nwhen the entity was successfully teleported.  \n\n**Note: ** Some entities may not be teleported. For instance, transport bel  \nwon't allow teleportation and this method will always return ````\nfalse````\nwhen used on any such entity.  \n\n**Note: ** You can also pass 1 or 2 numbers as the parameters and they will be used as relative teleport coordinat  \n````\n'teleport(0, 1)'````\nto move the entity 1 tile positive   \n````\n'teleport(4)'````\nto move the entity 4 tiles to the positive x.",
        "returns": "boolean",
        "args": {
          "position": {
            "name": "position",
            "type": "Position",
            "doc": "position :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): Where to teleport to."
          },
          "surface": {
            "name": "surface",
            "type": "SurfaceSpecification",
            "doc": "surface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification) (optional): Surface to teleport to. If not given, will telepo  \nto the entity's current surface. Only players, cars, and spidertrons can be teleported cross-surface."
          }
        }
      },
      "update_selected_entity": {
        "name": "update_selected_entity",
        "doc": "Select an entity, as if by hovering the mouse above it.   \n\n**Parameters**  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): Position of the entity to select",
        "type": "function",
        "args": {
          "position": {
            "name": "position",
            "type": "Position",
            "doc": "position :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): Position of the entity to select"
          }
        }
      },
      "vehicle": {
        "name": "vehicle",
        "type": "LuaEntity",
        "mode": "[R]",
        "doc": "The vehicle the player is currently sitting in; ````\nnil````\nif none."
      },
      "vehicle_logistic_requests_enabled": {
        "name": "vehicle_logistic_requests_enabled",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "If personal logistic requests are enabled for this vehicle (spidertron)."
      },
      "walking_state": {
        "name": "walking_state",
        "type": "table",
        "mode": "[RW]",
        "doc": "Current walking stat  \nIt is a table with two fields:   \nwalking :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean): If ````\nfalse````\n, the player is currently not walking; otherwise it's going somewhere  \ndirection :: [defines.direction](http://lua-api.factorio.com/latest/defines.html#defines.direction): Direction where the player is walking  \n\n**Example**  \nMake the player go north. Note that a one-shot action like this will only make the player walk for one tic    \n````\ngame.player.walking_state = {walking = true, direction = defines.direction.north}````"
      }
    }
  },
  "LuaEntityPrototype": {
    "name": "LuaEntityPrototype",
    "type": "LuaEntityPrototype",
    "inherits": [],
    "properties": {}
  },
  "LuaEquipment": {
    "name": "LuaEquipment",
    "type": "LuaEquipment",
    "inherits": [],
    "properties": {
      "burner": {
        "name": "burner",
        "type": "LuaBurner",
        "mode": "[R]",
        "doc": "The burner energy source for this equipment or ````\nnil````\nif there isn't on"
      },
      "energy": {
        "name": "energy",
        "type": "double",
        "mode": "[RW]",
        "doc": "Current available energy."
      },
      "generator_power": {
        "name": "generator_power",
        "type": "double",
        "mode": "[R]",
        "doc": "Energy generated per tick."
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "max_energy": {
        "name": "max_energy",
        "type": "double",
        "mode": "[R]",
        "doc": "Maximum amount of energy that can be stored in this equipment."
      },
      "max_shield": {
        "name": "max_shield",
        "type": "double",
        "mode": "[R]",
        "doc": "Maximum shield value."
      },
      "max_solar_power": {
        "name": "max_solar_power",
        "type": "double",
        "mode": "[R]",
        "doc": "Maximum solar power generated."
      },
      "movement_bonus": {
        "name": "movement_bonus",
        "type": "double",
        "mode": "[R]",
        "doc": "Movement speed bonus."
      },
      "name": {
        "name": "name",
        "type": "string",
        "mode": "[R]",
        "doc": "Name of this equipment."
      },
      "object_name": {
        "name": "object_name",
        "type": "string",
        "mode": "[R]",
        "doc": "The class name of this object."
      },
      "position": {
        "name": "position",
        "type": "Position",
        "mode": "[R]",
        "doc": "Position of this equipment in the equipment grid."
      },
      "prototype": {
        "name": "prototype",
        "type": "LuaEquipmentPrototype",
        "mode": "[R]"
      },
      "shape": {
        "name": "shape",
        "type": "table",
        "mode": "[R]",
        "doc": "Shape of this equipment. It is a table:   \nwidth :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \nheight :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)"
      },
      "shield": {
        "name": "shield",
        "type": "double",
        "mode": "[RW]",
        "doc": "Current shield value of the equipmen    \n\n**Note: ** Can't be set higher than [LuaEquipment::max_shield](http://lua-api.factorio.com/latest/LuaEquipment.html#LuaEquipment.max_shield)."
      },
      "type": {
        "name": "type",
        "type": "string",
        "mode": "[R]",
        "doc": "Type of this equipment."
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": ""
  },
  "LuaEquipmentCategoryPrototype": {
    "name": "LuaEquipmentCategoryPrototype",
    "type": "LuaEquipmentCategoryPrototype",
    "inherits": [],
    "properties": {
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "localised_description": {
        "name": "localised_description",
        "type": "LocalisedString",
        "mode": "[R]"
      },
      "localised_name": {
        "name": "localised_name",
        "type": "LocalisedString",
        "mode": "[R]"
      },
      "name": {
        "name": "name",
        "type": "string",
        "mode": "[R]",
        "doc": "Name of this prototype."
      },
      "object_name": {
        "name": "object_name",
        "type": "string",
        "mode": "[R]",
        "doc": "The class name of this object."
      },
      "order": {
        "name": "order",
        "type": "string",
        "mode": "[R]",
        "doc": "Order string of this prototype."
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": ""
  },
  "LuaEquipmentGrid": {
    "name": "LuaEquipmentGrid",
    "type": "LuaEquipmentGrid",
    "inherits": [],
    "properties": {
      "available_in_batteries": {
        "name": "available_in_batteries",
        "type": "double",
        "mode": "[R]",
        "doc": "The total energy stored in all batteries in the equipment grid."
      },
      "battery_capacity": {
        "name": "battery_capacity",
        "type": "double",
        "mode": "[R]",
        "doc": "Total energy storage capacity of all batteries in the equipment grid."
      },
      "can_move": {
        "name": "can_move",
        "type": "function",
        "doc": "Check whether moving an equipment would succeed    \n\n**Parameters**  \nTable with the following fields:   \nequipment :: [LuaEquipment](http://lua-api.factorio.com/latest/LuaEquipment.html): The equipment to move  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): Where to put it",
        "returns": "boolean",
        "args": {
          "equipment": {
            "name": "equipment",
            "type": "LuaEquipment",
            "doc": "Table with the following fields:   \nequipment :: [LuaEquipment](http://lua-api.factorio.com/latest/LuaEquipment.html): The equipment to move  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): Where to put it"
          }
        }
      },
      "clear": {
        "name": "clear",
        "doc": "Clear all equipment from the grid, i.e. remove it without actually returning i    \n\n**Parameters**  \nby_player :: [PlayerSpecification](http://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional): If provided, the action is done 'as' this player and [on_player_removed_equipment](http://lua-api.factorio.com/latest/events.html#on_player_removed_equipment) is triggered.",
        "type": "function",
        "args": {
          "by_player": {
            "name": "by_player",
            "type": "PlayerSpecification",
            "doc": "by_player :: [PlayerSpecification](http://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional): If provided, the action is done 'as' this player and [on_player_removed_equipment](http://lua-api.factorio.com/latest/events.html#on_player_removed_equipment) is triggered."
          }
        }
      },
      "equipment": {
        "name": "equipment",
        "type": "array of LuaEquipment",
        "mode": "[R]",
        "doc": "All the equipment in this grid."
      },
      "generator_energy": {
        "name": "generator_energy",
        "type": "double",
        "mode": "[R]",
        "doc": "Total energy per tick generated by the equipment inside this grid."
      },
      "get": {
        "name": "get",
        "type": "function",
        "doc": "Find equipment in the Equipment Grid based off a position    \n\n**Parameters**  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): The position  \n\n**Return value**  \nThe found equipment, or ````\nnil````\nif equipment could not be found at the given position.",
        "returns": "LuaEquipment",
        "args": {
          "position": {
            "name": "position",
            "type": "Position",
            "doc": "position :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): The position"
          }
        }
      },
      "get_contents": {
        "name": "get_contents",
        "type": "function",
        "doc": "Get counts of all equipment in this grid.   \n\n**Return value**  \nThe counts, indexed by equipment names.",
        "returns": "dictionary string → uint"
      },
      "height": {
        "name": "height",
        "type": "uint",
        "mode": "[R]",
        "doc": "Height of the equipment grid."
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "inhibit_movement_bonus": {
        "name": "inhibit_movement_bonus",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "True if this movement bonus equipment is turned off, otherwise fals"
      },
      "max_shield": {
        "name": "max_shield",
        "type": "float",
        "mode": "[R]",
        "doc": "The maximum amount of shields this equipment grid ha"
      },
      "max_solar_energy": {
        "name": "max_solar_energy",
        "type": "double",
        "mode": "[R]",
        "doc": "Maximum energy per tick that can be created by any solar panels in the equipment grid. Actual generat  \nenergy varies depending on the daylight levels."
      },
      "move": {
        "name": "move",
        "type": "function",
        "doc": "Move an equipment within this grid    \n\n**Parameters**  \nTable with the following fields:   \nequipment :: [LuaEquipment](http://lua-api.factorio.com/latest/LuaEquipment.html): The equipment to move  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): Where to put it  \n\n**Return value**  \n````\ntrue````\nif the equipment was successfully moved.",
        "returns": "boolean",
        "args": {
          "equipment": {
            "name": "equipment",
            "type": "LuaEquipment",
            "doc": "Table with the following fields:   \nequipment :: [LuaEquipment](http://lua-api.factorio.com/latest/LuaEquipment.html): The equipment to move  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): Where to put it"
          }
        }
      },
      "object_name": {
        "name": "object_name",
        "type": "string",
        "mode": "[R]",
        "doc": "The class name of this object."
      },
      "prototype": {
        "name": "prototype",
        "type": "LuaEquipmentGridPrototype",
        "mode": "[R]"
      },
      "put": {
        "name": "put",
        "type": "function",
        "doc": "Insert an equipment into the grid    \n\n**Parameters**  \nTable with the following fields:   \nname :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Equipment prototype name  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) (optional): Grid position to put the equipment in.  \nby_player :: [PlayerSpecification](http://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional): If provided the action is done 'as' this player and [on_player_placed_equipment](http://lua-api.factorio.com/latest/events.html#on_player_placed_equipment) is triggered.  \n\n**Return value**  \nThe newly-added equipment, or ````\nnil````\nif the equipment could not be added.",
        "returns": "LuaEquipment",
        "args": {
          "name": {
            "name": "name",
            "type": "string",
            "doc": "Table with the following fields:   \nname :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Equipment prototype name  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) (optional): Grid position to put the equipment in.  \nby_player :: [PlayerSpecification](http://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional): If provided the action is done 'as' this player and [on_player_placed_equipment](http://lua-api.factorio.com/latest/events.html#on_player_placed_equipment) is triggered."
          }
        }
      },
      "shield": {
        "name": "shield",
        "type": "float",
        "mode": "[R]",
        "doc": "The amount of shields this equipment grid ha"
      },
      "take": {
        "name": "take",
        "type": "function",
        "doc": "Remove an equipment from the grid    \n\n**Parameters**  \nTable with the following fields:   \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) (optional): Take the equipment that contains this position in the grid.  \nequipment :: [LuaEquipment](http://lua-api.factorio.com/latest/LuaEquipment.html) (optional): Take this exact equipment.  \nby_player :: [PlayerSpecification](http://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional): If provided the action is done 'as' this player and [on_player_removed_equipment](http://lua-api.factorio.com/latest/events.html#on_player_removed_equipment) is triggered.  \nEither ````\nposition````\nor ````\nequipment````\nmust be specified.  \n\n**Return value**  \nThe removed equipment, or ````\nnil````\nif no equipment was removed.",
        "returns": "SimpleItemStack",
        "args": {
          "position": {
            "name": "position",
            "type": "Position",
            "doc": "Table with the following fields:   \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) (optional): Take the equipment that contains this position in the grid.  \nequipment :: [LuaEquipment](http://lua-api.factorio.com/latest/LuaEquipment.html) (optional): Take this exact equipment.  \nby_player :: [PlayerSpecification](http://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional): If provided the action is done 'as' this player and [on_player_removed_equipment](http://lua-api.factorio.com/latest/events.html#on_player_removed_equipment) is triggered.  \nEither ````\nposition````\nor ````\nequipment````\nmust be specified."
          }
        }
      },
      "take_all": {
        "name": "take_all",
        "type": "function",
        "doc": "Remove all equipment from the gri    \n\n**Parameters**  \nby_player :: [PlayerSpecification](http://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional): If provided, the action is done 'as' this player and [on_player_removed_equipment](http://lua-api.factorio.com/latest/events.html#on_player_removed_equipment) is triggered.  \n\n**Return value**  \nCount of each removed equipment, indexed by their prototype names.",
        "returns": "dictionary string → uint",
        "args": {
          "by_player": {
            "name": "by_player",
            "type": "PlayerSpecification",
            "doc": "by_player :: [PlayerSpecification](http://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional): If provided, the action is done 'as' this player and [on_player_removed_equipment](http://lua-api.factorio.com/latest/events.html#on_player_removed_equipment) is triggered."
          }
        }
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      },
      "width": {
        "name": "width",
        "type": "uint",
        "mode": "[R]",
        "doc": "Width of the equipment grid."
      }
    },
    "doc": "Remove an equipment from the grid."
  },
  "LuaEquipmentGridPrototype": {
    "name": "LuaEquipmentGridPrototype",
    "type": "LuaEquipmentGridPrototype",
    "inherits": [],
    "properties": {
      "equipment_categories": {
        "name": "equipment_categories",
        "type": "array of string",
        "mode": "[R]",
        "doc": "Equipment category names for the categories that may be inserted into this equipment grid. The grid will acce  \nany equipment that has at least one category in this lis    \nSee also  \n[LuaEquipmentPrototype::equipment_categories](http://lua-api.factorio.com/latest/LuaEquipmentPrototype.html#LuaEquipmentPrototype.equipment_categories)"
      },
      "height": {
        "name": "height",
        "type": "uint",
        "mode": "[R]"
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "localised_description": {
        "name": "localised_description",
        "type": "LocalisedString",
        "mode": "[R]"
      },
      "localised_name": {
        "name": "localised_name",
        "type": "LocalisedString",
        "mode": "[R]"
      },
      "locked": {
        "name": "locked",
        "type": "boolean",
        "mode": "[R]",
        "doc": "If the player can move equipment into or out of this gri"
      },
      "name": {
        "name": "name",
        "type": "string",
        "mode": "[R]",
        "doc": "Name of this prototype."
      },
      "object_name": {
        "name": "object_name",
        "type": "string",
        "mode": "[R]",
        "doc": "The class name of this object."
      },
      "order": {
        "name": "order",
        "type": "string",
        "mode": "[R]",
        "doc": "Order string of this prototype."
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      },
      "width": {
        "name": "width",
        "type": "uint",
        "mode": "[R]"
      }
    },
    "doc": ""
  },
  "LuaEquipmentPrototype": {
    "name": "LuaEquipmentPrototype",
    "type": "LuaEquipmentPrototype",
    "inherits": [],
    "properties": {
      "attack_parameters": {
        "name": "attack_parameters",
        "type": "AttackParameters",
        "mode": "[R]",
        "doc": "The equipment attack parameters or ````\nnil````"
      },
      "automatic": {
        "name": "automatic",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this active defense equipment automati  \nReturns false if not active defense equipmen"
      },
      "background_color": {
        "name": "background_color",
        "type": "Color",
        "mode": "[R]",
        "doc": "The background color of this equipment prototype."
      },
      "burner_prototype": {
        "name": "burner_prototype",
        "type": "LuaBurnerPrototype",
        "mode": "[R]",
        "doc": "The burner energy source prototype this equipment uses or ````\nnil````"
      },
      "electric_energy_source_prototype": {
        "name": "electric_energy_source_prototype",
        "type": "LuaElectricEnergySourcePrototype",
        "mode": "[R]",
        "doc": "The electric energy source prototype this equipment uses or ````\nnil````"
      },
      "energy_consumption": {
        "name": "energy_consumption",
        "type": "double",
        "mode": "[R]"
      },
      "energy_per_shield": {
        "name": "energy_per_shield",
        "type": "double",
        "mode": "[R]",
        "doc": "The energy per shield point restored. 0 for non-shield equipment."
      },
      "energy_production": {
        "name": "energy_production",
        "type": "double",
        "mode": "[R]",
        "doc": "The max power generated by this equipment."
      },
      "energy_source": {
        "name": "energy_source",
        "type": "LuaElectricEnergySourcePrototype",
        "mode": "[R]",
        "doc": "The energy source prototype for the equipment."
      },
      "equipment_categories": {
        "name": "equipment_categories",
        "type": "array of string",
        "mode": "[R]",
        "doc": "Category names for this equipment. These categories will be used to determine whether this equipment is allow  \nin a particular equipment gri    \nSee also  \n[LuaEquipmentGridPrototype::equipment_categories](http://lua-api.factorio.com/latest/LuaEquipmentGridPrototype.html#LuaEquipmentGridPrototype.equipment_categories)"
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "localised_description": {
        "name": "localised_description",
        "type": "LocalisedString",
        "mode": "[R]"
      },
      "localised_name": {
        "name": "localised_name",
        "type": "LocalisedString",
        "mode": "[R]"
      },
      "logistic_parameters": {
        "name": "logistic_parameters",
        "type": "table",
        "mode": "[R]",
        "doc": "The logistic parameters for roboport equipmen  \nTable with the following fields:   \nspawn_and_station_height :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float)  \ncharge_approach_distance :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float)  \nlogistic_radius :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float)  \nconstruction_radius :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float)  \ncharging_station_count :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \ncharging_distance :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float)  \ncharging_station_shift :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector)  \ncharging_energy :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double)  \ncharging_threshold_distance :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float)  \nrobot_vertical_acceleration :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float)  \nstationing_offset :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector)  \nrobot_limit :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \nlogistics_connection_distance :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float)"
      },
      "movement_bonus": {
        "name": "movement_bonus",
        "type": "float",
        "mode": "[R]",
        "doc": "_Can only be used if this is MovementBonusEquipmentPrototype_"
      },
      "name": {
        "name": "name",
        "type": "string",
        "mode": "[R]",
        "doc": "Name of this prototype."
      },
      "object_name": {
        "name": "object_name",
        "type": "string",
        "mode": "[R]",
        "doc": "The class name of this object."
      },
      "order": {
        "name": "order",
        "type": "string",
        "mode": "[R]",
        "doc": "Order string of this prototype."
      },
      "shape": {
        "name": "shape",
        "type": "table",
        "mode": "[R]",
        "doc": "Shape of this equipment prototype. It is a table:   \nwidth :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \nheight :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \npoints :: array of point (optional): A point is a table with x and y values. Only set when the shape is \"manual\""
      },
      "shield": {
        "name": "shield",
        "type": "float",
        "mode": "[R]",
        "doc": "The shield value of this equipment. 0 for non-shield equipment."
      },
      "take_result": {
        "name": "take_result",
        "type": "LuaItemPrototype",
        "mode": "[R]",
        "doc": "The result item when taking this equipment out of an equipment grid. ````\nnil````\nif there is no result item."
      },
      "type": {
        "name": "type",
        "type": "string",
        "mode": "[R]",
        "doc": "Type of this equipment prototype."
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": ""
  },
  "LuaFlowStatistics": {
    "name": "LuaFlowStatistics",
    "type": "LuaFlowStatistics",
    "inherits": [],
    "properties": {
      "clear": {
        "name": "clear",
        "doc": "Reset all the statistics data to 0.",
        "type": "function"
      },
      "force": {
        "name": "force",
        "type": "LuaForce",
        "mode": "[R]",
        "doc": "The force these statistics belong to or ````\nnil````\nfor pollution statistics."
      },
      "get_flow_count": {
        "name": "get_flow_count",
        "type": "function",
        "doc": "Gets the flow count value for the given time fram    \n\n**Parameters**  \nTable with the following fields:   \nname :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): The prototype name.  \ninput :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean): Read the input values or the output values  \nprecision_index :: [defines.flow_precision_index](http://lua-api.factorio.com/latest/defines.html#defines.flow_precision_index): The precision to read.  \ncount :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If true, the count is returned instead of the per-time-frame value.",
        "returns": "double",
        "args": {
          "name": {
            "name": "name",
            "type": "string",
            "doc": "Table with the following fields:   \nname :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): The prototype name.  \ninput :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean): Read the input values or the output values  \nprecision_index :: [defines.flow_precision_index](http://lua-api.factorio.com/latest/defines.html#defines.flow_precision_index): The precision to read.  \ncount :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If true, the count is returned instead of the per-time-frame value."
          }
        }
      },
      "get_input_count": {
        "name": "get_input_count",
        "type": "function",
        "doc": "Gets the total input count for a given prototype.   \n\n**Parameters**  \nstring: The prototype name.",
        "returns": "uint64 or double",
        "args": {
          "string": {
            "name": "string",
            "doc": "string: The prototype name.",
            "type": "string"
          }
        }
      },
      "get_output_count": {
        "name": "get_output_count",
        "type": "function",
        "doc": "Gets the total output count for a given prototype.   \n\n**Parameters**  \nstring: The prototype name.",
        "returns": "uint64 or double",
        "args": {
          "string": {
            "name": "string",
            "doc": "string: The prototype name.",
            "type": "string"
          }
        }
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "input_counts": {
        "name": "input_counts",
        "type": "dictionary string → array of uint64 or double",
        "mode": "[R]",
        "doc": "List of input counts indexed by name &lt;&gt; valu  \nRepresents the data that is shown on the left side of the GUI for the given statistics."
      },
      "object_name": {
        "name": "object_name",
        "type": "string",
        "mode": "[R]",
        "doc": "The class name of this object."
      },
      "on_flow": {
        "name": "on_flow",
        "doc": "Adds a value to this flow statistic    \n\n**Parameters**  \nstring: The prototype name.  \ncount :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float): The count: positive or negative determines if the value goes in the input or output statistics.",
        "type": "function",
        "args": {
          "count": {
            "name": "count",
            "type": "float",
            "doc": "count :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float): The count: positive or negative determines if the value goes in the input or output statistics."
          },
          "string": {
            "name": "string",
            "doc": "string: The prototype name.",
            "type": "string"
          }
        }
      },
      "output_counts": {
        "name": "output_counts",
        "type": "dictionary string → array of uint64 or double",
        "mode": "[R]",
        "doc": "List of output counts indexed by name &lt;&gt; valu  \nRepresents the data that is shown on the right side of the GUI for the given statistics."
      },
      "set_input_count": {
        "name": "set_input_count",
        "doc": "Sets the total input count for a given prototype.   \n\n**Parameters**  \nstring: The prototype name.  \ncount :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64) or [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double): The new count. The type depends on the instance of the statistics.",
        "type": "function",
        "args": {
          "count": {
            "name": "count",
            "type": "uint64 or double",
            "doc": "count :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64) or [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double): The new count. The type depends on the instance of the statistics."
          },
          "string": {
            "name": "string",
            "doc": "string: The prototype name.",
            "type": "string"
          }
        }
      },
      "set_output_count": {
        "name": "set_output_count",
        "doc": "Sets the total output count for a given prototype.   \n\n**Parameters**  \nstring: The prototype name.  \ncount :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64) or [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double): The new count. The type depends on the instance of the statistics.",
        "type": "function",
        "args": {
          "count": {
            "name": "count",
            "type": "uint64 or double",
            "doc": "count :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64) or [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double): The new count. The type depends on the instance of the statistics."
          },
          "string": {
            "name": "string",
            "doc": "string: The prototype name.",
            "type": "string"
          }
        }
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": "Gets the total input count for a given prototype."
  },
  "LuaFluidBox": {
    "name": "LuaFluidBox",
    "type": "LuaFluidBox",
    "inherits": [],
    "properties": {
      "flush": {
        "name": "flush",
        "type": "function",
        "doc": "Flushes all fluid from this fluidbox and its fluid syste    \n\n**Parameters**  \nindex :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \nfluid :: [FluidSpecification](http://lua-api.factorio.com/latest/Concepts.html#FluidSpecification) (optional): If provided, only this fluid is flushed.  \n\n**Return value**  \nThe fluid removed.",
        "returns": "dictionary string → float",
        "args": {
          "fluid": {
            "name": "fluid",
            "type": "FluidSpecification",
            "doc": "fluid :: [FluidSpecification](http://lua-api.factorio.com/latest/Concepts.html#FluidSpecification) (optional): If provided, only this fluid is flushed."
          },
          "index": {
            "name": "index",
            "type": "uint",
            "doc": "index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)"
          }
        }
      },
      "get_capacity": {
        "name": "get_capacity",
        "type": "function",
        "doc": "The capacity of the given fluidbox inde    \n\n**Parameters**  \nindex :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)",
        "returns": "double",
        "args": {
          "index": {
            "name": "index",
            "type": "uint",
            "doc": "index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)"
          }
        }
      },
      "get_connections": {
        "name": "get_connections",
        "type": "function",
        "doc": "The fluidbox connections for the given fluidbox inde    \n\n**Parameters**  \nindex :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)",
        "returns": "array of LuaFluidBox",
        "args": {
          "index": {
            "name": "index",
            "type": "uint",
            "doc": "index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)"
          }
        }
      },
      "get_filter": {
        "name": "get_filter",
        "type": "function",
        "doc": "The filter of the given fluidbox index, 'nil' if non    \n\n**Parameters**  \nindex :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \n\n**Return value**  \nname :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Fluid prototype name of the filtered fluid.  \nminimum_temperature :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double): The minimum temperature allowed into the fluidbox  \nmaximum_temperature :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double): The maximum temperature allowed into the fluidbox  \nor 'nil'.",
        "returns": "table",
        "args": {
          "index": {
            "name": "index",
            "type": "uint",
            "doc": "index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)"
          }
        }
      },
      "get_flow": {
        "name": "get_flow",
        "type": "function",
        "doc": "Flow through the fluidbox in the last tick. It is the larger of in-flow and out-flo    \n\n**Parameters**  \nindex :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \n\n**Note: ** Fluid wagons do not track it and will return 0.",
        "returns": "double",
        "args": {
          "index": {
            "name": "index",
            "type": "uint",
            "doc": "index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)"
          }
        }
      },
      "get_locked_fluid": {
        "name": "get_locked_fluid",
        "type": "function",
        "doc": "Returns the fluid the fluidbox is locked on  \nReturns 'nil' for no lo    \n\n**Parameters**  \nindex :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)",
        "returns": "string",
        "args": {
          "index": {
            "name": "index",
            "type": "uint",
            "doc": "index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)"
          }
        }
      },
      "get_prototype": {
        "name": "get_prototype",
        "type": "function",
        "doc": "The prototype of this fluidbox inde    \n\n**Parameters**  \nindex :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)",
        "returns": "LuaFluidBoxPrototype",
        "args": {
          "index": {
            "name": "index",
            "type": "uint",
            "doc": "index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)"
          }
        }
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "object_name": {
        "name": "object_name",
        "type": "string",
        "mode": "[R]",
        "doc": "The class name of this object."
      },
      "operator []": {
        "name": "operator []",
        "type": "Fluid or nil",
        "mode": "[R]",
        "doc": "Access, set or clear a fluid box. The index must always be in bounds (see <a href=\"LuaFluidBox.html#LuaFluidBox.operator%20#\">LuaFluidBox::operator #</a>  \nnew fluidboxes may not be added or removed using this operator. If the given fluid box doesn't contain a  \nfluid, ````\nnil````\nis returned. Similarly, ````\nnil````\ncan be written to a fluid box to remove all fluid from it."
      },
      "operator #": {
        "name": "operator #",
        "type": "uint",
        "mode": "[R]",
        "doc": "Number of fluid boxes."
      },
      "owner": {
        "name": "owner",
        "type": "LuaEntity",
        "mode": "[R]",
        "doc": "The entity that owns this fluidbo"
      },
      "set_filter": {
        "name": "set_filter",
        "type": "function",
        "doc": "Set the filter of the given fluidbox index, 'nil' to clea  \nSome entities cannot have their fluidbox filter set, notably fluid wagons and crafting machine    \n\n**Parameters**  \nindex :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \ntable: Table with the following fields:   \nname :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Fluid prototype name of the filtered fluid.  \nminimum_temperature :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional): The minimum temperature allowed into the fluidbox  \nmaximum_temperature :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional): The maximum temperature allowed into the fluidbox  \nforce :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): Force the filter to be set, regardless of current fluid content.  \nor 'nil'.  \n\n**Return value**  \nIf the filter was set successfully.",
        "returns": "boolean",
        "args": {
          "index": {
            "name": "index",
            "type": "uint",
            "doc": "index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)"
          },
          "table": {
            "name": "table",
            "type": "string",
            "doc": "table: Table with the following fields:   \nname :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Fluid prototype name of the filtered fluid.  \nminimum_temperature :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional): The minimum temperature allowed into the fluidbox  \nmaximum_temperature :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional): The maximum temperature allowed into the fluidbox  \nforce :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): Force the filter to be set, regardless of current fluid content.  \nor 'nil'."
          }
        }
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": "The prototype of this fluidbox index."
  },
  "LuaFluidBoxPrototype": {
    "name": "LuaFluidBoxPrototype",
    "type": "LuaFluidBoxPrototype",
    "inherits": [],
    "properties": {
      "base_area": {
        "name": "base_area",
        "type": "double",
        "mode": "[R]"
      },
      "base_level": {
        "name": "base_level",
        "type": "double",
        "mode": "[R]"
      },
      "entity": {
        "name": "entity",
        "type": "LuaEntityPrototype",
        "mode": "[R]",
        "doc": "The entity that this belongs t"
      },
      "filter": {
        "name": "filter",
        "type": "LuaFluidPrototype",
        "mode": "[R]",
        "doc": "The filter or ````\nnil````\nif no filter is se"
      },
      "height": {
        "name": "height",
        "type": "double",
        "mode": "[R]"
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "index": {
        "name": "index",
        "type": "uint",
        "mode": "[R]",
        "doc": "The index of this fluidbox prototype in the owning entit"
      },
      "maximum_temperature": {
        "name": "maximum_temperature",
        "type": "double",
        "mode": "[R]",
        "doc": "The maximum temperature or ````\nnil````\nif none is se"
      },
      "minimum_temperature": {
        "name": "minimum_temperature",
        "type": "double",
        "mode": "[R]",
        "doc": "The minimum temperature or ````\nnil````\nif none is se"
      },
      "object_name": {
        "name": "object_name",
        "type": "string",
        "mode": "[R]",
        "doc": "The class name of this object."
      },
      "pipe_connections": {
        "name": "pipe_connections",
        "type": "array of FluidBoxConnection",
        "mode": "[R]",
        "doc": "The pipe connection point"
      },
      "production_type": {
        "name": "production_type",
        "type": "string",
        "mode": "[R]",
        "doc": "The production type. \"input\", \"output\", \"input-output\", or \"none"
      },
      "render_layer": {
        "name": "render_layer",
        "type": "string",
        "mode": "[R]",
        "doc": "The render laye"
      },
      "secondary_draw_orders": {
        "name": "secondary_draw_orders",
        "type": "array of int",
        "mode": "[R]",
        "doc": "The secondary draw orders for the 4 possible connection direction"
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      },
      "volume": {
        "name": "volume",
        "type": "double",
        "mode": "[R]"
      }
    },
    "doc": "The entity that this belongs to."
  },
  "LuaFluidEnergySourcePrototype": {
    "name": "LuaFluidEnergySourcePrototype",
    "type": "LuaFluidEnergySourcePrototype",
    "inherits": [],
    "properties": {
      "burns_fluid": {
        "name": "burns_fluid",
        "type": "boolean",
        "mode": "[R]"
      },
      "effectivity": {
        "name": "effectivity",
        "type": "double",
        "mode": "[R]"
      },
      "emissions": {
        "name": "emissions",
        "type": "double",
        "mode": "[R]"
      },
      "fluid_box": {
        "name": "fluid_box",
        "mode": "[R]",
        "doc": "The fluid box for this energy source."
      },
      "fluid_usage_per_tick": {
        "name": "fluid_usage_per_tick",
        "type": "double",
        "mode": "[R]"
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "maximum_temperature": {
        "name": "maximum_temperature",
        "type": "double",
        "mode": "[R]"
      },
      "object_name": {
        "name": "object_name",
        "type": "string",
        "mode": "[R]",
        "doc": "The class name of this object."
      },
      "render_no_network_icon": {
        "name": "render_no_network_icon",
        "type": "boolean",
        "mode": "[R]"
      },
      "render_no_power_icon": {
        "name": "render_no_power_icon",
        "type": "boolean",
        "mode": "[R]"
      },
      "scale_fluid_usage": {
        "name": "scale_fluid_usage",
        "type": "boolean",
        "mode": "[R]"
      },
      "smoke": {
        "name": "smoke",
        "type": "array of SmokeSource",
        "mode": "[R]",
        "doc": "The smoke sources for this prototype if an"
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": ""
  },
  "LuaFluidPrototype": {
    "name": "LuaFluidPrototype",
    "type": "LuaFluidPrototype",
    "inherits": [],
    "properties": {
      "base_color": {
        "name": "base_color",
        "type": "Color",
        "mode": "[R]"
      },
      "default_temperature": {
        "name": "default_temperature",
        "type": "double",
        "mode": "[R]",
        "doc": "Default temperature of the fluid."
      },
      "emissions_multiplier": {
        "name": "emissions_multiplier",
        "type": "double",
        "mode": "[R]"
      },
      "flow_color": {
        "name": "flow_color",
        "type": "Color",
        "mode": "[R]"
      },
      "fuel_value": {
        "name": "fuel_value",
        "type": "double",
        "mode": "[R]"
      },
      "gas_temperature": {
        "name": "gas_temperature",
        "type": "double",
        "mode": "[R]"
      },
      "group": {
        "name": "group",
        "type": "LuaGroup",
        "mode": "[R]",
        "doc": "Group of this prototype."
      },
      "heat_capacity": {
        "name": "heat_capacity",
        "type": "double",
        "mode": "[R]",
        "doc": "How much energy the fluid will generate at max temperature assuming 100% efficiency steam engine."
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "hidden": {
        "name": "hidden",
        "type": "boolean",
        "mode": "[R]"
      },
      "localised_description": {
        "name": "localised_description",
        "type": "LocalisedString",
        "mode": "[R]"
      },
      "localised_name": {
        "name": "localised_name",
        "type": "LocalisedString",
        "mode": "[R]"
      },
      "max_temperature": {
        "name": "max_temperature",
        "type": "double",
        "mode": "[R]",
        "doc": "Maximum temperature the fluid can reach."
      },
      "name": {
        "name": "name",
        "type": "string",
        "mode": "[R]",
        "doc": "Name of this prototype."
      },
      "object_name": {
        "name": "object_name",
        "type": "string",
        "mode": "[R]",
        "doc": "The class name of this object."
      },
      "order": {
        "name": "order",
        "type": "string",
        "mode": "[R]",
        "doc": "Order string for this prototype."
      },
      "subgroup": {
        "name": "subgroup",
        "type": "LuaGroup",
        "mode": "[R]",
        "doc": "Subgroup of this prototype."
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": ""
  },
  "LuaFontPrototype": {
    "name": "LuaFontPrototype",
    "type": "LuaFontPrototype",
    "inherits": [],
    "properties": {
      "border": {
        "name": "border",
        "type": "boolean",
        "mode": "[R]"
      },
      "border_color": {
        "name": "border_color",
        "type": "Color",
        "mode": "[R]",
        "doc": "The border color or ````\nnil````\nif not set."
      },
      "filtered": {
        "name": "filtered",
        "type": "boolean",
        "mode": "[R]"
      },
      "from": {
        "name": "from",
        "type": "string",
        "mode": "[R]"
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "name": {
        "name": "name",
        "type": "string",
        "mode": "[R]",
        "doc": "Name of this prototype."
      },
      "object_name": {
        "name": "object_name",
        "type": "string",
        "mode": "[R]",
        "doc": "The class name of this object."
      },
      "size": {
        "name": "size",
        "type": "int",
        "mode": "[R]"
      },
      "spacing": {
        "name": "spacing",
        "type": "float",
        "mode": "[R]"
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": ""
  },
  "LuaForce": {
    "name": "LuaForce",
    "type": "LuaForce",
    "inherits": [],
    "properties": {
      "add_chart_tag": {
        "name": "add_chart_tag",
        "type": "function",
        "doc": "Adds a custom chart tag to the given surface and returns the new tag or ````\nnil````\nif the given position isn't valid for a chart ta    \n\n**Parameters**  \nsurface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification): Which surface to add the tag to.  \ntag: Table with the following fields:   \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position)  \nicon :: [SignalID](http://lua-api.factorio.com/latest/Concepts.html#SignalID) (optional)  \ntext :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional)  \nlast_user :: [PlayerSpecification](http://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional)  \n\n**Note: ** The chunk must be charted for a tag to be valid at that location.  \n\n**Note: ** The icon, text, or both must be provided.",
        "returns": "LuaCustomChartTag",
        "args": {
          "surface": {
            "name": "surface",
            "type": "SurfaceSpecification",
            "doc": "surface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification): Which surface to add the tag to."
          },
          "tag": {
            "name": "tag",
            "type": "Position",
            "doc": "tag: Table with the following fields:   \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position)  \nicon :: [SignalID](http://lua-api.factorio.com/latest/Concepts.html#SignalID) (optional)  \ntext :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional)  \nlast_user :: [PlayerSpecification](http://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional)"
          }
        }
      },
      "add_research": {
        "name": "add_research",
        "type": "function",
        "doc": "Add this technology to the back of the research queue if the queue is enable  \nOtherwise, set this technology to be researched no    \n\n**Parameters**  \ntechnology :: [TechnologySpecification](http://lua-api.factorio.com/latest/Concepts.html#TechnologySpecification)  \n\n**Return value**  \nIf the technology was added.",
        "returns": "boolean",
        "args": {
          "technology": {
            "name": "technology",
            "type": "TechnologySpecification",
            "doc": "technology :: [TechnologySpecification](http://lua-api.factorio.com/latest/Concepts.html#TechnologySpecification)"
          }
        }
      },
      "ai_controllable": {
        "name": "ai_controllable",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "Enables some higher-level AI behaviour for this force. When set to ````\ntrue````\n, biters belonging   \nthis force will automatically expand into new territories, build new spawners, and form un  \ngroups. By default, this value is ````\ntrue````\nfor the enemy force and ````\nfalse````\nfor all others.   \n\n**Note: ** Setting this to ````\nfalse````\ndoes not turn off biters' AI. They will still move around and atta  \nplayers who come close.  \n\n**Note: ** It is necessary for a force to be AI controllable in order to be able to create unit grou  \nor build bases from scripts."
      },
      "artillery_range_modifier": {
        "name": "artillery_range_modifier",
        "type": "double",
        "mode": "[RW]"
      },
      "cancel_charting": {
        "name": "cancel_charting",
        "doc": "Cancels pending chart requests for the given surface or all surface    \n\n**Parameters**  \nsurface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification) (optional)",
        "type": "function",
        "args": {
          "surface": {
            "name": "surface",
            "type": "SurfaceSpecification",
            "doc": "surface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification) (optional)"
          }
        }
      },
      "cancel_current_research": {
        "name": "cancel_current_research",
        "doc": "Stop the research currently in progres  \nThis will remove any dependent technologies from the research queue.",
        "type": "function"
      },
      "character_build_distance_bonus": {
        "name": "character_build_distance_bonus",
        "type": "uint",
        "mode": "[RW]"
      },
      "character_health_bonus": {
        "name": "character_health_bonus",
        "type": "double",
        "mode": "[RW]"
      },
      "character_inventory_slots_bonus": {
        "name": "character_inventory_slots_bonus",
        "type": "uint",
        "mode": "[RW]",
        "doc": "the number of additional inventory slots the character main inventory has."
      },
      "character_item_drop_distance_bonus": {
        "name": "character_item_drop_distance_bonus",
        "type": "uint",
        "mode": "[RW]"
      },
      "character_item_pickup_distance_bonus": {
        "name": "character_item_pickup_distance_bonus",
        "type": "double",
        "mode": "[RW]"
      },
      "character_logistic_requests": {
        "name": "character_logistic_requests",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "````\ntrue````\nif character requester logistics is enable"
      },
      "character_loot_pickup_distance_bonus": {
        "name": "character_loot_pickup_distance_bonus",
        "type": "double",
        "mode": "[RW]"
      },
      "character_reach_distance_bonus": {
        "name": "character_reach_distance_bonus",
        "type": "uint",
        "mode": "[RW]"
      },
      "character_resource_reach_distance_bonus": {
        "name": "character_resource_reach_distance_bonus",
        "type": "double",
        "mode": "[RW]"
      },
      "character_running_speed_modifier": {
        "name": "character_running_speed_modifier",
        "type": "double",
        "mode": "[RW]"
      },
      "character_trash_slot_count": {
        "name": "character_trash_slot_count",
        "type": "double",
        "mode": "[RW]",
        "doc": "Number of character trash slots."
      },
      "chart": {
        "name": "chart",
        "doc": "Chart a portion of the map. The chart for the given area is refreshed; it creates chart f  \nany parts of the given area that haven't been charted yet    \n\n**Parameters**  \nsurface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification)  \narea :: [BoundingBox](http://lua-api.factorio.com/latest/Concepts.html#BoundingBox): The area on the given surface to chart.  \n\n**Example**  \nCharts a 2048x2048 rectangle centered around the origi    \n````\ngame.player.force.chart(game.player.surface,  \n                        {{x = -1024, y = -1024}, {x = 1024, y = 1024}})````",
        "type": "function",
        "args": {
          "area": {
            "name": "area",
            "type": "BoundingBox",
            "doc": "area :: [BoundingBox](http://lua-api.factorio.com/latest/Concepts.html#BoundingBox): The area on the given surface to chart."
          },
          "surface": {
            "name": "surface",
            "type": "SurfaceSpecification",
            "doc": "surface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification)"
          }
        }
      },
      "chart_all": {
        "name": "chart_all",
        "doc": "Chart all generated chunk    \n\n**Parameters**  \nsurface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification) (optional): Which surface to chart or all if not given.",
        "type": "function",
        "args": {
          "surface": {
            "name": "surface",
            "type": "SurfaceSpecification",
            "doc": "surface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification) (optional): Which surface to chart or all if not given."
          }
        }
      },
      "clear_chart": {
        "name": "clear_chart",
        "doc": "Erases chart data for this forc    \n\n**Parameters**  \nsurface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification) (optional): Which surface to erase chart data for or if not provided all surfaces charts are erased.",
        "type": "function",
        "args": {
          "surface": {
            "name": "surface",
            "type": "SurfaceSpecification",
            "doc": "surface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification) (optional): Which surface to erase chart data for or if not provided all surfaces charts are erased."
          }
        }
      },
      "connected_players": {
        "name": "connected_players",
        "type": "array of LuaPlayer",
        "mode": "[R]",
        "doc": "The connected players belonging to this forc  \nThis is primarily useful when you want to do some action against all online players of this force.  \n\n**Note: ** This does *not* index using player index. See [LuaPlayer::index](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.index) on each player instance for the player index."
      },
      "current_research": {
        "name": "current_research",
        "type": "LuaTechnology",
        "mode": "[R]",
        "doc": "The current technology in research, or ````\nnil````\nif no research is currently ongoing."
      },
      "deconstruction_time_to_live": {
        "name": "deconstruction_time_to_live",
        "type": "uint",
        "mode": "[RW]",
        "doc": "The time, in ticks, before a deconstruction order is removed."
      },
      "disable_all_prototypes": {
        "name": "disable_all_prototypes",
        "doc": "Disable all recipes and technologies. Only recipes and technologies enabled explicitly wi  \nbe useable from this point.",
        "type": "function"
      },
      "disable_research": {
        "name": "disable_research",
        "doc": "Disable research for this force.",
        "type": "function"
      },
      "enable_all_prototypes": {
        "name": "enable_all_prototypes",
        "doc": "Enables all recipes and technologie  \nThe opposite of [LuaForce::disable_all_prototypes](http://lua-api.factorio.com/latest/LuaForce.html#LuaForce.disable_all_prototypes)",
        "type": "function"
      },
      "enable_all_recipes": {
        "name": "enable_all_recipes",
        "doc": "Unlock all recipes.",
        "type": "function"
      },
      "enable_all_technologies": {
        "name": "enable_all_technologies",
        "doc": "Unlock all technologies.",
        "type": "function"
      },
      "enable_research": {
        "name": "enable_research",
        "doc": "Enable research for this force.",
        "type": "function"
      },
      "entity_build_count_statistics": {
        "name": "entity_build_count_statistics",
        "type": "LuaFlowStatistics",
        "mode": "[R]",
        "doc": "The entity build statistics for this force (built and mined)"
      },
      "evolution_factor": {
        "name": "evolution_factor",
        "type": "double",
        "mode": "[RW]",
        "doc": "Evolution factor of this force."
      },
      "evolution_factor_by_killing_spawners": {
        "name": "evolution_factor_by_killing_spawners",
        "type": "double",
        "mode": "[RW]"
      },
      "evolution_factor_by_pollution": {
        "name": "evolution_factor_by_pollution",
        "type": "double",
        "mode": "[RW]"
      },
      "evolution_factor_by_time": {
        "name": "evolution_factor_by_time",
        "type": "double",
        "mode": "[RW]"
      },
      "find_chart_tags": {
        "name": "find_chart_tags",
        "type": "function",
        "doc": "Finds all custom chart tags within the given bounding box on the given surfac    \n\n**Parameters**  \nsurface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification)  \narea :: [BoundingBox](http://lua-api.factorio.com/latest/Concepts.html#BoundingBox) (optional)",
        "returns": "array of LuaCustomChartTag",
        "args": {
          "area": {
            "name": "area",
            "type": "BoundingBox",
            "doc": "area :: [BoundingBox](http://lua-api.factorio.com/latest/Concepts.html#BoundingBox) (optional)"
          },
          "surface": {
            "name": "surface",
            "type": "SurfaceSpecification",
            "doc": "surface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification)"
          }
        }
      },
      "find_logistic_network_by_position": {
        "name": "find_logistic_network_by_position",
        "type": "function",
        "returns": "LuaLogisticNetwork",
        "args": {
          "position": {
            "name": "position",
            "type": "Position",
            "doc": "position :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): Position to find a network for"
          },
          "surface": {
            "name": "surface",
            "type": "SurfaceSpecification",
            "doc": "surface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification): Surface to search on"
          }
        },
        "doc": "**Parameters**  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): Position to find a network for  \nsurface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification): Surface to search on  \n\n**Return value**  \nThe found network or ````\nnil````\n."
      },
      "fluid_production_statistics": {
        "name": "fluid_production_statistics",
        "type": "LuaFlowStatistics",
        "mode": "[R]",
        "doc": "The fluid production statistics for this force."
      },
      "following_robots_lifetime_modifier": {
        "name": "following_robots_lifetime_modifier",
        "type": "double",
        "mode": "[RW]",
        "doc": "Additional lifetime for following robot"
      },
      "friendly_fire": {
        "name": "friendly_fire",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "If friendly fire is enabled for this force."
      },
      "get_ammo_damage_modifier": {
        "name": "get_ammo_damage_modifier",
        "type": "function",
        "returns": "double",
        "args": {
          "ammo": {
            "name": "ammo",
            "type": "string",
            "doc": "ammo :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Ammo category"
          }
        },
        "doc": "**Parameters**  \nammo :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Ammo category"
      },
      "get_cease_fire": {
        "name": "get_cease_fire",
        "type": "function",
        "doc": "Will this force attack members of another force?   \n\n**Parameters**  \nother :: [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification)",
        "returns": "boolean",
        "args": {
          "other": {
            "name": "other",
            "type": "ForceSpecification",
            "doc": "other :: [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification)"
          }
        }
      },
      "get_entity_count": {
        "name": "get_entity_count",
        "type": "function",
        "doc": "Count entities of given type    \n\n**Parameters**  \nname :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Prototype name of the entity.  \n\n**Return value**  \nNumber of entities of given prototype belonging to this force.  \n\n**Note: ** This function has O(1) time complexity as entity counts are kept and maintain  \nin the game engine.",
        "returns": "uint",
        "args": {
          "name": {
            "name": "name",
            "type": "string",
            "doc": "name :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Prototype name of the entity."
          }
        }
      },
      "get_friend": {
        "name": "get_friend",
        "type": "function",
        "doc": "Is this force a friend?   \n\n**Parameters**  \nother :: [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification)",
        "returns": "boolean",
        "args": {
          "other": {
            "name": "other",
            "type": "ForceSpecification",
            "doc": "other :: [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification)"
          }
        }
      },
      "get_gun_speed_modifier": {
        "name": "get_gun_speed_modifier",
        "type": "function",
        "returns": "double",
        "args": {
          "ammo": {
            "name": "ammo",
            "type": "string",
            "doc": "ammo :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Ammo category"
          }
        },
        "doc": "**Parameters**  \nammo :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Ammo category"
      },
      "get_hand_crafting_disabled_for_recipe": {
        "name": "get_hand_crafting_disabled_for_recipe",
        "type": "function",
        "doc": "Gets if the given recipe is explicitly disabled from being hand crafte    \n\n**Parameters**  \nrecipe :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) or [LuaRecipe](http://lua-api.factorio.com/latest/LuaRecipe.html)",
        "returns": "boolean",
        "args": {
          "recipe": {
            "name": "recipe",
            "type": "string or LuaRecipe",
            "doc": "recipe :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) or [LuaRecipe](http://lua-api.factorio.com/latest/LuaRecipe.html)"
          }
        }
      },
      "get_item_launched": {
        "name": "get_item_launched",
        "type": "function",
        "doc": "Gets the count of a given item launched in rocket    \n\n**Parameters**  \nitem :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): The item to get  \n\n**Return value**  \nThe count of the item that has been launched.",
        "returns": "uint",
        "args": {
          "item": {
            "name": "item",
            "type": "string",
            "doc": "item :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): The item to get"
          }
        }
      },
      "get_linked_inventory": {
        "name": "get_linked_inventory",
        "type": "function",
        "doc": "Gets the linked inventory for the given prototype and link ID if it exists or ````\nnil````    \n\n**Parameters**  \nprototype :: [EntityPrototypeSpecification](http://lua-api.factorio.com/latest/Concepts.html#EntityPrototypeSpecification)  \nlink_id :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)",
        "returns": "LuaInventory",
        "args": {
          "link_id": {
            "name": "link_id",
            "type": "uint",
            "doc": "link_id :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)"
          },
          "prototype": {
            "name": "prototype",
            "type": "EntityPrototypeSpecification",
            "doc": "prototype :: [EntityPrototypeSpecification](http://lua-api.factorio.com/latest/Concepts.html#EntityPrototypeSpecification)"
          }
        }
      },
      "get_saved_technology_progress": {
        "name": "get_saved_technology_progress",
        "type": "function",
        "doc": "Gets the saved progress for the given technology or ````\nnil````\nif there is no saved progres    \n\n**Parameters**  \ntechnology :: [TechnologySpecification](http://lua-api.factorio.com/latest/Concepts.html#TechnologySpecification): The technology  \n\n**Return value**  \nThe progress as a percent.",
        "returns": "double",
        "args": {
          "technology": {
            "name": "technology",
            "type": "TechnologySpecification",
            "doc": "technology :: [TechnologySpecification](http://lua-api.factorio.com/latest/Concepts.html#TechnologySpecification): The technology"
          }
        }
      },
      "get_spawn_position": {
        "name": "get_spawn_position",
        "type": "function",
        "returns": "Position",
        "args": {
          "surface": {
            "name": "surface",
            "type": "SurfaceSpecification",
            "doc": "surface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification)"
          }
        },
        "doc": "**Parameters**  \nsurface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification)"
      },
      "get_train_stops": {
        "name": "get_train_stops",
        "type": "function",
        "doc": "Gets train stops matching the given filter    \n\n**Parameters**  \nopts (optional): Table with the following fields:   \nname :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) or array of [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional)  \nsurface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification) (optional)",
        "returns": "array of LuaEntity",
        "args": {
          "opts": {
            "name": "opts",
            "type": "string or array of string",
            "doc": "opts (optional): Table with the following fields:   \nname :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) or array of [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional)  \nsurface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification) (optional)"
          }
        }
      },
      "get_trains": {
        "name": "get_trains",
        "type": "function",
        "returns": "array of LuaTrain",
        "args": {
          "surface": {
            "name": "surface",
            "type": "SurfaceSpecification",
            "doc": "surface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification) (optional): If given only trains on the surface are returned."
          }
        },
        "doc": "**Parameters**  \nsurface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification) (optional): If given only trains on the surface are returned."
      },
      "get_turret_attack_modifier": {
        "name": "get_turret_attack_modifier",
        "type": "function",
        "returns": "double",
        "args": {
          "turret": {
            "name": "turret",
            "type": "string",
            "doc": "turret :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Turret prototype name"
          }
        },
        "doc": "**Parameters**  \nturret :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Turret prototype name"
      },
      "ghost_time_to_live": {
        "name": "ghost_time_to_live",
        "type": "uint",
        "mode": "[RW]",
        "doc": "The time, in ticks, before a placed ghost disappears."
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "index": {
        "name": "index",
        "type": "uint",
        "mode": "[R]",
        "doc": "Unique ID associated with this force."
      },
      "inserter_stack_size_bonus": {
        "name": "inserter_stack_size_bonus",
        "type": "double",
        "mode": "[RW]",
        "doc": "The inserter stack size bonus for non stack inserters"
      },
      "is_chunk_charted": {
        "name": "is_chunk_charted",
        "type": "function",
        "doc": "Has a chunk been charted?   \n\n**Parameters**  \nsurface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification)  \nposition :: [ChunkPosition](http://lua-api.factorio.com/latest/Concepts.html#ChunkPosition): Position of the chunk.",
        "returns": "boolean",
        "args": {
          "position": {
            "name": "position",
            "type": "ChunkPosition",
            "doc": "position :: [ChunkPosition](http://lua-api.factorio.com/latest/Concepts.html#ChunkPosition): Position of the chunk."
          },
          "surface": {
            "name": "surface",
            "type": "SurfaceSpecification",
            "doc": "surface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification)"
          }
        }
      },
      "is_chunk_visible": {
        "name": "is_chunk_visible",
        "type": "function",
        "doc": "Is the given chunk currently charted and visible (not covered by fog of war) on the ma    \n\n**Parameters**  \nsurface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification)  \nposition :: [ChunkPosition](http://lua-api.factorio.com/latest/Concepts.html#ChunkPosition)",
        "returns": "boolean",
        "args": {
          "position": {
            "name": "position",
            "type": "ChunkPosition",
            "doc": "position :: [ChunkPosition](http://lua-api.factorio.com/latest/Concepts.html#ChunkPosition)"
          },
          "surface": {
            "name": "surface",
            "type": "SurfaceSpecification",
            "doc": "surface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification)"
          }
        }
      },
      "is_pathfinder_busy": {
        "name": "is_pathfinder_busy",
        "type": "function",
        "doc": "Is pathfinder busy? When the pathfinder is busy, it won't accept any more pathfinding requests.",
        "returns": "boolean"
      },
      "item_production_statistics": {
        "name": "item_production_statistics",
        "type": "LuaFlowStatistics",
        "mode": "[R]",
        "doc": "The item production statistics for this force."
      },
      "items_launched": {
        "name": "items_launched",
        "type": "dictionary string → uint",
        "mode": "[R]",
        "doc": "All of the items that have been launched in rocket"
      },
      "kill_all_units": {
        "name": "kill_all_units",
        "doc": "Kill all units and flush the pathfinder.",
        "type": "function"
      },
      "kill_count_statistics": {
        "name": "kill_count_statistics",
        "type": "LuaFlowStatistics",
        "mode": "[R]",
        "doc": "The kill counter statistics for this force."
      },
      "laboratory_productivity_bonus": {
        "name": "laboratory_productivity_bonus",
        "type": "double",
        "mode": "[RW]"
      },
      "laboratory_speed_modifier": {
        "name": "laboratory_speed_modifier",
        "type": "double",
        "mode": "[RW]"
      },
      "logistic_networks": {
        "name": "logistic_networks",
        "type": "dictionary string → array of LuaLogisticNetwork",
        "mode": "[R]",
        "doc": "List of logistic networks, grouped by surface."
      },
      "manual_crafting_speed_modifier": {
        "name": "manual_crafting_speed_modifier",
        "type": "double",
        "mode": "[RW]",
        "doc": "Multiplier of the manual crafting speed. Default value is ````\n0````  \nThe actual crafting speed will be multiplied by ````\n1 + manual_crafting_speed_modifier````\n.   \n\n**Example**  \nDouble the player's crafting spe    \n````\ngame.player.force.manual_crafting_speed_modifier = 1````"
      },
      "manual_mining_speed_modifier": {
        "name": "manual_mining_speed_modifier",
        "type": "double",
        "mode": "[RW]",
        "doc": "Multiplier of the manual mining speed. Default value is ````\n0````  \nThe actual mining speed will be multiplied by ````\n1 + manual_mining_speed_modifier````\n.   \n\n**Example**  \nDouble the player's mining spe    \n````\ngame.player.force.manual_mining_speed_modifier = 1````"
      },
      "max_failed_attempts_per_tick_per_construction_queue": {
        "name": "max_failed_attempts_per_tick_per_construction_queue",
        "type": "uint",
        "mode": "[RW]"
      },
      "max_successful_attempts_per_tick_per_construction_queue": {
        "name": "max_successful_attempts_per_tick_per_construction_queue",
        "type": "uint",
        "mode": "[RW]"
      },
      "maximum_following_robot_count": {
        "name": "maximum_following_robot_count",
        "type": "uint",
        "mode": "[RW]",
        "doc": "Maximum number of follower robots."
      },
      "mining_drill_productivity_bonus": {
        "name": "mining_drill_productivity_bonus",
        "type": "double",
        "mode": "[RW]"
      },
      "name": {
        "name": "name",
        "type": "string",
        "mode": "[R]",
        "doc": "Name of the force.   \n\n**Example**  \nPrints \"````\nplayer````    \n````\ngame.player.print(game.player.force.name)````"
      },
      "object_name": {
        "name": "object_name",
        "type": "string",
        "mode": "[R]",
        "doc": "The class name of this object."
      },
      "play_sound": {
        "name": "play_sound",
        "type": "function",
        "doc": "Plays a sound for every player on this forc    \n\n**Parameters**  \nTable with the following fields:   \npath :: [SoundPath](http://lua-api.factorio.com/latest/Concepts.html#SoundPath): The sound to play  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) (optional): Where the sound should be played. If not given it's played 'everywhere'.  \nvolume_modifier :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional): Must be between 0 and 1 inclusive.  \noverride_sound_type :: [SoundType](http://lua-api.factorio.com/latest/Concepts.html#SoundType) (optional): Which volume mixer to play the sound through. Uses the default mixer for the sound type if not specified.",
        "returns": "boolean",
        "args": {
          "path": {
            "name": "path",
            "type": "SoundPath",
            "doc": "Table with the following fields:   \npath :: [SoundPath](http://lua-api.factorio.com/latest/Concepts.html#SoundPath): The sound to play  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) (optional): Where the sound should be played. If not given it's played 'everywhere'.  \nvolume_modifier :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional): Must be between 0 and 1 inclusive.  \noverride_sound_type :: [SoundType](http://lua-api.factorio.com/latest/Concepts.html#SoundType) (optional): Which volume mixer to play the sound through. Uses the default mixer for the sound type if not specified."
          }
        }
      },
      "players": {
        "name": "players",
        "type": "array of LuaPlayer",
        "mode": "[R]",
        "doc": "Players belonging to this force."
      },
      "previous_research": {
        "name": "previous_research",
        "type": "LuaTechnology",
        "mode": "[RW]",
        "doc": "The previous research if any."
      },
      "print": {
        "name": "print",
        "doc": "Print text to the chat console of all players on this force.   \n\n**Parameters**  \nmessage :: [LocalisedString](http://lua-api.factorio.com/latest/Concepts.html#LocalisedString)  \ncolor :: [Color](http://lua-api.factorio.com/latest/Concepts.html#Color) (optional)  \n\n**Note: ** Messages that are identical to a message sent in the last 60 ticks are not printed again.",
        "type": "function",
        "args": {
          "color": {
            "name": "color",
            "type": "Color",
            "doc": "color :: [Color](http://lua-api.factorio.com/latest/Concepts.html#Color) (optional)"
          },
          "message": {
            "name": "message",
            "type": "LocalisedString",
            "doc": "message :: [LocalisedString](http://lua-api.factorio.com/latest/Concepts.html#LocalisedString)"
          }
        }
      },
      "rechart": {
        "name": "rechart",
        "doc": "Force a rechart of the whole chart.",
        "type": "function"
      },
      "recipes": {
        "name": "recipes",
        "type": "CustomDictionary string → LuaRecipe",
        "mode": "[R]",
        "doc": "Recipes available to this force, indexed by their name.   \n\n**Example**  \nPrints the category of the given reci    \n````\ngame.player.print(game.player.force.recipes[\"transport-belt\"].category)````"
      },
      "research_all_technologies": {
        "name": "research_all_technologies",
        "doc": "Research all technologie    \n\n**Parameters**  \ninclude_disabled_prototypes (optional): If technologies that are explicitly disabled in the prototype are also researched. This defaults to false.",
        "args": {
          "include_disabled_prototypes": {
            "name": "include_disabled_prototypes",
            "doc": "include_disabled_prototypes (optional): If technologies that are explicitly disabled in the prototype are also researched. This defaults to false.",
            "type": "include_disabled_prototypes"
          }
        },
        "type": "function"
      },
      "research_enabled": {
        "name": "research_enabled",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Whether research is enabled for this force, see [LuaForce::enable_research](http://lua-api.factorio.com/latest/LuaForce.html#LuaForce.enable_research) and [LuaForce::disable_research](http://lua-api.factorio.com/latest/LuaForce.html#LuaForce.disable_research)"
      },
      "research_progress": {
        "name": "research_progress",
        "type": "double",
        "mode": "[RW]",
        "doc": "Progress of current research, as a number in range [0, 1]."
      },
      "research_queue": {
        "name": "research_queue",
        "type": "array of TechnologySpecification",
        "mode": "[RW]",
        "doc": "The research queue of this forc  \nReading this attribute gives an array of [LuaTechnology](http://lua-api.factorio.com/latest/LuaTechnology.html  \nTo write to this, the entire table must be written. Providing an empty table or ````\nnil````\nwill empty the research queue and cancel the current researc  \nWriting to this when the research queue is disabled will simply set the last research in the table as the current research.  \n\n**Note: ** The first research in the queue is the current research."
      },
      "research_queue_enabled": {
        "name": "research_queue_enabled",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "Whether the research queue is available for this force."
      },
      "reset": {
        "name": "reset",
        "doc": "Reset everything. All technologies are set to not researched, all modifiers are set to default values.",
        "type": "function"
      },
      "reset_evolution": {
        "name": "reset_evolution",
        "doc": "Resets evolution for this force to zero.",
        "type": "function"
      },
      "reset_recipes": {
        "name": "reset_recipes",
        "doc": "Load the original version of all recipes from the prototypes.",
        "type": "function"
      },
      "reset_technologies": {
        "name": "reset_technologies",
        "doc": "Load the original versions of technologies from prototypes. Preserves research state of technologies.",
        "type": "function"
      },
      "reset_technology_effects": {
        "name": "reset_technology_effects",
        "doc": "Reapplies all possible research effects, including unlocked recipes. Any custom changes are lost. Preserves research state of technologies.",
        "type": "function"
      },
      "rockets_launched": {
        "name": "rockets_launched",
        "type": "uint",
        "mode": "[RW]",
        "doc": "The number of rockets launche"
      },
      "set_ammo_damage_modifier": {
        "name": "set_ammo_damage_modifier",
        "type": "function",
        "args": {
          "ammo": {
            "name": "ammo",
            "type": "string",
            "doc": "ammo :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Ammo category"
          },
          "modifier": {
            "name": "modifier",
            "type": "double",
            "doc": "modifier :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double)"
          }
        },
        "doc": "**Parameters**  \nammo :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Ammo category  \nmodifier :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double)"
      },
      "set_cease_fire": {
        "name": "set_cease_fire",
        "doc": "Stop attacking members of a given force.   \n\n**Parameters**  \nother :: [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification)  \ncease_fire :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean): When ````\ntrue````\n, this force won't attack ````\nother````\n; otherwise it will.",
        "type": "function",
        "args": {
          "cease_fire": {
            "name": "cease_fire",
            "type": "boolean",
            "doc": "cease_fire :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean): When ````\ntrue````\n, this force won't attack ````\nother````\n; otherwise it will."
          },
          "other": {
            "name": "other",
            "type": "ForceSpecification",
            "doc": "other :: [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification)"
          }
        }
      },
      "set_friend": {
        "name": "set_friend",
        "doc": "Friends have unrestricted access to buildings and turrets won't fire at them.   \n\n**Parameters**  \nother :: [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification)  \nfriend :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean)",
        "type": "function",
        "args": {
          "friend": {
            "name": "friend",
            "type": "boolean",
            "doc": "friend :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean)"
          },
          "other": {
            "name": "other",
            "type": "ForceSpecification",
            "doc": "other :: [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification)"
          }
        }
      },
      "set_gun_speed_modifier": {
        "name": "set_gun_speed_modifier",
        "type": "function",
        "args": {
          "ammo": {
            "name": "ammo",
            "type": "string",
            "doc": "ammo :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Ammo category"
          },
          "modifier": {
            "name": "modifier",
            "type": "double",
            "doc": "modifier :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double)"
          }
        },
        "doc": "**Parameters**  \nammo :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Ammo category  \nmodifier :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double)"
      },
      "set_hand_crafting_disabled_for_recipe": {
        "name": "set_hand_crafting_disabled_for_recipe",
        "doc": "Sets if the given recipe can be hand-crafted. This is used to explicitly disable hand crafting a recipe - it won't allow hand-crafting otherwise not hand-craftable recipe    \n\n**Parameters**  \nrecipe :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) or [LuaRecipe](http://lua-api.factorio.com/latest/LuaRecipe.html)  \nhand_crafting_disabled :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean)",
        "type": "function",
        "args": {
          "hand_crafting_disabled": {
            "name": "hand_crafting_disabled",
            "type": "boolean",
            "doc": "hand_crafting_disabled :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean)"
          },
          "recipe": {
            "name": "recipe",
            "type": "string or LuaRecipe",
            "doc": "recipe :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) or [LuaRecipe](http://lua-api.factorio.com/latest/LuaRecipe.html)"
          }
        }
      },
      "set_item_launched": {
        "name": "set_item_launched",
        "doc": "Sets the count of a given item launched in rocket    \n\n**Parameters**  \nitem :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): The item to set  \ncount :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The count to set",
        "type": "function",
        "args": {
          "count": {
            "name": "count",
            "type": "uint",
            "doc": "count :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The count to set"
          },
          "item": {
            "name": "item",
            "type": "string",
            "doc": "item :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): The item to set"
          }
        }
      },
      "set_saved_technology_progress": {
        "name": "set_saved_technology_progress",
        "doc": "Sets the saved progress for the given technolog  \nThe technology must not be in progress, must not be completed, and the new progress must be &lt; 100    \n\n**Parameters**  \ntechnology :: [TechnologySpecification](http://lua-api.factorio.com/latest/Concepts.html#TechnologySpecification): The technology  \ndouble: Progress as a percent. Set to ````\nnil````\nto remove the saved progress.",
        "type": "function",
        "args": {
          "double": {
            "name": "double",
            "doc": "double: Progress as a percent. Set to ````\nnil````\nto remove the saved progress.",
            "type": "double"
          },
          "technology": {
            "name": "technology",
            "type": "TechnologySpecification",
            "doc": "technology :: [TechnologySpecification](http://lua-api.factorio.com/latest/Concepts.html#TechnologySpecification): The technology"
          }
        }
      },
      "set_spawn_position": {
        "name": "set_spawn_position",
        "type": "function",
        "args": {
          "position": {
            "name": "position",
            "type": "Position",
            "doc": "position :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): The new position on the given surface."
          },
          "surface": {
            "name": "surface",
            "type": "SurfaceSpecification",
            "doc": "surface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification): Surface to set the spawn position for."
          }
        },
        "doc": "**Parameters**  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): The new position on the given surface.  \nsurface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification): Surface to set the spawn position for."
      },
      "set_turret_attack_modifier": {
        "name": "set_turret_attack_modifier",
        "type": "function",
        "args": {
          "modifier": {
            "name": "modifier",
            "type": "double",
            "doc": "modifier :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double)"
          },
          "turret": {
            "name": "turret",
            "type": "string",
            "doc": "turret :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Turret prototype name"
          }
        },
        "doc": "**Parameters**  \nturret :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Turret prototype name  \nmodifier :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double)"
      },
      "share_chart": {
        "name": "share_chart",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "If sharing chart data is enabled for this force."
      },
      "stack_inserter_capacity_bonus": {
        "name": "stack_inserter_capacity_bonus",
        "type": "uint",
        "mode": "[RW]",
        "doc": "Number of items that can be transferred by stack inserters. When writing to this value, it must be &gt;= 0 and &lt;= 254."
      },
      "technologies": {
        "name": "technologies",
        "type": "CustomDictionary string → LuaTechnology",
        "mode": "[R]",
        "doc": "Technologies owned by this force, indexed by their name.   \n\n**Example**  \nResearches the technology for the player's for    \n````\ngame.player.force.technologies[\"steel-processing\"].researched = true````"
      },
      "train_braking_force_bonus": {
        "name": "train_braking_force_bonus",
        "type": "double",
        "mode": "[RW]"
      },
      "unchart_chunk": {
        "name": "unchart_chunk",
        "type": "function",
        "args": {
          "position": {
            "name": "position",
            "type": "ChunkPosition",
            "doc": "position :: [ChunkPosition](http://lua-api.factorio.com/latest/Concepts.html#ChunkPosition): The chunk position to unchart."
          },
          "surface": {
            "name": "surface",
            "type": "SurfaceSpecification",
            "doc": "surface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification): Surface to unchart on."
          }
        },
        "doc": "**Parameters**  \nposition :: [ChunkPosition](http://lua-api.factorio.com/latest/Concepts.html#ChunkPosition): The chunk position to unchart.  \nsurface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification): Surface to unchart on."
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      },
      "worker_robots_battery_modifier": {
        "name": "worker_robots_battery_modifier",
        "type": "double",
        "mode": "[RW]"
      },
      "worker_robots_speed_modifier": {
        "name": "worker_robots_speed_modifier",
        "type": "double",
        "mode": "[RW]"
      },
      "worker_robots_storage_bonus": {
        "name": "worker_robots_storage_bonus",
        "type": "double",
        "mode": "[RW]"
      },
      "zoom_to_world_blueprint_enabled": {
        "name": "zoom_to_world_blueprint_enabled",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "Ability to create new blueprints using empty blueprint item when using zoom-to-worl"
      },
      "zoom_to_world_deconstruction_planner_enabled": {
        "name": "zoom_to_world_deconstruction_planner_enabled",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "Ability to use deconstruction planner when using zoom-to-worl"
      },
      "zoom_to_world_enabled": {
        "name": "zoom_to_world_enabled",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "Ability to use zoom-to-world on ma"
      },
      "zoom_to_world_ghost_building_enabled": {
        "name": "zoom_to_world_ghost_building_enabled",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "Ability to build ghosts through blueprint or direct ghost placement, or \"mine\" ghosts when using zoom-to-worl"
      },
      "zoom_to_world_selection_tool_enabled": {
        "name": "zoom_to_world_selection_tool_enabled",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "Ability to use custom selection tools when using zoom-to-worl"
      }
    },
    "doc": "Count entities of given type."
  },
  "LuaFuelCategoryPrototype": {
    "name": "LuaFuelCategoryPrototype",
    "type": "LuaFuelCategoryPrototype",
    "inherits": [],
    "properties": {
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "localised_description": {
        "name": "localised_description",
        "type": "LocalisedString",
        "mode": "[R]"
      },
      "localised_name": {
        "name": "localised_name",
        "type": "LocalisedString",
        "mode": "[R]"
      },
      "name": {
        "name": "name",
        "type": "string",
        "mode": "[R]",
        "doc": "Name of this prototype."
      },
      "object_name": {
        "name": "object_name",
        "type": "string",
        "mode": "[R]",
        "doc": "The class name of this object."
      },
      "order": {
        "name": "order",
        "type": "string",
        "mode": "[R]",
        "doc": "Order string of this prototype."
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": ""
  },
  "LuaGameScript": {
    "name": "LuaGameScript",
    "type": "LuaGameScript",
    "inherits": [],
    "properties": {}
  },
  "LuaGenericOnOffControlBehavior": {
    "name": "LuaGenericOnOffControlBehavior",
    "type": "LuaGenericOnOffControlBehavior",
    "inherits": [
      "Inherited from LuaControlBehavior: get_circuit_network, type, entity"
    ],
    "properties": {
      "circuit_condition": {
        "name": "circuit_condition",
        "type": "CircuitConditionSpecification",
        "mode": "[RW]",
        "doc": "The circuit condition    \n\n**Note: ** ````\ncondition````\nmay be ````\nnil````\nin order to clear the circuit condition.  \n\n**Example**  \nTell an entity to be active (e.g. a lamp to be lit) when it receives a circuit signal of more than 4 cha  \nsignal    \n````\na_behavior.circuit_condition = {condition={comparator=\"&gt;\",  \n                                           first_signal={type=\"item\", name=\"rail-chain-signal\"},  \n                                           constant=4}}````"
      },
      "connect_to_logistic_network": {
        "name": "connect_to_logistic_network",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "````\ntrue````\nif this should connect to the logistic network."
      },
      "disabled": {
        "name": "disabled",
        "type": "boolean",
        "mode": "[R]",
        "doc": "If the entity is currently disabled because of the control behavior."
      },
      "entity": {
        "name": "entity",
        "type": "LuaEntity",
        "mode": "[R]",
        "doc": "The entity this control behavior belongs to."
      },
      "get_circuit_network": {
        "name": "get_circuit_network",
        "type": "function",
        "returns": "LuaCircuitNetwork",
        "args": {
          "circuit_connector": {
            "name": "circuit_connector",
            "type": "defines.circuit_connector_id",
            "doc": "circuit_connector :: [defines.circuit_connector_id](http://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional): The connector to get circuit network fo  \nMust be specified for entities with more than one circuit network connector."
          },
          "wire": {
            "name": "wire",
            "type": "defines.wire_type",
            "doc": "wire :: [defines.wire_type](http://lua-api.factorio.com/latest/defines.html#defines.wire_type): Wire color of the network connected to this entity."
          }
        },
        "doc": "**Parameters**  \nwire :: [defines.wire_type](http://lua-api.factorio.com/latest/defines.html#defines.wire_type): Wire color of the network connected to this entity.  \ncircuit_connector :: [defines.circuit_connector_id](http://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional): The connector to get circuit network fo  \nMust be specified for entities with more than one circuit network connector.  \n\n**Return value**  \nThe circuit network or nil."
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "logistic_condition": {
        "name": "logistic_condition",
        "type": "CircuitConditionSpecification",
        "mode": "[RW]",
        "doc": "The logistic condition    \n\n**Note: ** ````\ncondition````\nmay be ````\nnil````\nin order to clear the logistic condition.  \n\n**Example**  \nTell an entity to be active (e.g. a lamp to be lit) when the logistics network it's connected to has more th  \n4 chain signal    \n````\na_behavior.logistic_condition = {condition={comparator=\"&gt;\",  \n                                            first_signal={type=\"item\", name=\"rail-chain-signal\"},  \n                                            constant=4}}````"
      },
      "object_name": {
        "name": "object_name",
        "type": "string",
        "mode": "[R]",
        "doc": "The class name of this object."
      },
      "type": {
        "name": "type",
        "type": "defines.control_behavior.type",
        "mode": "[R]",
        "doc": "The concrete type of this control behavior."
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": "An abstract base class for behaviors that support switching the entity on or off based on some condition."
  },
  "LuaGroup": {
    "name": "LuaGroup",
    "type": "LuaGroup",
    "inherits": [],
    "properties": {
      "group": {
        "name": "group",
        "type": "LuaGroup",
        "mode": "[R]",
        "doc": "The parent group if any; ````\nnil````\nif none."
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "localised_name": {
        "name": "localised_name",
        "type": "LocalisedString",
        "mode": "[R]",
        "doc": "Localised name of the grou"
      },
      "name": {
        "name": "name",
        "type": "string",
        "mode": "[R]"
      },
      "object_name": {
        "name": "object_name",
        "type": "string",
        "mode": "[R]",
        "doc": "The class name of this object."
      },
      "order": {
        "name": "order",
        "type": "string",
        "mode": "[R]"
      },
      "order_in_recipe": {
        "name": "order_in_recipe",
        "type": "string",
        "mode": "[R]",
        "doc": "The additional order value used in recipe orderin    \n\n**Note: ** Can only be used on groups, not on subgroups."
      },
      "subgroups": {
        "name": "subgroups",
        "type": "array of LuaGroup",
        "mode": "[R]",
        "doc": "Subgroups of this group.   \n\n**Note: ** Can only be used on groups, not on subgroups."
      },
      "type": {
        "name": "type",
        "type": "string",
        "mode": "[R]"
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": ""
  },
  "LuaGui": {
    "name": "LuaGui",
    "type": "LuaGui",
    "inherits": [],
    "properties": {
      "center": {
        "name": "center",
        "type": "LuaGuiElement",
        "mode": "[R]",
        "doc": "The center part of the GUI. It is a flow elemen"
      },
      "children": {
        "name": "children",
        "type": "dictionary string → LuaGuiElement",
        "mode": "[R]",
        "doc": "The children GUI elements mapped by name &lt;&gt; elemen"
      },
      "goal": {
        "name": "goal",
        "type": "LuaGuiElement",
        "mode": "[R]",
        "doc": "The flow used in the objectives window. It is a flow elemen  \nThe objectives window is only visible when the flow is not empty or the objective text is se"
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "is_valid_sprite_path": {
        "name": "is_valid_sprite_path",
        "type": "function",
        "doc": "Returns ````\ntrue````\nif sprite_path is valid and contains loaded sprite, otherwise ````\nfalse````\n. Sprite path of type ````\nfile````\ndoesn't validate if file exist    \n\n**Parameters**  \nsprite_path :: [SpritePath](http://lua-api.factorio.com/latest/Concepts.html#SpritePath): Path to a image.",
        "returns": "boolean",
        "args": {
          "sprite_path": {
            "name": "sprite_path",
            "type": "SpritePath",
            "doc": "sprite_path :: [SpritePath](http://lua-api.factorio.com/latest/Concepts.html#SpritePath): Path to a image."
          }
        }
      },
      "left": {
        "name": "left",
        "type": "LuaGuiElement",
        "mode": "[R]",
        "doc": "The left part of the GUI. It is a flow element inside a scroll pane elemen"
      },
      "object_name": {
        "name": "object_name",
        "type": "string",
        "mode": "[R]",
        "doc": "The class name of this object."
      },
      "player": {
        "name": "player",
        "type": "LuaPlayer",
        "mode": "[R]",
        "doc": "The player who owns this gui."
      },
      "relative": {
        "name": "relative",
        "type": "LuaGuiElement",
        "mode": "[R]",
        "doc": "For showing a GUI somewhere relative to one of the game GUIs. It is an empty-widget elemen"
      },
      "screen": {
        "name": "screen",
        "type": "LuaGuiElement",
        "mode": "[R]",
        "doc": "For showing a GUI somewhere on the entire screen. It is an empty-widget elemen"
      },
      "top": {
        "name": "top",
        "type": "LuaGuiElement",
        "mode": "[R]",
        "doc": "The top part of the GUI. It is a flow element inside a scroll pane elemen"
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": "Returns true if sprite_path is valid and contains loaded sprite, otherwise false. Sprite path of type file doesn't validate if file exists."
  },
  "LuaGuiElement": {
    "name": "LuaGuiElement",
    "type": "LuaGuiElement",
    "inherits": [],
    "properties": {}
  },
  "LuaHeatEnergySourcePrototype": {
    "name": "LuaHeatEnergySourcePrototype",
    "type": "LuaHeatEnergySourcePrototype",
    "inherits": [],
    "properties": {
      "connections": {
        "name": "connections",
        "mode": "[R]",
        "type": "array of Connection"
      },
      "default_temperature": {
        "name": "default_temperature",
        "type": "double",
        "mode": "[R]"
      },
      "emissions": {
        "name": "emissions",
        "type": "double",
        "mode": "[R]"
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "max_temperature": {
        "name": "max_temperature",
        "type": "double",
        "mode": "[R]"
      },
      "max_transfer": {
        "name": "max_transfer",
        "type": "double",
        "mode": "[R]"
      },
      "min_temperature_gradient": {
        "name": "min_temperature_gradient",
        "type": "double",
        "mode": "[R]"
      },
      "min_working_temperature": {
        "name": "min_working_temperature",
        "type": "double",
        "mode": "[R]"
      },
      "minimum_glow_temperature": {
        "name": "minimum_glow_temperature",
        "type": "double",
        "mode": "[R]"
      },
      "object_name": {
        "name": "object_name",
        "type": "string",
        "mode": "[R]",
        "doc": "The class name of this object."
      },
      "render_no_network_icon": {
        "name": "render_no_network_icon",
        "type": "boolean",
        "mode": "[R]"
      },
      "render_no_power_icon": {
        "name": "render_no_power_icon",
        "type": "boolean",
        "mode": "[R]"
      },
      "specific_heat": {
        "name": "specific_heat",
        "type": "double",
        "mode": "[R]"
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": ""
  },
  "LuaInserterControlBehavior": {
    "name": "LuaInserterControlBehavior",
    "type": "LuaInserterControlBehavior",
    "inherits": [
      "Inherited from LuaControlBehavior: get_circuit_network, type, entity",
      "Inherited from LuaGenericOnOffControlBehavior: disabled, circuit_condition, logistic_condition, connect_to_logistic_network"
    ],
    "properties": {
      "circuit_condition": {
        "name": "circuit_condition",
        "type": "CircuitConditionSpecification",
        "mode": "[RW]",
        "doc": "The circuit condition    \n\n**Note: ** ````\ncondition````\nmay be ````\nnil````\nin order to clear the circuit condition.  \n\n**Example**  \nTell an entity to be active (e.g. a lamp to be lit) when it receives a circuit signal of more than 4 cha  \nsignal    \n````\na_behavior.circuit_condition = {condition={comparator=\"&gt;\",  \n                                           first_signal={type=\"item\", name=\"rail-chain-signal\"},  \n                                           constant=4}}````"
      },
      "circuit_hand_read_mode": {
        "name": "circuit_hand_read_mode",
        "type": "defines.control_behavior.inserter.hand_read_mode",
        "mode": "[RW]",
        "doc": "The hand read mode for the inserter."
      },
      "circuit_mode_of_operation": {
        "name": "circuit_mode_of_operation",
        "type": "defines.control_behavior.inserter.circuit_mode_of_operation",
        "mode": "[RW]",
        "doc": "The circuit mode of operations for the inserter."
      },
      "circuit_read_hand_contents": {
        "name": "circuit_read_hand_contents",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "````\ntrue````\nif the contents of the inserter hand should be sent to the circuit network"
      },
      "circuit_set_stack_size": {
        "name": "circuit_set_stack_size",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "If the stack size of the inserter is set through the circuit network or no"
      },
      "circuit_stack_control_signal": {
        "name": "circuit_stack_control_signal",
        "type": "SignalID",
        "mode": "[RW]",
        "doc": "The signal used to set the stack size of the inserte"
      },
      "connect_to_logistic_network": {
        "name": "connect_to_logistic_network",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "````\ntrue````\nif this should connect to the logistic network."
      },
      "disabled": {
        "name": "disabled",
        "type": "boolean",
        "mode": "[R]",
        "doc": "If the entity is currently disabled because of the control behavior."
      },
      "entity": {
        "name": "entity",
        "type": "LuaEntity",
        "mode": "[R]",
        "doc": "The entity this control behavior belongs to."
      },
      "get_circuit_network": {
        "name": "get_circuit_network",
        "type": "function",
        "returns": "LuaCircuitNetwork",
        "args": {
          "circuit_connector": {
            "name": "circuit_connector",
            "type": "defines.circuit_connector_id",
            "doc": "circuit_connector :: [defines.circuit_connector_id](http://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional): The connector to get circuit network fo  \nMust be specified for entities with more than one circuit network connector."
          },
          "wire": {
            "name": "wire",
            "type": "defines.wire_type",
            "doc": "wire :: [defines.wire_type](http://lua-api.factorio.com/latest/defines.html#defines.wire_type): Wire color of the network connected to this entity."
          }
        },
        "doc": "**Parameters**  \nwire :: [defines.wire_type](http://lua-api.factorio.com/latest/defines.html#defines.wire_type): Wire color of the network connected to this entity.  \ncircuit_connector :: [defines.circuit_connector_id](http://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional): The connector to get circuit network fo  \nMust be specified for entities with more than one circuit network connector.  \n\n**Return value**  \nThe circuit network or nil."
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "logistic_condition": {
        "name": "logistic_condition",
        "type": "CircuitConditionSpecification",
        "mode": "[RW]",
        "doc": "The logistic condition    \n\n**Note: ** ````\ncondition````\nmay be ````\nnil````\nin order to clear the logistic condition.  \n\n**Example**  \nTell an entity to be active (e.g. a lamp to be lit) when the logistics network it's connected to has more th  \n4 chain signal    \n````\na_behavior.logistic_condition = {condition={comparator=\"&gt;\",  \n                                            first_signal={type=\"item\", name=\"rail-chain-signal\"},  \n                                            constant=4}}````"
      },
      "object_name": {
        "name": "object_name",
        "type": "string",
        "mode": "[R]",
        "doc": "The class name of this object."
      },
      "type": {
        "name": "type",
        "type": "defines.control_behavior.type",
        "mode": "[R]",
        "doc": "The concrete type of this control behavior."
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": "Control behavior for inserters."
  },
  "LuaInventory": {
    "name": "LuaInventory",
    "type": "LuaInventory",
    "inherits": [],
    "properties": {
      "can_insert": {
        "name": "can_insert",
        "type": "function",
        "doc": "Can at least some items be inserted?   \n\n**Parameters**  \nitems :: [ItemStackSpecification](http://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification): Items that would be inserted.  \n\n**Return value**  \n````\ntrue````\nif at least a part of the given items could be inserted into this inventory.",
        "returns": "boolean",
        "args": {
          "items": {
            "name": "items",
            "type": "ItemStackSpecification",
            "doc": "items :: [ItemStackSpecification](http://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification): Items that would be inserted."
          }
        }
      },
      "can_set_filter": {
        "name": "can_set_filter",
        "type": "function",
        "doc": "If the given inventory slot filter can be set to the given filter    \n\n**Parameters**  \nindex :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The item stack index  \nfilter :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): The item name of the filter",
        "returns": "boolean",
        "args": {
          "filter": {
            "name": "filter",
            "type": "string",
            "doc": "filter :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): The item name of the filter"
          },
          "index": {
            "name": "index",
            "type": "uint",
            "doc": "index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The item stack index"
          }
        }
      },
      "clear": {
        "name": "clear",
        "doc": "Make this inventory empty.",
        "type": "function"
      },
      "count_empty_stacks": {
        "name": "count_empty_stacks",
        "type": "function",
        "doc": "Counts the number of empty stack    \n\n**Parameters**  \ninclude_filtered :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If true, filtered slots will be included. Defaults to false.",
        "returns": "uint",
        "args": {
          "include_filtered": {
            "name": "include_filtered",
            "type": "boolean",
            "doc": "include_filtered :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If true, filtered slots will be included. Defaults to false."
          }
        }
      },
      "destroy": {
        "name": "destroy",
        "doc": "Destroys this inventor    \n\n**Note: ** Only inventories created by [LuaGameScript::create_inventory](http://lua-api.factorio.com/latest/LuaGameScript.html#LuaGameScript.create_inventory) can be destroyed this way.",
        "type": "function"
      },
      "entity_owner": {
        "name": "entity_owner",
        "type": "LuaEntity",
        "mode": "[R]",
        "doc": "The entity that owns this inventory or ````\nnil````\nif this isn't owned by an entity."
      },
      "equipment_owner": {
        "name": "equipment_owner",
        "type": "LuaEquipment",
        "mode": "[R]",
        "doc": "The equipment that owns this inventory or ````\nnil````\nif this isn't owned by an equipment."
      },
      "find_empty_stack": {
        "name": "find_empty_stack",
        "type": "function",
        "doc": "Finds the first empty stack. Filtered slots are excluded unless a filter item is give    \n\n**Parameters**  \nitem :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): If given, empty stacks that are filtered for this item will be included.  \n\n**Return value**  \nor ````\nnil````\n.  \n\n**Note: ** This will also return the stack index if one is found that matches as a second return value.",
        "returns": "LuaItemStack",
        "args": {
          "item": {
            "name": "item",
            "type": "string",
            "doc": "item :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): If given, empty stacks that are filtered for this item will be included."
          }
        }
      },
      "find_item_stack": {
        "name": "find_item_stack",
        "type": "function",
        "doc": "Gets the first LuaItemStack in the inventory that matches the given item nam    \n\n**Parameters**  \nitem :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): The item name to find  \n\n**Return value**  \nor ````\nnil````\n.  \n\n**Note: ** This will also return the stack index if one is found that matches as a second return value.",
        "returns": "LuaItemStack",
        "args": {
          "item": {
            "name": "item",
            "type": "string",
            "doc": "item :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): The item name to find"
          }
        }
      },
      "get_bar": {
        "name": "get_bar",
        "type": "function",
        "doc": "Get the current bar. This is the index at which the red area starts.   \n\n**Note: ** Only useable if this inventory supports having a bar.",
        "returns": "uint"
      },
      "get_contents": {
        "name": "get_contents",
        "type": "function",
        "doc": "Get counts of all items in this inventory.   \n\n**Return value**  \nThe counts, indexed by item names.",
        "returns": "dictionary string → uint"
      },
      "get_filter": {
        "name": "get_filter",
        "type": "function",
        "doc": "Gets the filter for the given item stack index    \n\n**Parameters**  \nindex :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The item stack index  \n\n**Return value**  \nThe current filter or nil if none.",
        "returns": "string",
        "args": {
          "index": {
            "name": "index",
            "type": "uint",
            "doc": "index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The item stack index"
          }
        }
      },
      "get_insertable_count": {
        "name": "get_insertable_count",
        "doc": "Gets the number of the given item that can be inserted into this inventor    \n\n**Parameters**  \nitem :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): The item to check.  \n\n**Note: ** This is a \"best guess\" number; things like assembling machine filtered slots, module slots, items with durability, and items with mixed health will cause the result to be inaccurate.  \n\n**Note: ** The main use for this is in checking how many of a basic item can fit into a basic inventory.  \n\n**Note: ** This accounts for the 'bar' on the inventory.",
        "type": "function",
        "args": {
          "item": {
            "name": "item",
            "type": "string",
            "doc": "item :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): The item to check."
          }
        }
      },
      "get_item_count": {
        "name": "get_item_count",
        "type": "function",
        "doc": "Get the number of all or some items in this inventory.   \n\n**Parameters**  \nitem :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): Prototype name of the item to count. If not specified, count all items.",
        "returns": "uint",
        "args": {
          "item": {
            "name": "item",
            "type": "string",
            "doc": "item :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): Prototype name of the item to count. If not specified, count all items."
          }
        }
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "index": {
        "name": "index",
        "type": "defines.inventory",
        "mode": "[R]",
        "doc": "The inventory index this inventory uses, or ````\nnil````\nif the inventory doesn't have an index."
      },
      "insert": {
        "name": "insert",
        "type": "function",
        "doc": "Insert items into this inventory.   \n\n**Parameters**  \nitems :: [ItemStackSpecification](http://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification): Items to insert.  \n\n**Return value**  \nNumber of items actually inserted.",
        "returns": "uint",
        "args": {
          "items": {
            "name": "items",
            "type": "ItemStackSpecification",
            "doc": "items :: [ItemStackSpecification](http://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification): Items to insert."
          }
        }
      },
      "is_empty": {
        "name": "is_empty",
        "type": "function",
        "doc": "Does this inventory contain nothing?",
        "returns": "boolean"
      },
      "is_filtered": {
        "name": "is_filtered",
        "type": "function",
        "doc": "If this inventory supports filters and has at least 1 filter se",
        "returns": "boolean"
      },
      "mod_owner": {
        "name": "mod_owner",
        "type": "string",
        "mode": "[R]",
        "doc": "The mod that owns this inventory or ````\nnil````\nif this isn't owned by a mod."
      },
      "object_name": {
        "name": "object_name",
        "type": "string",
        "mode": "[R]",
        "doc": "The class name of this object."
      },
      "operator []": {
        "name": "operator []",
        "type": "LuaItemStack",
        "mode": "[R]",
        "doc": "The indexing operator    \n\n**Example**  \nWill get the first item in the player's inventor    \n````\ngame.player.get_main_inventory()[1]````"
      },
      "operator #": {
        "name": "operator #",
        "type": "uint",
        "mode": "[R]",
        "doc": "Get the number of slots in this inventory    \n\n**Example**  \nWill print the number of slots in the player's main inventor    \n````\ngame.player.print(#game.player.get_main_inventory())````"
      },
      "player_owner": {
        "name": "player_owner",
        "type": "LuaPlayer",
        "mode": "[R]",
        "doc": "The player that owns this inventory or ````\nnil````\nif this isn't owned by a player."
      },
      "remove": {
        "name": "remove",
        "type": "function",
        "doc": "Remove items from this inventory.   \n\n**Parameters**  \nitems :: [ItemStackSpecification](http://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification): Items to remove.  \n\n**Return value**  \nNumber of items actually removed.",
        "returns": "uint",
        "args": {
          "items": {
            "name": "items",
            "type": "ItemStackSpecification",
            "doc": "items :: [ItemStackSpecification](http://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification): Items to remove."
          }
        }
      },
      "resize": {
        "name": "resize",
        "doc": "Resizes the inventor    \n\n**Parameters**  \nsize :: [uint16](http://lua-api.factorio.com/latest/Builtin-Types.html#uint16): New size of a inventory  \n\n**Note: ** Items in slots beyond the new capacity are deleted.  \n\n**Note: ** Only inventories created by [LuaGameScript::create_inventory](http://lua-api.factorio.com/latest/LuaGameScript.html#LuaGameScript.create_inventory) can be resized.",
        "type": "function",
        "args": {
          "size": {
            "name": "size",
            "type": "uint16",
            "doc": "size :: [uint16](http://lua-api.factorio.com/latest/Builtin-Types.html#uint16): New size of a inventory"
          }
        }
      },
      "set_bar": {
        "name": "set_bar",
        "doc": "Set the current bar.   \n\n**Parameters**  \nbar :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional): The new limit. Omitting this parameter will clear the limit.  \n\n**Note: ** Only useable if this inventory supports having a bar.",
        "type": "function",
        "args": {
          "bar": {
            "name": "bar",
            "type": "uint",
            "doc": "bar :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional): The new limit. Omitting this parameter will clear the limit."
          }
        }
      },
      "set_filter": {
        "name": "set_filter",
        "type": "function",
        "doc": "Sets the filter for the given item stack index    \n\n**Parameters**  \nindex :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The item stack index  \nfilter :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): The new filter or nil to erase the filter  \n\n**Return value**  \nIf the filter was allowed to be set.  \n\n**Note: ** Some inventory slots don't allow some filters (gun ammo can't be filtered for non-ammo).",
        "returns": "boolean",
        "args": {
          "filter": {
            "name": "filter",
            "type": "string",
            "doc": "filter :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): The new filter or nil to erase the filter"
          },
          "index": {
            "name": "index",
            "type": "uint",
            "doc": "index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The item stack index"
          }
        }
      },
      "sort_and_merge": {
        "name": "sort_and_merge",
        "doc": "Sorts and merges the items in this inventory.",
        "type": "function"
      },
      "supports_bar": {
        "name": "supports_bar",
        "type": "function",
        "doc": "Does this inventory support a bar? Bar is the draggable red thing, found for example on chest  \nthat limits the portion of the inventory that may be manipulated by machines    \n\n**Note: ** \"Supporting a bar\" doesn't mean that the bar is set to some nontrivial value. Supporting a b  \nmeans the inventory supports having this limit at all. The character's inventory is   \nexample of an inventory without a bar; the wooden chest's inventory is an example of o  \nwith a bar.",
        "returns": "boolean"
      },
      "supports_filters": {
        "name": "supports_filters",
        "type": "function",
        "doc": "If this inventory supports filter",
        "returns": "boolean"
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": "Make this inventory empty."
  },
  "LuaItemPrototype": {
    "name": "LuaItemPrototype",
    "type": "LuaItemPrototype",
    "inherits": [],
    "properties": {
      "alt_entity_filter_mode": {
        "name": "alt_entity_filter_mode",
        "type": "string",
        "mode": "[R]",
        "doc": "The alt entity filter mode used by this selection too    \n_Can only be used if this is SelectionTool_"
      },
      "alt_entity_filters": {
        "name": "alt_entity_filters",
        "type": "dictionary string → LuaEntityPrototype",
        "mode": "[R]",
        "doc": "The alt entity filters used by this selection tool indexed by entity nam    \n_Can only be used if this is SelectionTool_"
      },
      "alt_entity_type_filters": {
        "name": "alt_entity_type_filters",
        "type": "dictionary string → boolean",
        "mode": "[R]",
        "doc": "The alt entity type filters used by this selection tool indexed by entity typ    \n\n**Note: ** The boolean value is meaningless and is used to allow easy lookup if a type exists in the dictionary.  \n_Can only be used if this is SelectionTool_"
      },
      "alt_selection_border_color": {
        "name": "alt_selection_border_color",
        "type": "Color",
        "mode": "[R]",
        "doc": "The color used when doing alt selection with this selection tool prototyp    \n_Can only be used if this is SelectionTool_"
      },
      "alt_selection_cursor_box_type": {
        "name": "alt_selection_cursor_box_type",
        "type": "string",
        "mode": "[R]",
        "doc": "_Can only be used if this is SelectionTool_"
      },
      "alt_selection_mode_flags": {
        "name": "alt_selection_mode_flags",
        "type": "SelectionModeFlags",
        "mode": "[R]",
        "doc": "Flags that affect which entities will be selected during alternate selection.  \n_Can only be used if this is SelectionTool_"
      },
      "alt_tile_filter_mode": {
        "name": "alt_tile_filter_mode",
        "type": "string",
        "mode": "[R]",
        "doc": "The alt tile filter mode used by this selection too    \n_Can only be used if this is SelectionTool_"
      },
      "alt_tile_filters": {
        "name": "alt_tile_filters",
        "type": "dictionary string → LuaTilePrototype",
        "mode": "[R]",
        "doc": "The alt tile filters used by this selection tool indexed by tile nam    \n_Can only be used if this is SelectionTool_"
      },
      "always_include_tiles": {
        "name": "always_include_tiles",
        "type": "boolean",
        "mode": "[R]",
        "doc": "If tiles area always included when doing selection with this selection tool prototyp    \n_Can only be used if this is SelectionTool_"
      },
      "attack_parameters": {
        "name": "attack_parameters",
        "type": "AttackParameters",
        "mode": "[R]",
        "doc": "The gun attack parameters or ````\nnil````\nif not a gun item prototyp"
      },
      "burnt_result": {
        "name": "burnt_result",
        "type": "LuaItemPrototype",
        "mode": "[R]",
        "doc": "The result of burning this item as fuel or ````\nnil````\n."
      },
      "can_be_mod_opened": {
        "name": "can_be_mod_opened",
        "type": "boolean",
        "mode": "[R]",
        "doc": "If this item can be mod-opene"
      },
      "capsule_action": {
        "name": "capsule_action",
        "type": "CapsuleAction",
        "mode": "[R]",
        "doc": "The capsule action for this capsule item prototype or ````\nnil````\nif this isn't a capsule item prototyp"
      },
      "category": {
        "name": "category",
        "type": "string",
        "mode": "[R]",
        "doc": "The name of a [LuaModuleCategoryPrototype](http://lua-api.factorio.com/latest/LuaModuleCategoryPrototype.html). Used when upgrading modules: Ctrl + click modules into an entity and it will replace lower tier modules of the same category with higher tier module    \n_Can only be used if this is ModuleItem_"
      },
      "curved_rail": {
        "name": "curved_rail",
        "type": "LuaEntityPrototype",
        "mode": "[R]",
        "doc": "The curved rail prototype used for this rail planner prototyp    \n_Can only be used if this is RailPlanner_"
      },
      "default_label_color": {
        "name": "default_label_color",
        "type": "Color",
        "mode": "[R]",
        "doc": "The default label color used for this item with label. ````\nnil````\nif not defined or if this isn't an item with labe    \n_Can only be used if this is ItemWithLabel_"
      },
      "default_request_amount": {
        "name": "default_request_amount",
        "type": "uint",
        "mode": "[R]",
        "doc": "The default request value."
      },
      "draw_label_for_cursor_render": {
        "name": "draw_label_for_cursor_render",
        "type": "boolean",
        "mode": "[R]",
        "doc": "If true, and this item with label has a label it is drawn in place of the normal number when held in the curso    \n_Can only be used if this is ItemWithLabel_"
      },
      "durability": {
        "name": "durability",
        "type": "double",
        "mode": "[R]",
        "doc": "The durability of this tool item or ````\nnil````\nif not a tool ite    \n_Can only be used if this is ToolItem_"
      },
      "durability_description_key": {
        "name": "durability_description_key",
        "type": "string",
        "mode": "[R]",
        "doc": "The durability message key used when displaying the durability of this too    \n_Can only be used if this is ToolItem_"
      },
      "entity_filter_mode": {
        "name": "entity_filter_mode",
        "type": "string",
        "mode": "[R]",
        "doc": "The entity filter mode used by this selection too    \n_Can only be used if this is SelectionTool_"
      },
      "entity_filter_slots": {
        "name": "entity_filter_slots",
        "type": "uint",
        "mode": "[R]",
        "doc": "The number of entity filters this deconstruction item has or ````\nnil````\nif this isn't a deconstruction item prototyp    \n_Can only be used if this is DeconstructionItem_"
      },
      "entity_filters": {
        "name": "entity_filters",
        "type": "dictionary string → LuaEntityPrototype",
        "mode": "[R]",
        "doc": "The entity filters used by this selection tool indexed by entity nam    \n_Can only be used if this is SelectionTool_"
      },
      "entity_type_filters": {
        "name": "entity_type_filters",
        "type": "dictionary string → boolean",
        "mode": "[R]",
        "doc": "The entity type filters used by this selection tool indexed by entity typ    \n\n**Note: ** The boolean value is meaningless and is used to allow easy lookup if a type exists in the dictionary.  \n_Can only be used if this is SelectionTool_"
      },
      "equipment_grid": {
        "name": "equipment_grid",
        "type": "LuaEquipmentGridPrototype",
        "mode": "[R]",
        "doc": "The prototype of this armor equipment grid or ````\nnil````\nif none or this is not an armor ite"
      },
      "extend_inventory_by_default": {
        "name": "extend_inventory_by_default",
        "type": "boolean",
        "mode": "[R]",
        "doc": "If this item with inventory extends the inventory it resides in by defaul    \n_Can only be used if this is ItemWithInventory_"
      },
      "filter_mode": {
        "name": "filter_mode",
        "type": "string",
        "mode": "[R]",
        "doc": "The filter mode used by this item with inventor    \n_Can only be used if this is ItemWithInventory_"
      },
      "flags": {
        "name": "flags",
        "type": "ItemPrototypeFlags",
        "mode": "[R]",
        "doc": "The item prototype flags for this item prototype"
      },
      "fuel_acceleration_multiplier": {
        "name": "fuel_acceleration_multiplier",
        "type": "double",
        "mode": "[R]",
        "doc": "The acceleration multiplier when this item is used as fuel in a vehicle."
      },
      "fuel_category": {
        "name": "fuel_category",
        "type": "string",
        "mode": "[R]",
        "doc": "The fuel category or ````\nnil````\n."
      },
      "fuel_emissions_multiplier": {
        "name": "fuel_emissions_multiplier",
        "type": "double",
        "mode": "[R]",
        "doc": "The emissions multiplier if this is used as fuel."
      },
      "fuel_top_speed_multiplier": {
        "name": "fuel_top_speed_multiplier",
        "type": "double",
        "mode": "[R]",
        "doc": "The fuel top speed multiplier when this item is used as fuel in a vehicle."
      },
      "fuel_value": {
        "name": "fuel_value",
        "type": "float",
        "mode": "[R]",
        "doc": "Fuel value when burned."
      },
      "get_ammo_type": {
        "name": "get_ammo_type",
        "type": "function",
        "doc": "Type of this ammo prototype or ````\nnil````\nif this is not an ammo prototyp    \n\n**Parameters**  \nammo_source_type :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): \"default\", \"player\", \"turret\", or \"vehicle\"",
        "returns": "AmmoType",
        "args": {
          "ammo_source_type": {
            "name": "ammo_source_type",
            "type": "string",
            "doc": "ammo_source_type :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): \"default\", \"player\", \"turret\", or \"vehicle\""
          }
        }
      },
      "group": {
        "name": "group",
        "type": "LuaGroup",
        "mode": "[R]",
        "doc": "The group this prototype belongs to."
      },
      "has_flag": {
        "name": "has_flag",
        "type": "function",
        "doc": "Does this prototype have a flag enable  \nAny other value will cause an erro    \n\n**Parameters**  \nflag :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): The flag to check. Can be one of [ItemPrototypeFlags](http://lua-api.factorio.com/latest/Concepts.html#ItemPrototypeFlags)",
        "returns": "boolean",
        "args": {
          "flag": {
            "name": "flag",
            "type": "string",
            "doc": "flag :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): The flag to check. Can be one of [ItemPrototypeFlags](http://lua-api.factorio.com/latest/Concepts.html#ItemPrototypeFlags)"
          }
        }
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "infinite": {
        "name": "infinite",
        "type": "boolean",
        "mode": "[R]",
        "doc": "If this tool item has infinite durability. ````\nnil````\nif not a tool type ite    \n_Can only be used if this is ToolItem_"
      },
      "insertion_priority_mode": {
        "name": "insertion_priority_mode",
        "type": "string",
        "mode": "[R]",
        "doc": "The insertion priority mode used by this item with inventor    \n_Can only be used if this is ItemWithInventory_"
      },
      "inventory_size": {
        "name": "inventory_size",
        "type": "uint",
        "mode": "[R]",
        "doc": "The main inventory size for item-with-inventory-prototype. ````\nnil````\nif not an item-with-inventory-prototyp    \n_Can only be used if this is ItemWithInventoryPrototype_"
      },
      "inventory_size_bonus": {
        "name": "inventory_size_bonus",
        "type": "uint",
        "mode": "[R]",
        "doc": "The inventory size bonus for this armor prototype. ````\nnil````\nif this isn't an armor prototyp    \n_Can only be used if this is ArmorPrototype_"
      },
      "item_filters": {
        "name": "item_filters",
        "type": "dictionary string → LuaItemPrototype",
        "mode": "[R]",
        "doc": "_Can only be used if this is ItemWithInventory_"
      },
      "item_group_filters": {
        "name": "item_group_filters",
        "type": "dictionary string → LuaGroup",
        "mode": "[R]",
        "doc": "_Can only be used if this is ItemWithInventory_"
      },
      "item_subgroup_filters": {
        "name": "item_subgroup_filters",
        "type": "dictionary string → LuaGroup",
        "mode": "[R]",
        "doc": "_Can only be used if this is ItemWithInventory_"
      },
      "limitation_message_key": {
        "name": "limitation_message_key",
        "type": "string",
        "mode": "[R]",
        "doc": "The limitation message key used when the player attempts to use this modules in some place it's not allowe    \n_Can only be used if this is ModuleItem_"
      },
      "limitations": {
        "name": "limitations",
        "type": "array of string",
        "mode": "[R]",
        "doc": "An array of recipe names this module is allowed to work wit  \nEmpty when all recipes are allowe    \n_Can only be used if this is ModuleItem_"
      },
      "localised_description": {
        "name": "localised_description",
        "type": "LocalisedString",
        "mode": "[R]"
      },
      "localised_filter_message": {
        "name": "localised_filter_message",
        "type": "LocalisedString",
        "mode": "[R]",
        "doc": "The localised string used when the player attempts to put items into this item with inventory that aren't allowe    \n_Can only be used if this is ItemWithInventory_"
      },
      "localised_name": {
        "name": "localised_name",
        "type": "LocalisedString",
        "mode": "[R]"
      },
      "magazine_size": {
        "name": "magazine_size",
        "type": "float",
        "mode": "[R]",
        "doc": "Size of full magazine; ````\nnil````\nif this is not an ammo item."
      },
      "mapper_count": {
        "name": "mapper_count",
        "type": "uint",
        "mode": "[R]",
        "doc": "How many filters an upgrade item has. ````\nnil````\nif not a upgrade ite    \n_Can only be used if this is UpgradeItem_"
      },
      "module_effects": {
        "name": "module_effects",
        "type": "Effects",
        "mode": "[R]",
        "doc": "Effects of this module; ````\nnil````\nif this is not a module. It is a dictionary indexed by the effect typ    \n_Can only be used if this is ModuleItem_"
      },
      "name": {
        "name": "name",
        "type": "string",
        "mode": "[R]",
        "doc": "Name of this prototype."
      },
      "object_name": {
        "name": "object_name",
        "type": "string",
        "mode": "[R]",
        "doc": "The class name of this object."
      },
      "order": {
        "name": "order",
        "type": "string",
        "mode": "[R]",
        "doc": "Order string."
      },
      "place_as_equipment_result": {
        "name": "place_as_equipment_result",
        "type": "LuaEquipmentPrototype",
        "mode": "[R]",
        "doc": "Prototype of the equipment that will be created by placing this item in an equipment grid or ````\nnil````\nif there is no equipment defined."
      },
      "place_as_tile_result": {
        "name": "place_as_tile_result",
        "type": "PlaceAsTileResult",
        "mode": "[R]",
        "doc": "The place as tile result if one is defined else ````\nnil````"
      },
      "place_result": {
        "name": "place_result",
        "type": "LuaEntityPrototype",
        "mode": "[R]",
        "doc": "Prototype of the entity that will be created by placing this item, or ````\nnil````\nif there is no su  \nentity."
      },
      "reload_time": {
        "name": "reload_time",
        "type": "float",
        "mode": "[R]",
        "doc": "Amount of extra time (in ticks) it takes to reload the weapon after depleting the magazine or ````\nnil````\nif this is not an ammo item."
      },
      "repair_result": {
        "name": "repair_result",
        "type": "Trigger",
        "mode": "[R]",
        "doc": "The repair result of this repair tool prototype or ````\nnil````\nif this isn't a repair tool prototyp    \n_Can only be used if this is RepairTool_"
      },
      "resistances": {
        "name": "resistances",
        "type": "Resistances",
        "mode": "[R]",
        "doc": "Resistances of this armour item; ````\nnil````\nif not an armor or the armor has no resistances."
      },
      "rocket_launch_products": {
        "name": "rocket_launch_products",
        "type": "array of Product",
        "mode": "[R]",
        "doc": "The results from launching this item in a rocke"
      },
      "selection_border_color": {
        "name": "selection_border_color",
        "type": "Color",
        "mode": "[R]",
        "doc": "The color used when doing normal selection with this selection tool prototyp    \n_Can only be used if this is SelectionTool_"
      },
      "selection_cursor_box_type": {
        "name": "selection_cursor_box_type",
        "type": "string",
        "mode": "[R]",
        "doc": "_Can only be used if this is SelectionTool_"
      },
      "selection_mode_flags": {
        "name": "selection_mode_flags",
        "type": "SelectionModeFlags",
        "mode": "[R]",
        "doc": "Flags that affect which entities will be selected.  \n_Can only be used if this is SelectionTool_"
      },
      "speed": {
        "name": "speed",
        "type": "float",
        "mode": "[R]",
        "doc": "The repairing speed if this is a repairing tool; otherwise ````\nnil````\n."
      },
      "stack_size": {
        "name": "stack_size",
        "type": "uint",
        "mode": "[R]",
        "doc": "Maximum stack size of the item specified by this prototype."
      },
      "stackable": {
        "name": "stackable",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this item allowed to stack at all?"
      },
      "straight_rail": {
        "name": "straight_rail",
        "type": "LuaEntityPrototype",
        "mode": "[R]",
        "doc": "The straight rail prototype used for this rail planner prototyp    \n_Can only be used if this is RailPlanner_"
      },
      "subgroup": {
        "name": "subgroup",
        "type": "LuaGroup",
        "mode": "[R]",
        "doc": "The subgroup this prototype belongs to."
      },
      "tier": {
        "name": "tier",
        "type": "uint",
        "mode": "[R]",
        "doc": "Tier of the module inside its category. Used when upgrading modules: Ctrl + click modules into an entity and it will replace lower tier modules with higher tier modules if they have the same categor    \n_Can only be used if this is ModuleItem_"
      },
      "tile_filter_mode": {
        "name": "tile_filter_mode",
        "type": "string",
        "mode": "[R]",
        "doc": "The tile filter mode used by this selection too    \n_Can only be used if this is SelectionTool_"
      },
      "tile_filter_slots": {
        "name": "tile_filter_slots",
        "type": "uint",
        "mode": "[R]",
        "doc": "The number of tile filters this deconstruction item has or ````\nnil````\nif this isn't a deconstruction item prototyp    \n_Can only be used if this is DeconstructionItem_"
      },
      "tile_filters": {
        "name": "tile_filters",
        "type": "dictionary string → LuaTilePrototype",
        "mode": "[R]",
        "doc": "The tile filters used by this selection tool indexed by tile nam    \n_Can only be used if this is SelectionTool_"
      },
      "type": {
        "name": "type",
        "type": "string",
        "mode": "[R]",
        "doc": "Type of this prototype. E.g. ````\n\"gun\"````\nor ````\n\"mining-tool\"````\n."
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      },
      "wire_count": {
        "name": "wire_count",
        "type": "uint",
        "mode": "[R]",
        "doc": "The number of items needed to connect 2 entities with this as wire."
      }
    },
    "doc": "Does this prototype have a flag enabled?"
  },
  "LuaItemStack": {
    "name": "LuaItemStack",
    "type": "LuaItemStack",
    "inherits": [],
    "properties": {
      "active_index": {
        "name": "active_index",
        "type": "uint",
        "mode": "[RW]",
        "doc": "The active blueprint index for this blueprint book. May be ````\nnil````    \n_Can only be used if this is BlueprintBookItem_"
      },
      "add_ammo": {
        "name": "add_ammo",
        "doc": "Add ammo to this ammo item.   \n\n**Parameters**  \namount :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float): Amount of ammo to add.  \n_Can only be used if this is AmmoItem_",
        "type": "function",
        "args": {
          "amount": {
            "name": "amount",
            "type": "float",
            "doc": "amount :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float): Amount of ammo to add."
          }
        }
      },
      "add_durability": {
        "name": "add_durability",
        "doc": "Add durability to this tool item.   \n\n**Parameters**  \namount :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double): Amount of durability to add.  \n_Can only be used if this is ToolItem_",
        "type": "function",
        "args": {
          "amount": {
            "name": "amount",
            "type": "double",
            "doc": "amount :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double): Amount of durability to add."
          }
        }
      },
      "allow_manual_label_change": {
        "name": "allow_manual_label_change",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "If the label for this item can be manually changed. When false the label can only be changed through the AP    \n_Can only be used if this is ItemWithLabel_"
      },
      "ammo": {
        "name": "ammo",
        "type": "uint",
        "mode": "[RW]",
        "doc": "Number of bullets left in the magazin    \n_Can only be used if this is AmmoItem_"
      },
      "blueprint_absolute_snapping": {
        "name": "blueprint_absolute_snapping",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "If absolute snapping is enabled on this blueprint ite    \n_Can only be used if this is BlueprintItem_"
      },
      "blueprint_icons": {
        "name": "blueprint_icons",
        "mode": "[RW]",
        "doc": "Icons of a blueprint item, blueprint book, deconstruction item or upgrade planne  \nAn item that doesn't have icons returns nil on read and throws error on writ  \nEvery entry of this array has the following fields:   \nsignal :: [SignalID](http://lua-api.factorio.com/latest/Concepts.html#SignalID): Slot icon to use. The slot will have the icon of the specified signal. This allo  \nthe use of any item icon, as well as virtual signal icons.  \nindex :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): Index of the icon in the blueprint icons slots. Has to be in {1, 2, 3, 4}.  \n_Can only be used if this is BlueprintItem_",
        "type": "array of Icon"
      },
      "blueprint_position_relative_to_grid": {
        "name": "blueprint_position_relative_to_grid",
        "type": "Position",
        "mode": "[RW]",
        "doc": "The offset from the absolute grid or nil if absolute snapping is not enable    \n_Can only be used if this is BlueprintItem_"
      },
      "blueprint_snap_to_grid": {
        "name": "blueprint_snap_to_grid",
        "type": "Position",
        "mode": "[RW]",
        "doc": "The snapping grid size in this blueprint item or nil if snapping is not enable    \n_Can only be used if this is BlueprintItem_"
      },
      "build_blueprint": {
        "name": "build_blueprint",
        "type": "function",
        "doc": "Build this blueprin    \n\n**Parameters**  \nTable with the following fields:   \nsurface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification): Surface to build on  \nforce :: [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification): Force to use for the building  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): The position to build at  \nforce_build :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): When true, anything that can be built is else nothing is built if any one thing can't be built  \ndirection :: [defines.direction](http://lua-api.factorio.com/latest/defines.html#defines.direction) (optional): The direction to use when building  \nskip_fog_of_war :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If chunks covered by fog-of-war are skipped.  \nby_player :: [PlayerSpecification](http://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional): The player to use if any. If provided [defines.events.on_built_entity](http://lua-api.factorio.com/latest/defines.html#defines.events.on_built_entity) will also be fired on successful entity creation.  \nraise_built :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If true; [defines.events.script_raised_built](http://lua-api.factorio.com/latest/defines.html#defines.events.script_raised_built) will be fired on successful entity creation. Note: this is ignored if by_player is provided.  \n\n**Return value**  \nArray of created ghosts  \n\n**Note: ** Built entities can be come invalid between the building of the blueprint and the function returning if by_player or raise_built is used and one of those events invalidates the entity.",
        "returns": "array of LuaEntity",
        "args": {
          "surface": {
            "name": "surface",
            "type": "SurfaceSpecification",
            "doc": "Table with the following fields:   \nsurface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification): Surface to build on  \nforce :: [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification): Force to use for the building  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): The position to build at  \nforce_build :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): When true, anything that can be built is else nothing is built if any one thing can't be built  \ndirection :: [defines.direction](http://lua-api.factorio.com/latest/defines.html#defines.direction) (optional): The direction to use when building  \nskip_fog_of_war :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If chunks covered by fog-of-war are skipped.  \nby_player :: [PlayerSpecification](http://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional): The player to use if any. If provided [defines.events.on_built_entity](http://lua-api.factorio.com/latest/defines.html#defines.events.on_built_entity) will also be fired on successful entity creation.  \nraise_built :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If true; [defines.events.script_raised_built](http://lua-api.factorio.com/latest/defines.html#defines.events.script_raised_built) will be fired on successful entity creation. Note: this is ignored if by_player is provided."
          }
        }
      },
      "can_set_stack": {
        "name": "can_set_stack",
        "type": "function",
        "doc": "Would a call to [LuaItemStack::set_stack](http://lua-api.factorio.com/latest/LuaItemStack.html#LuaItemStack.set_stack) succeed?   \n\n**Parameters**  \nstack :: [ItemStackSpecification](http://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification) (optional): Stack that would be set, possibly ````\nnil````\n.",
        "returns": "boolean",
        "args": {
          "stack": {
            "name": "stack",
            "type": "ItemStackSpecification",
            "doc": "stack :: [ItemStackSpecification](http://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification) (optional): Stack that would be set, possibly ````\nnil````\n."
          }
        }
      },
      "cancel_deconstruct_area": {
        "name": "cancel_deconstruct_area",
        "doc": "Cancel deconstruct the given area with this deconstruction ite    \n\n**Parameters**  \nTable with the following fields:   \nsurface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification): Surface to cancel deconstruct on  \nforce :: [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification): Force to use for canceling deconstruction  \narea :: [BoundingBox](http://lua-api.factorio.com/latest/Concepts.html#BoundingBox): The area to deconstruct  \nskip_fog_of_war :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If chunks covered by fog-of-war are skipped.  \nby_player :: [PlayerSpecification](http://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional): The player to use if any.",
        "type": "function",
        "args": {
          "surface": {
            "name": "surface",
            "type": "SurfaceSpecification",
            "doc": "Table with the following fields:   \nsurface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification): Surface to cancel deconstruct on  \nforce :: [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification): Force to use for canceling deconstruction  \narea :: [BoundingBox](http://lua-api.factorio.com/latest/Concepts.html#BoundingBox): The area to deconstruct  \nskip_fog_of_war :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If chunks covered by fog-of-war are skipped.  \nby_player :: [PlayerSpecification](http://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional): The player to use if any."
          }
        }
      },
      "clear": {
        "name": "clear",
        "doc": "Clear this item stack.",
        "type": "function"
      },
      "clear_blueprint": {
        "name": "clear_blueprint",
        "doc": "Clears this blueprint ite    \n_Can only be used if this is BlueprintItem_",
        "type": "function"
      },
      "clear_deconstruction_item": {
        "name": "clear_deconstruction_item",
        "doc": "Clears all settings/filters on this deconstruction item resetting it to default value    \n_Can only be used if this is DeconstructionItem_",
        "type": "function"
      },
      "clear_upgrade_item": {
        "name": "clear_upgrade_item",
        "doc": "Clears all settings/filters on this upgrade item resetting it to default value    \n_Can only be used if this is UpgradeItem_",
        "type": "function"
      },
      "connected_entity": {
        "name": "connected_entity",
        "mode": "[RW]",
        "doc": "If this item is spidertron remote and has spidertron bound to it, the connected spider-vehicle entity is returned, otherwise ````\nnil````\n."
      },
      "cost_to_build": {
        "name": "cost_to_build",
        "type": "dictionary string → uint",
        "mode": "[R]",
        "doc": "Raw materials required to build this blueprint. Result is a dictionary mapping each item prototype na  \nto the required count.   \n_Can only be used if this is BlueprintItem_"
      },
      "count": {
        "name": "count",
        "type": "uint",
        "mode": "[RW]",
        "doc": "Number of items in this stack."
      },
      "create_blueprint": {
        "name": "create_blueprint",
        "type": "function",
        "doc": "Sets up this blueprint using the found blueprintable entities/tiles on the surface.   \n\n**Parameters**  \nTable with the following fields:   \nsurface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification): Surface to create from  \nforce :: [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification): Force to use for the creation  \narea :: [BoundingBox](http://lua-api.factorio.com/latest/Concepts.html#BoundingBox): The bounding box  \nalways_include_tiles :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): When true, blueprintable tiles are always included in the blueprint. When false they're only included if no entities exist in the setup area.  \ninclude_entities :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): When true, entities are included in the blueprint. Defaults to true.  \ninclude_modules :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): When true, modules are included in the blueprint. Defaults to true.  \ninclude_station_names :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): When true, station names are included in the blueprint. Defaults to false.  \ninclude_trains :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): When true, trains are included in the blueprint. Defaults to false.  \ninclude_fuel :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): When true, train fuel is included in the blueprint, Defaults to true.  \n\n**Return value**  \nThe blueprint entity index to source entity mapping.",
        "returns": "dictionary uint → LuaEntity",
        "args": {
          "surface": {
            "name": "surface",
            "type": "SurfaceSpecification",
            "doc": "Table with the following fields:   \nsurface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification): Surface to create from  \nforce :: [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification): Force to use for the creation  \narea :: [BoundingBox](http://lua-api.factorio.com/latest/Concepts.html#BoundingBox): The bounding box  \nalways_include_tiles :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): When true, blueprintable tiles are always included in the blueprint. When false they're only included if no entities exist in the setup area.  \ninclude_entities :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): When true, entities are included in the blueprint. Defaults to true.  \ninclude_modules :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): When true, modules are included in the blueprint. Defaults to true.  \ninclude_station_names :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): When true, station names are included in the blueprint. Defaults to false.  \ninclude_trains :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): When true, trains are included in the blueprint. Defaults to false.  \ninclude_fuel :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): When true, train fuel is included in the blueprint, Defaults to true."
          }
        }
      },
      "create_grid": {
        "name": "create_grid",
        "type": "function",
        "doc": "Creates the equipment grid for this item if it doesn't exist and this is an item-with-entity-data that supports equipment grid    \n_Can only be used if this is ItemWithEntityData_",
        "returns": "LuaEquipmentGrid"
      },
      "custom_description": {
        "name": "custom_description",
        "type": "LocalisedString",
        "mode": "[RW]",
        "doc": "The custom description this item-with-tags. This is shown over the normal item description if this is set to a non-empty valu"
      },
      "deconstruct_area": {
        "name": "deconstruct_area",
        "doc": "Deconstruct the given area with this deconstruction ite    \n\n**Parameters**  \nTable with the following fields:   \nsurface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification): Surface to deconstruct on  \nforce :: [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification): Force to use for the deconstruction  \narea :: [BoundingBox](http://lua-api.factorio.com/latest/Concepts.html#BoundingBox): The area to deconstruct  \nskip_fog_of_war :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If chunks covered by fog-of-war are skipped.  \nby_player :: [PlayerSpecification](http://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional): The player to use if any.",
        "type": "function",
        "args": {
          "surface": {
            "name": "surface",
            "type": "SurfaceSpecification",
            "doc": "Table with the following fields:   \nsurface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification): Surface to deconstruct on  \nforce :: [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification): Force to use for the deconstruction  \narea :: [BoundingBox](http://lua-api.factorio.com/latest/Concepts.html#BoundingBox): The area to deconstruct  \nskip_fog_of_war :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If chunks covered by fog-of-war are skipped.  \nby_player :: [PlayerSpecification](http://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional): The player to use if any."
          }
        }
      },
      "default_icons": {
        "name": "default_icons",
        "mode": "[R]",
        "doc": "The default icons for a blueprint item. Every entry of this array has the following fields :   \nname :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Prototype name of the item whose icon to use  \nindex :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): Index of the icon in the blueprint icons slots. Has to be in {1, 2, 3, 4}.  \n_Can only be used if this is BlueprintItem_",
        "type": "array of Icon"
      },
      "drain_ammo": {
        "name": "drain_ammo",
        "doc": "Remove ammo from this ammo item.   \n\n**Parameters**  \namount :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float): Amount of ammo to remove.  \n_Can only be used if this is AmmoItem_",
        "type": "function",
        "args": {
          "amount": {
            "name": "amount",
            "type": "float",
            "doc": "amount :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float): Amount of ammo to remove."
          }
        }
      },
      "drain_durability": {
        "name": "drain_durability",
        "doc": "Remove durability from this tool item.   \n\n**Parameters**  \namount :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double): Amount of durability to remove.  \n_Can only be used if this is ToolItem_",
        "type": "function",
        "args": {
          "amount": {
            "name": "amount",
            "type": "double",
            "doc": "amount :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double): Amount of durability to remove."
          }
        }
      },
      "durability": {
        "name": "durability",
        "type": "double",
        "mode": "[RW]",
        "doc": "Durability of the contained item. Automatically capped at the item's maximum durabilit    \n\n**Note: ** When used on a non-tool item, the value of this attribute is ````\nnil````\n."
      },
      "entity_filter_count": {
        "name": "entity_filter_count",
        "type": "uint",
        "mode": "[R]",
        "doc": "The number of entity filters this deconstruction item support    \n_Can only be used if this is DeconstructionItem_"
      },
      "entity_filter_mode": {
        "name": "entity_filter_mode",
        "type": "defines.deconstruction_item.entity_filter_mode",
        "mode": "[RW]",
        "doc": "The blacklist/whitelist entity filter mode for this deconstruction ite    \n_Can only be used if this is DeconstructionItem_"
      },
      "entity_filters": {
        "name": "entity_filters",
        "type": "array of string",
        "mode": "[RW]",
        "doc": "The entity filters for this deconstruction ite"
      },
      "export_stack": {
        "name": "export_stack",
        "type": "function",
        "doc": "Export a supported item (blueprint, blueprint-book, deconstruction-planner, upgrade-planner, item-with-tags) to a string   \n\n**Return value**  \nThe exported string",
        "returns": "string"
      },
      "extends_inventory": {
        "name": "extends_inventory",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "If this item extends the inventory it resides in (provides its contents for counts, crafting, insertion). Only callable on items with inventorie    \n_Can only be used if this is ItemWithInventory_"
      },
      "get_blueprint_entities": {
        "name": "get_blueprint_entities",
        "doc": "Entities in this blueprint.   \n\n**Return value**  \nThe fields of an entity table depend on the type of the entity. Eve  \nentity has at least the following fields:   \nentity_number :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): Entity's unique identifier in this blueprint  \nname :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Prototype name of the entity  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): Position of the entity  \ndirection :: [defines.direction](http://lua-api.factorio.com/latest/defines.html#defines.direction) (optional): The direction the entity is facing. Only present for entiti  \nthat can face in different directions.  \nother: Entity-specific fields...  \n_Can only be used if this is BlueprintItem_",
        "type": "function",
        "returns": "array of blueprint entity"
      },
      "get_blueprint_entity_count": {
        "name": "get_blueprint_entity_count",
        "type": "function",
        "doc": "Gets the number of entities in this blueprint ite    \n_Can only be used if this is BlueprintItem_",
        "returns": "uint"
      },
      "get_blueprint_entity_tag": {
        "name": "get_blueprint_entity_tag",
        "type": "function",
        "doc": "Gets the given tag on the given blueprint entity index in this blueprint ite    \n\n**Parameters**  \nindex :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The entity index  \ntag :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): The tag to get  \n_Can only be used if this is BlueprintItem_",
        "returns": "Any",
        "args": {
          "index": {
            "name": "index",
            "type": "uint",
            "doc": "index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The entity index"
          },
          "tag": {
            "name": "tag",
            "type": "string",
            "doc": "tag :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): The tag to get"
          }
        }
      },
      "get_blueprint_entity_tags": {
        "name": "get_blueprint_entity_tags",
        "type": "function",
        "doc": "Gets the tags for the given blueprint entity index in this blueprint ite    \n\n**Parameters**  \nindex :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \n_Can only be used if this is BlueprintItem_",
        "returns": "Tags",
        "args": {
          "index": {
            "name": "index",
            "type": "uint",
            "doc": "index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)"
          }
        }
      },
      "get_blueprint_tiles": {
        "name": "get_blueprint_tiles",
        "doc": "Tiles in this bluepri    \n\n**Return value**  \nA blueprint tile is a table:   \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position)  \nname :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Prototype name of the tile.  \n_Can only be used if this is BlueprintItem_",
        "type": "function",
        "returns": "array of blueprint tile"
      },
      "get_entity_filter": {
        "name": "get_entity_filter",
        "type": "function",
        "doc": "Gets the entity filter at the given index for this deconstruction ite    \n\n**Parameters**  \nindex :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \n_Can only be used if this is DeconstructionItem_",
        "returns": "string",
        "args": {
          "index": {
            "name": "index",
            "type": "uint",
            "doc": "index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)"
          }
        }
      },
      "get_inventory": {
        "name": "get_inventory",
        "type": "function",
        "doc": "Access the inner inventory of an item.   \n\n**Parameters**  \ninventory :: [defines.inventory](http://lua-api.factorio.com/latest/defines.html#defines.inventory)  \nIndex of the inventory to access -- currently can only be [defines.inventory.item_main](http://lua-api.factorio.com/latest/defines.html#defines.inventory.item_main).  \n\n**Return value**  \nor ````\nnil````\nif there is no inventory with the given index.",
        "returns": "LuaInventory",
        "args": {
          "inventory": {
            "name": "inventory",
            "type": "defines.inventory",
            "doc": "inventory :: [defines.inventory](http://lua-api.factorio.com/latest/defines.html#defines.inventory)  \nIndex of the inventory to access -- currently can only be [defines.inventory.item_main](http://lua-api.factorio.com/latest/defines.html#defines.inventory.item_main)."
          }
        }
      },
      "get_mapper": {
        "name": "get_mapper",
        "type": "function",
        "doc": "Gets the filter at the given index for this upgrade ite    \n\n**Parameters**  \nindex :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The index of the mapper to read.  \ntype :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): 'from' or 'to'.  \n_Can only be used if this is UpgradeItem_",
        "returns": "UpgradeFilter",
        "args": {
          "index": {
            "name": "index",
            "type": "uint",
            "doc": "index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The index of the mapper to read."
          },
          "type": {
            "name": "type",
            "type": "string",
            "doc": "type :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): 'from' or 'to'."
          }
        }
      },
      "get_tag": {
        "name": "get_tag",
        "type": "function",
        "doc": "Gets the tag with the given name or returns ````\nnil````\nif it doesn't exis    \n\n**Parameters**  \ntag_name :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string)  \n_Can only be used if this is ItemWithTags_",
        "returns": "Any",
        "args": {
          "tag_name": {
            "name": "tag_name",
            "type": "string",
            "doc": "tag_name :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string)"
          }
        }
      },
      "get_tile_filter": {
        "name": "get_tile_filter",
        "type": "function",
        "doc": "Gets the tile filter at the given index for this deconstruction ite    \n\n**Parameters**  \nindex :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \n_Can only be used if this is DeconstructionItem_",
        "returns": "string",
        "args": {
          "index": {
            "name": "index",
            "type": "uint",
            "doc": "index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)"
          }
        }
      },
      "grid": {
        "name": "grid",
        "type": "LuaEquipmentGrid",
        "mode": "[R]",
        "doc": "The equipment grid of this item or ````\nnil````\nif this item doesn't have a grid."
      },
      "health": {
        "name": "health",
        "type": "float",
        "mode": "[RW]",
        "doc": "How much health the item has, as a number in range [0, 1]."
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "import_stack": {
        "name": "import_stack",
        "type": "function",
        "doc": "Import a supported item (blueprint, blueprint-book, deconstruction-planner, upgrade-planner, item-with-tags) from a string   \n\n**Parameters**  \ndata :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): The string to import  \n\n**Return value**  \n0 if the import succeeded with no errors. -1 if the import succeeded with errors. 1 if the import failed.",
        "returns": "int",
        "args": {
          "data": {
            "name": "data",
            "type": "string",
            "doc": "data :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): The string to import"
          }
        }
      },
      "is_armor": {
        "name": "is_armor",
        "type": "boolean",
        "mode": "[R]",
        "doc": "If this is an armor ite"
      },
      "is_blueprint": {
        "name": "is_blueprint",
        "type": "boolean",
        "mode": "[R]",
        "doc": "If this is a blueprint ite"
      },
      "is_blueprint_book": {
        "name": "is_blueprint_book",
        "type": "boolean",
        "mode": "[R]",
        "doc": "If this is a blueprint book ite"
      },
      "is_blueprint_setup": {
        "name": "is_blueprint_setup",
        "type": "function",
        "doc": "Is this blueprint item setup? I.e. is it a non-empty blueprint?",
        "returns": "boolean"
      },
      "is_deconstruction_item": {
        "name": "is_deconstruction_item",
        "type": "boolean",
        "mode": "[R]",
        "doc": "If this is a deconstruction tool ite"
      },
      "is_item_with_entity_data": {
        "name": "is_item_with_entity_data",
        "type": "boolean",
        "mode": "[R]",
        "doc": "If this is an item with entity data ite"
      },
      "is_item_with_inventory": {
        "name": "is_item_with_inventory",
        "type": "boolean",
        "mode": "[R]",
        "doc": "If this is an item with inventory ite"
      },
      "is_item_with_label": {
        "name": "is_item_with_label",
        "type": "boolean",
        "mode": "[R]",
        "doc": "If this is an item with label ite"
      },
      "is_item_with_tags": {
        "name": "is_item_with_tags",
        "type": "boolean",
        "mode": "[R]",
        "doc": "If this is an item with tags ite"
      },
      "is_mining_tool": {
        "name": "is_mining_tool",
        "type": "boolean",
        "mode": "[R]",
        "doc": "If this is a mining tool ite"
      },
      "is_module": {
        "name": "is_module",
        "type": "boolean",
        "mode": "[R]",
        "doc": "If this is a module ite"
      },
      "is_repair_tool": {
        "name": "is_repair_tool",
        "type": "boolean",
        "mode": "[R]",
        "doc": "If this is a repair tool ite"
      },
      "is_selection_tool": {
        "name": "is_selection_tool",
        "type": "boolean",
        "mode": "[R]",
        "doc": "If this is a selection tool ite"
      },
      "is_tool": {
        "name": "is_tool",
        "type": "boolean",
        "mode": "[R]",
        "doc": "If this is a tool ite"
      },
      "is_upgrade_item": {
        "name": "is_upgrade_item",
        "type": "boolean",
        "mode": "[R]",
        "doc": "If this is a upgrade ite"
      },
      "item_number": {
        "name": "item_number",
        "type": "uint",
        "mode": "[R]",
        "doc": "The unique identifier for this item if it has one, ````\nnil````\notherwise. Note that this ID stays the same no matter where the item is moved t  \nOnly these types of items have unique IDs:  \n````\n\"armor\"````  \n````\n\"spidertron-remote\"````  \n````\n\"selection-tool\"````  \n````\n\"copy-paste-tool\"````  \n````\n\"upgrade-item\"````  \n````\n\"deconstruction-item\"````  \n````\n\"blueprint\"````  \n````\n\"blueprint-book\"````  \n````\n\"item-with-entity-data\"````  \n````\n\"item-with-inventory\"````  \n````\n\"item-with-tags\"````"
      },
      "label": {
        "name": "label",
        "type": "string",
        "mode": "[RW]",
        "doc": "The current label for this item. Nil when non    \n_Can only be used if this is ItemWithLabel_"
      },
      "label_color": {
        "name": "label_color",
        "type": "Color",
        "mode": "[RW]",
        "doc": "The current label color for this item. Nil when non    \n_Can only be used if this is ItemWithLabel_"
      },
      "name": {
        "name": "name",
        "type": "string",
        "mode": "[R]",
        "doc": "Prototype name of the item held in this stack."
      },
      "object_name": {
        "name": "object_name",
        "type": "string",
        "mode": "[R]",
        "doc": "The class name of this object."
      },
      "prioritize_insertion_mode": {
        "name": "prioritize_insertion_mode",
        "type": "string",
        "mode": "[RW]",
        "doc": "The insertion mode priority this ItemWithInventory uses when items are inserted into an inventory it resides in. Only callable on items with inventorie    \n_Can only be used if this is ItemWithInventory_"
      },
      "prototype": {
        "name": "prototype",
        "type": "LuaItemPrototype",
        "mode": "[R]",
        "doc": "Prototype of the item held in this stack."
      },
      "remove_tag": {
        "name": "remove_tag",
        "type": "function",
        "doc": "Removes a tag with the given nam    \n\n**Parameters**  \ntag :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string)  \n\n**Return value**  \nIf the tag existed and was removed.  \n_Can only be used if this is ItemWithTags_",
        "returns": "boolean",
        "args": {
          "tag": {
            "name": "tag",
            "type": "string",
            "doc": "tag :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string)"
          }
        }
      },
      "set_blueprint_entities": {
        "name": "set_blueprint_entities",
        "doc": "Set new entities to be a part of this blueprint    \n\n**Parameters**  \nentities :: array of blueprint entity: New blueprint entities. The format is the same as   \n[LuaItemStack::get_blueprint_entities](http://lua-api.factorio.com/latest/LuaItemStack.html#LuaItemStack.get_blueprint_entities).  \n_Can only be used if this is BlueprintItem_",
        "type": "function",
        "args": {
          "entities": {
            "name": "entities",
            "type": "array of blueprint entity",
            "doc": "entities :: array of blueprint entity: New blueprint entities. The format is the same as   \n[LuaItemStack::get_blueprint_entities](http://lua-api.factorio.com/latest/LuaItemStack.html#LuaItemStack.get_blueprint_entities)."
          }
        }
      },
      "set_blueprint_entity_tag": {
        "name": "set_blueprint_entity_tag",
        "doc": "Sets the given tag on the given blueprint entity index in this blueprint ite    \n\n**Parameters**  \nindex :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The entity index  \ntag :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): The tag to set  \nvalue :: [Any](http://lua-api.factorio.com/latest/Concepts.html#Any): The tag value to set or ````\nnil````\nto clear the tag  \n_Can only be used if this is BlueprintItem_",
        "type": "function",
        "args": {
          "index": {
            "name": "index",
            "type": "uint",
            "doc": "index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The entity index"
          },
          "tag": {
            "name": "tag",
            "type": "string",
            "doc": "tag :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): The tag to set"
          },
          "value": {
            "name": "value",
            "type": "Any",
            "doc": "value :: [Any](http://lua-api.factorio.com/latest/Concepts.html#Any): The tag value to set or ````\nnil````\nto clear the tag"
          }
        }
      },
      "set_blueprint_entity_tags": {
        "name": "set_blueprint_entity_tags",
        "doc": "Sets the tags on the given blueprint entity index in this blueprint ite    \n\n**Parameters**  \nindex :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The entity index  \ntags :: [Tags](http://lua-api.factorio.com/latest/Concepts.html#Tags)  \n_Can only be used if this is BlueprintItem_",
        "type": "function",
        "args": {
          "index": {
            "name": "index",
            "type": "uint",
            "doc": "index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The entity index"
          },
          "tags": {
            "name": "tags",
            "type": "Tags",
            "doc": "tags :: [Tags](http://lua-api.factorio.com/latest/Concepts.html#Tags)"
          }
        }
      },
      "set_blueprint_tiles": {
        "name": "set_blueprint_tiles",
        "doc": "Set tiles in this bluepri    \n\n**Parameters**  \ntiles :: array of blueprint tile: Tiles to be a part of the blueprint; the format is the same as   \nreturned from the corresponding get function; see [LuaItemStack::get_blueprint_tiles](http://lua-api.factorio.com/latest/LuaItemStack.html#LuaItemStack.get_blueprint_tiles).  \n_Can only be used if this is BlueprintItem_",
        "type": "function",
        "args": {
          "tiles": {
            "name": "tiles",
            "type": "array of blueprint tile",
            "doc": "tiles :: array of blueprint tile: Tiles to be a part of the blueprint; the format is the same as   \nreturned from the corresponding get function; see [LuaItemStack::get_blueprint_tiles](http://lua-api.factorio.com/latest/LuaItemStack.html#LuaItemStack.get_blueprint_tiles)."
          }
        }
      },
      "set_entity_filter": {
        "name": "set_entity_filter",
        "type": "function",
        "doc": "Sets the entity filter at the given index for this deconstruction ite    \n\n**Parameters**  \nindex :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \nfilter :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) or [LuaEntityPrototype](http://lua-api.factorio.com/latest/LuaEntityPrototype.html) or [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html): Setting to nil erases the filter.  \n\n**Return value**  \nIf the new filter was set (was valid.)  \n_Can only be used if this is DeconstructionItem_",
        "returns": "boolean",
        "args": {
          "filter": {
            "name": "filter",
            "type": "string or LuaEntityPrototype or LuaEntity",
            "doc": "filter :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) or [LuaEntityPrototype](http://lua-api.factorio.com/latest/LuaEntityPrototype.html) or [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html): Setting to nil erases the filter."
          },
          "index": {
            "name": "index",
            "type": "uint",
            "doc": "index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)"
          }
        }
      },
      "set_mapper": {
        "name": "set_mapper",
        "doc": "Sets the module filter at the given index for this upgrade ite    \n\n**Parameters**  \nindex :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The index of the mapper to set.  \ntype :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): ````\nfrom````\nor ````\nto````\n.  \nfilter :: [UpgradeFilter](http://lua-api.factorio.com/latest/Concepts.html#UpgradeFilter): The filter to set or ````\nnil````  \n_Can only be used if this is UpgradeItem_",
        "type": "function",
        "args": {
          "filter": {
            "name": "filter",
            "type": "UpgradeFilter",
            "doc": "filter :: [UpgradeFilter](http://lua-api.factorio.com/latest/Concepts.html#UpgradeFilter): The filter to set or ````\nnil````"
          },
          "index": {
            "name": "index",
            "type": "uint",
            "doc": "index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The index of the mapper to set."
          },
          "type": {
            "name": "type",
            "type": "string",
            "doc": "type :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): ````\nfrom````\nor ````\nto````\n."
          }
        }
      },
      "set_stack": {
        "name": "set_stack",
        "type": "function",
        "doc": "Set this item stack to another item stack.   \n\n**Parameters**  \nstack :: [ItemStackSpecification](http://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification) (optional)  \nItem stack to set this one to. Omitting this parameter or passing ````\nnil````\nwill clear this item stack,   \nif by calling [LuaItemStack::clear](http://lua-api.factorio.com/latest/LuaItemStack.html#LuaItemStack.clear).  \n\n**Return value**  \nWas the stack set successfully?",
        "returns": "boolean",
        "args": {
          "stack": {
            "name": "stack",
            "type": "ItemStackSpecification",
            "doc": "stack :: [ItemStackSpecification](http://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification) (optional)  \nItem stack to set this one to. Omitting this parameter or passing ````\nnil````\nwill clear this item stack,   \nif by calling [LuaItemStack::clear](http://lua-api.factorio.com/latest/LuaItemStack.html#LuaItemStack.clear)."
          }
        }
      },
      "set_tag": {
        "name": "set_tag",
        "type": "function",
        "doc": "Sets the tag with the given name and valu    \n\n**Parameters**  \ntag_name :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string)  \ntag :: [Any](http://lua-api.factorio.com/latest/Concepts.html#Any)  \n_Can only be used if this is ItemWithTags_",
        "returns": "Any",
        "args": {
          "tag": {
            "name": "tag",
            "type": "Any",
            "doc": "tag :: [Any](http://lua-api.factorio.com/latest/Concepts.html#Any)"
          },
          "tag_name": {
            "name": "tag_name",
            "type": "string",
            "doc": "tag_name :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string)"
          }
        }
      },
      "set_tile_filter": {
        "name": "set_tile_filter",
        "type": "function",
        "doc": "Sets the tile filter at the given index for this deconstruction ite    \n\n**Parameters**  \nindex :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \nfilter :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) or [LuaTilePrototype](http://lua-api.factorio.com/latest/LuaTilePrototype.html) or [LuaTile](http://lua-api.factorio.com/latest/LuaTile.html): Setting to nil erases the filter.  \n\n**Return value**  \nIf the new filter was set (was valid.)  \n_Can only be used if this is DeconstructionItem_",
        "returns": "boolean",
        "args": {
          "filter": {
            "name": "filter",
            "type": "string or LuaTilePrototype or LuaTile",
            "doc": "filter :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) or [LuaTilePrototype](http://lua-api.factorio.com/latest/LuaTilePrototype.html) or [LuaTile](http://lua-api.factorio.com/latest/LuaTile.html): Setting to nil erases the filter."
          },
          "index": {
            "name": "index",
            "type": "uint",
            "doc": "index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)"
          }
        }
      },
      "swap_stack": {
        "name": "swap_stack",
        "type": "function",
        "doc": "Swaps this item stack with the given item stack if allowed.   \n\n**Parameters**  \nstack :: [LuaItemStack](http://lua-api.factorio.com/latest/LuaItemStack.html)  \n\n**Return value**  \nif the 2 stacks were swapped successfully.",
        "returns": "boolean",
        "args": {
          "stack": {
            "name": "stack",
            "type": "LuaItemStack",
            "doc": "stack :: [LuaItemStack](http://lua-api.factorio.com/latest/LuaItemStack.html)"
          }
        }
      },
      "tags": {
        "name": "tags",
        "type": "Tags",
        "mode": "[RW]",
        "doc": "_Can only be used if this is ItemWithTags_"
      },
      "tile_filter_count": {
        "name": "tile_filter_count",
        "type": "uint",
        "mode": "[R]",
        "doc": "The number of tile filters this deconstruction item support    \n_Can only be used if this is DeconstructionItem_"
      },
      "tile_filter_mode": {
        "name": "tile_filter_mode",
        "type": "defines.deconstruction_item.tile_filter_mode",
        "mode": "[RW]",
        "doc": "The blacklist/whitelist tile filter mode for this deconstruction ite    \n_Can only be used if this is DeconstructionItem_"
      },
      "tile_filters": {
        "name": "tile_filters",
        "type": "array of string",
        "mode": "[RW]",
        "doc": "The tile filters for this deconstruction ite"
      },
      "tile_selection_mode": {
        "name": "tile_selection_mode",
        "type": "defines.deconstruction_item.tile_selection_mode",
        "mode": "[RW]",
        "doc": "The tile selection mode for this deconstruction ite    \n_Can only be used if this is DeconstructionItem_"
      },
      "transfer_stack": {
        "name": "transfer_stack",
        "type": "function",
        "doc": "Transfers the given item stack into this item stack.   \n\n**Parameters**  \nstack :: [ItemStackSpecification](http://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification)  \n\n**Return value**  \nTrue if the full stack was transferred.",
        "returns": "boolean",
        "args": {
          "stack": {
            "name": "stack",
            "type": "ItemStackSpecification",
            "doc": "stack :: [ItemStackSpecification](http://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification)"
          }
        }
      },
      "trees_and_rocks_only": {
        "name": "trees_and_rocks_only",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "If this deconstruction item is set to allow trees and rocks onl    \n_Can only be used if this is DeconstructionItem_"
      },
      "type": {
        "name": "type",
        "type": "string",
        "mode": "[R]",
        "doc": "Type of the item prototype."
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      },
      "valid_for_read": {
        "name": "valid_for_read",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this valid for reading? Differs from the usual ````\nvalid````\nin that ````\nvalid````\nwill be ````\ntrue````\neven   \nthe item stack is blank but the entity that holds it is still valid."
      }
    },
    "doc": "Is this blueprint item setup? I.e. is it a non-empty blueprint?"
  },
  "LuaLampControlBehavior": {
    "name": "LuaLampControlBehavior",
    "type": "LuaLampControlBehavior",
    "inherits": [
      "Inherited from LuaControlBehavior: get_circuit_network, type, entity",
      "Inherited from LuaGenericOnOffControlBehavior: disabled, circuit_condition, logistic_condition, connect_to_logistic_network"
    ],
    "properties": {
      "circuit_condition": {
        "name": "circuit_condition",
        "type": "CircuitConditionSpecification",
        "mode": "[RW]",
        "doc": "The circuit condition    \n\n**Note: ** ````\ncondition````\nmay be ````\nnil````\nin order to clear the circuit condition.  \n\n**Example**  \nTell an entity to be active (e.g. a lamp to be lit) when it receives a circuit signal of more than 4 cha  \nsignal    \n````\na_behavior.circuit_condition = {condition={comparator=\"&gt;\",  \n                                           first_signal={type=\"item\", name=\"rail-chain-signal\"},  \n                                           constant=4}}````"
      },
      "color": {
        "name": "color",
        "type": "Color",
        "mode": "[R]",
        "doc": "The color the lamp is showing or ````\nnil````\nif not using any colo"
      },
      "connect_to_logistic_network": {
        "name": "connect_to_logistic_network",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "````\ntrue````\nif this should connect to the logistic network."
      },
      "disabled": {
        "name": "disabled",
        "type": "boolean",
        "mode": "[R]",
        "doc": "If the entity is currently disabled because of the control behavior."
      },
      "entity": {
        "name": "entity",
        "type": "LuaEntity",
        "mode": "[R]",
        "doc": "The entity this control behavior belongs to."
      },
      "get_circuit_network": {
        "name": "get_circuit_network",
        "type": "function",
        "returns": "LuaCircuitNetwork",
        "args": {
          "circuit_connector": {
            "name": "circuit_connector",
            "type": "defines.circuit_connector_id",
            "doc": "circuit_connector :: [defines.circuit_connector_id](http://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional): The connector to get circuit network fo  \nMust be specified for entities with more than one circuit network connector."
          },
          "wire": {
            "name": "wire",
            "type": "defines.wire_type",
            "doc": "wire :: [defines.wire_type](http://lua-api.factorio.com/latest/defines.html#defines.wire_type): Wire color of the network connected to this entity."
          }
        },
        "doc": "**Parameters**  \nwire :: [defines.wire_type](http://lua-api.factorio.com/latest/defines.html#defines.wire_type): Wire color of the network connected to this entity.  \ncircuit_connector :: [defines.circuit_connector_id](http://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional): The connector to get circuit network fo  \nMust be specified for entities with more than one circuit network connector.  \n\n**Return value**  \nThe circuit network or nil."
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "logistic_condition": {
        "name": "logistic_condition",
        "type": "CircuitConditionSpecification",
        "mode": "[RW]",
        "doc": "The logistic condition    \n\n**Note: ** ````\ncondition````\nmay be ````\nnil````\nin order to clear the logistic condition.  \n\n**Example**  \nTell an entity to be active (e.g. a lamp to be lit) when the logistics network it's connected to has more th  \n4 chain signal    \n````\na_behavior.logistic_condition = {condition={comparator=\"&gt;\",  \n                                            first_signal={type=\"item\", name=\"rail-chain-signal\"},  \n                                            constant=4}}````"
      },
      "object_name": {
        "name": "object_name",
        "type": "string",
        "mode": "[R]",
        "doc": "The class name of this object."
      },
      "type": {
        "name": "type",
        "type": "defines.control_behavior.type",
        "mode": "[R]",
        "doc": "The concrete type of this control behavior."
      },
      "use_colors": {
        "name": "use_colors",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "````\ntrue````\nif the lamp should set the color from the circuit network signals."
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": "Control behavior for lamps."
  },
  "LuaLazyLoadedValue": {
    "name": "LuaLazyLoadedValue",
    "type": "LuaLazyLoadedValue",
    "inherits": [],
    "properties": {
      "get": {
        "name": "get",
        "doc": "Gets the value of this lazy loaded valu",
        "type": "function",
        "returns": "varies"
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "object_name": {
        "name": "object_name",
        "type": "string",
        "mode": "[R]",
        "doc": "The class name of this object."
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": "Gets the value of this lazy loaded value."
  },
  "LuaLogisticCell": {
    "name": "LuaLogisticCell",
    "type": "LuaLogisticCell",
    "inherits": [],
    "properties": {
      "charge_approach_distance": {
        "name": "charge_approach_distance",
        "type": "float",
        "mode": "[R]",
        "doc": "Radius at which the robots hover when waiting to be charged."
      },
      "charging_robot_count": {
        "name": "charging_robot_count",
        "type": "uint",
        "mode": "[R]",
        "doc": "Number of robots currently charging."
      },
      "charging_robots": {
        "name": "charging_robots",
        "type": "array of LuaEntity",
        "mode": "[R]",
        "doc": "Robots currently being charged."
      },
      "construction_radius": {
        "name": "construction_radius",
        "type": "float",
        "mode": "[R]",
        "doc": "Construction radius of this cell."
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "is_in_construction_range": {
        "name": "is_in_construction_range",
        "type": "function",
        "doc": "Is a given position within the construction range of this cell?   \n\n**Parameters**  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position)",
        "returns": "boolean",
        "args": {
          "position": {
            "name": "position",
            "type": "Position",
            "doc": "position :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position)"
          }
        }
      },
      "is_in_logistic_range": {
        "name": "is_in_logistic_range",
        "type": "function",
        "doc": "Is a given position within the logistic range of this cell?   \n\n**Parameters**  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position)",
        "returns": "boolean",
        "args": {
          "position": {
            "name": "position",
            "type": "Position",
            "doc": "position :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position)"
          }
        }
      },
      "is_neighbour_with": {
        "name": "is_neighbour_with",
        "type": "function",
        "doc": "Are two cells neighbours?   \n\n**Parameters**  \nother :: [LuaLogisticCell](http://lua-api.factorio.com/latest/LuaLogisticCell.html)",
        "returns": "boolean",
        "args": {
          "other": {
            "name": "other",
            "type": "LuaLogisticCell",
            "doc": "other :: [LuaLogisticCell](http://lua-api.factorio.com/latest/LuaLogisticCell.html)"
          }
        }
      },
      "logistic_network": {
        "name": "logistic_network",
        "type": "LuaLogisticNetwork",
        "mode": "[R]",
        "doc": "The network that owns this cell or ````\nnil````\n."
      },
      "logistic_radius": {
        "name": "logistic_radius",
        "type": "float",
        "mode": "[R]",
        "doc": "Logistic radius of this cell."
      },
      "logistics_connection_distance": {
        "name": "logistics_connection_distance",
        "type": "float",
        "mode": "[R]",
        "doc": "Logistic connection distance of this cell."
      },
      "mobile": {
        "name": "mobile",
        "type": "boolean",
        "mode": "[R]",
        "doc": "````\ntrue````\nif this is a mobile cell. In vanilla, only the logistic cell created by a character's person  \nroboport is mobile."
      },
      "neighbours": {
        "name": "neighbours",
        "type": "array of LuaLogisticCell",
        "mode": "[R]",
        "doc": "Neighbouring cells."
      },
      "object_name": {
        "name": "object_name",
        "type": "string",
        "mode": "[R]",
        "doc": "The class name of this object."
      },
      "owner": {
        "name": "owner",
        "type": "LuaEntity",
        "mode": "[R]",
        "doc": "This cell's owner."
      },
      "stationed_construction_robot_count": {
        "name": "stationed_construction_robot_count",
        "type": "uint",
        "mode": "[R]",
        "doc": "Number of stationed construction robots in this cell."
      },
      "stationed_logistic_robot_count": {
        "name": "stationed_logistic_robot_count",
        "type": "uint",
        "mode": "[R]",
        "doc": "Number of stationed logistic robots in this cell."
      },
      "to_charge_robot_count": {
        "name": "to_charge_robot_count",
        "type": "uint",
        "mode": "[R]",
        "doc": "Number of robots waiting to charge."
      },
      "to_charge_robots": {
        "name": "to_charge_robots",
        "type": "array of LuaEntity",
        "mode": "[R]",
        "doc": "Robots waiting to charge."
      },
      "transmitting": {
        "name": "transmitting",
        "type": "boolean",
        "mode": "[R]",
        "doc": "````\ntrue````\nif this cell is active."
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": "Is a given position within the logistic range of this cell?"
  },
  "LuaLogisticContainerControlBehavior": {
    "name": "LuaLogisticContainerControlBehavior",
    "type": "LuaLogisticContainerControlBehavior",
    "inherits": [
      "Inherited from LuaControlBehavior: get_circuit_network, type, entity"
    ],
    "properties": {
      "circuit_mode_of_operation": {
        "name": "circuit_mode_of_operation",
        "type": "defines.control_behavior.logistic_container.circuit_mode_of_operation",
        "mode": "[RW]",
        "doc": "The circuit mode of operations for the logistic container."
      },
      "entity": {
        "name": "entity",
        "type": "LuaEntity",
        "mode": "[R]",
        "doc": "The entity this control behavior belongs to."
      },
      "get_circuit_network": {
        "name": "get_circuit_network",
        "type": "function",
        "returns": "LuaCircuitNetwork",
        "args": {
          "circuit_connector": {
            "name": "circuit_connector",
            "type": "defines.circuit_connector_id",
            "doc": "circuit_connector :: [defines.circuit_connector_id](http://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional): The connector to get circuit network fo  \nMust be specified for entities with more than one circuit network connector."
          },
          "wire": {
            "name": "wire",
            "type": "defines.wire_type",
            "doc": "wire :: [defines.wire_type](http://lua-api.factorio.com/latest/defines.html#defines.wire_type): Wire color of the network connected to this entity."
          }
        },
        "doc": "**Parameters**  \nwire :: [defines.wire_type](http://lua-api.factorio.com/latest/defines.html#defines.wire_type): Wire color of the network connected to this entity.  \ncircuit_connector :: [defines.circuit_connector_id](http://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional): The connector to get circuit network fo  \nMust be specified for entities with more than one circuit network connector.  \n\n**Return value**  \nThe circuit network or nil."
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "object_name": {
        "name": "object_name",
        "type": "string",
        "mode": "[R]",
        "doc": "The class name of this object."
      },
      "type": {
        "name": "type",
        "type": "defines.control_behavior.type",
        "mode": "[R]",
        "doc": "The concrete type of this control behavior."
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": "Control behavior for logistic chests."
  },
  "LuaLogisticNetwork": {
    "name": "LuaLogisticNetwork",
    "type": "LuaLogisticNetwork",
    "inherits": [],
    "properties": {
      "active_provider_points": {
        "name": "active_provider_points",
        "type": "array of LuaLogisticPoint",
        "mode": "[R]",
        "doc": "All active provider points in this network."
      },
      "all_construction_robots": {
        "name": "all_construction_robots",
        "type": "uint",
        "mode": "[R]",
        "doc": "The total number of construction robots in the network (idle and active + in roboports)."
      },
      "all_logistic_robots": {
        "name": "all_logistic_robots",
        "type": "uint",
        "mode": "[R]",
        "doc": "The total number of logistic robots in the network (idle and active + in roboports)."
      },
      "available_construction_robots": {
        "name": "available_construction_robots",
        "type": "uint",
        "mode": "[R]",
        "doc": "Number of construction robots available for a job."
      },
      "available_logistic_robots": {
        "name": "available_logistic_robots",
        "type": "uint",
        "mode": "[R]",
        "doc": "Number of logistic robots available for a job."
      },
      "cells": {
        "name": "cells",
        "type": "array of LuaLogisticCell",
        "mode": "[R]",
        "doc": "All cells in this network."
      },
      "construction_robots": {
        "name": "construction_robots",
        "type": "array of LuaEntity",
        "mode": "[R]",
        "doc": "All construction robots in this logistic networ"
      },
      "empty_provider_points": {
        "name": "empty_provider_points",
        "type": "array of LuaLogisticPoint",
        "mode": "[R]",
        "doc": "All things that have empty provider points in this network."
      },
      "empty_providers": {
        "name": "empty_providers",
        "type": "array of LuaEntity",
        "mode": "[R]",
        "doc": "All entities that have empty logistic provider points in this network."
      },
      "find_cell_closest_to": {
        "name": "find_cell_closest_to",
        "type": "function",
        "doc": "Find logistic cell closest to a given position.   \n\n**Parameters**  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position)  \n\n**Return value**  \nMay be ````\nnil````\nif no cell was found.",
        "returns": "LuaLogisticCell",
        "args": {
          "position": {
            "name": "position",
            "type": "Position",
            "doc": "position :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position)"
          }
        }
      },
      "force": {
        "name": "force",
        "type": "LuaForce",
        "mode": "[R]",
        "doc": "The force this logistic network belongs t"
      },
      "get_contents": {
        "name": "get_contents",
        "type": "function",
        "doc": "Get item counts for the entire networ    \n\n**Return value**  \nA mapping of item prototype names to the number available in the network.  \nSee also  \n[LuaInventory::get_contents](http://lua-api.factorio.com/latest/LuaInventory.html#LuaInventory.get_contents)",
        "returns": "dictionary string → uint"
      },
      "get_item_count": {
        "name": "get_item_count",
        "type": "function",
        "doc": "Count given or all items in the network or given members    \n\n**Parameters**  \nitem :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): Item name to count. If not given, gives coun  \nof all items in the network.  \nmember :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): Logistic members to check, must be either ````\n\"storage\"````  \nor ````\n\"providers\"````\n. If not given, gives count in the entire network.",
        "returns": "int",
        "args": {
          "item": {
            "name": "item",
            "type": "string",
            "doc": "item :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): Item name to count. If not given, gives coun  \nof all items in the network."
          },
          "member": {
            "name": "member",
            "type": "string",
            "doc": "member :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): Logistic members to check, must be either ````\n\"storage\"````  \nor ````\n\"providers\"````\n. If not given, gives count in the entire network."
          }
        }
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "insert": {
        "name": "insert",
        "type": "function",
        "doc": "Insert items into the logistic network. This will actually insert the items into so  \nlogistic chests.   \n\n**Parameters**  \nitem :: [ItemStackSpecification](http://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification): What to insert.  \nmembers :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): Which logistic members to insert the items to. Must   \n````\n\"storage\"````\n, ````\n\"storage-empty\"````\n(storage chests that are completely empty  \n````\n\"storage-empty-slot\"````\n(storage chests that have an empty slot), or ````\n\"requester\"````\n. If n  \nspecified, inserts items into the logistic network in the usual order.  \n\n**Return value**  \nNumber of items actually inserted.",
        "returns": "uint",
        "args": {
          "item": {
            "name": "item",
            "type": "ItemStackSpecification",
            "doc": "item :: [ItemStackSpecification](http://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification): What to insert."
          },
          "members": {
            "name": "members",
            "type": "string",
            "doc": "members :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): Which logistic members to insert the items to. Must   \n````\n\"storage\"````\n, ````\n\"storage-empty\"````\n(storage chests that are completely empty  \n````\n\"storage-empty-slot\"````\n(storage chests that have an empty slot), or ````\n\"requester\"````\n. If n  \nspecified, inserts items into the logistic network in the usual order."
          }
        }
      },
      "logistic_members": {
        "name": "logistic_members",
        "type": "array of LuaEntity",
        "mode": "[R]",
        "doc": "All other entities that have logistic points in this network (inserters mostly)."
      },
      "logistic_robots": {
        "name": "logistic_robots",
        "type": "array of LuaEntity",
        "mode": "[R]",
        "doc": "All logistic robots in this logistic networ"
      },
      "object_name": {
        "name": "object_name",
        "type": "string",
        "mode": "[R]",
        "doc": "The class name of this object."
      },
      "passive_provider_points": {
        "name": "passive_provider_points",
        "type": "array of LuaLogisticPoint",
        "mode": "[R]",
        "doc": "All passive provider points in this network."
      },
      "provider_points": {
        "name": "provider_points",
        "type": "array of LuaLogisticPoint",
        "mode": "[R]",
        "doc": "All things that have provider points in this network."
      },
      "providers": {
        "name": "providers",
        "type": "array of LuaEntity",
        "mode": "[R]",
        "doc": "All entities that have logistic provider points in this network."
      },
      "remove_item": {
        "name": "remove_item",
        "type": "function",
        "doc": "Remove items from the logistic network. This will actually remove the items from so  \nlogistic chests.   \n\n**Parameters**  \nitem :: [ItemStackSpecification](http://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification): What to remove.  \nmembers :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): Which logistic members to remove from. Must   \n````\n\"storage\"````\n, ````\n\"passive-provider\"````\n, ````\n\"buffer\"````\n, or ````\n\"active-provider\"````\n. If not specified, remov  \nfrom the network in the usual order.  \n\n**Return value**  \nNumber of items removed.",
        "returns": "uint",
        "args": {
          "item": {
            "name": "item",
            "type": "ItemStackSpecification",
            "doc": "item :: [ItemStackSpecification](http://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification): What to remove."
          },
          "members": {
            "name": "members",
            "type": "string",
            "doc": "members :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): Which logistic members to remove from. Must   \n````\n\"storage\"````\n, ````\n\"passive-provider\"````\n, ````\n\"buffer\"````\n, or ````\n\"active-provider\"````\n. If not specified, remov  \nfrom the network in the usual order."
          }
        }
      },
      "requester_points": {
        "name": "requester_points",
        "type": "array of LuaLogisticPoint",
        "mode": "[R]",
        "doc": "All things that have requester points in this network."
      },
      "requesters": {
        "name": "requesters",
        "type": "array of LuaEntity",
        "mode": "[R]",
        "doc": "All entities that have logistic requester points in this network."
      },
      "robot_limit": {
        "name": "robot_limit",
        "type": "uint",
        "mode": "[R]",
        "doc": "Maximum number of robots the network can work with. Currently only used for the person  \nroboport."
      },
      "robots": {
        "name": "robots",
        "type": "array of LuaEntity",
        "mode": "[R]",
        "doc": "All robots in this logistic networ"
      },
      "select_drop_point": {
        "name": "select_drop_point",
        "type": "function",
        "doc": "Find a logistic point to drop the specific item stack.   \n\n**Parameters**  \nTable with the following fields:   \nstack :: [ItemStackSpecification](http://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification): Name of the item to select.  \nmembers :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): When given, it will find from only the specific type of member. Must be ````\n\"storage\"````\n, ````\n\"storage-empty\"````\n, ````\n\"storage-empty-slot\"````\nor ````\n\"requester\"````\n. If not specified, selects with normal priorities.  \n\n**Return value**  \nMay be ````\nnil````\nif no point was found.",
        "returns": "LuaLogisticPoint",
        "args": {
          "stack": {
            "name": "stack",
            "type": "ItemStackSpecification",
            "doc": "Table with the following fields:   \nstack :: [ItemStackSpecification](http://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification): Name of the item to select.  \nmembers :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): When given, it will find from only the specific type of member. Must be ````\n\"storage\"````\n, ````\n\"storage-empty\"````\n, ````\n\"storage-empty-slot\"````\nor ````\n\"requester\"````\n. If not specified, selects with normal priorities."
          }
        }
      },
      "select_pickup_point": {
        "name": "select_pickup_point",
        "type": "function",
        "doc": "Find the 'best' logistic point with this item ID and from the given position or from given chest type.   \n\n**Parameters**  \nTable with the following fields:   \nname :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Name of the item to select.  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) (optional): When given, it will find the storage 'best' storage point from this position.  \ninclude_buffers :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): Whether to consider buffer chests or not. Defaults to false. Only considered if selecting with position.  \nmembers :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): When given, it will find from only the specific type of member. Must be ````\n\"storage\"````\n, ````\n\"passive-provider\"````\n, ````\n\"buffer\"````\nor ````\n\"active-provider\"````\n. If not specified, selects with normal priorities. Not considered if position is specified.  \n\n**Return value**  \nMay be ````\nnil````\nif no point was found.",
        "returns": "LuaLogisticPoint",
        "args": {
          "name": {
            "name": "name",
            "type": "string",
            "doc": "Table with the following fields:   \nname :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Name of the item to select.  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) (optional): When given, it will find the storage 'best' storage point from this position.  \ninclude_buffers :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): Whether to consider buffer chests or not. Defaults to false. Only considered if selecting with position.  \nmembers :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): When given, it will find from only the specific type of member. Must be ````\n\"storage\"````\n, ````\n\"passive-provider\"````\n, ````\n\"buffer\"````\nor ````\n\"active-provider\"````\n. If not specified, selects with normal priorities. Not considered if position is specified."
          }
        }
      },
      "storage_points": {
        "name": "storage_points",
        "type": "array of LuaLogisticPoint",
        "mode": "[R]",
        "doc": "All things that have storage points in this network."
      },
      "storages": {
        "name": "storages",
        "type": "array of LuaEntity",
        "mode": "[R]",
        "doc": "All entities that have logistic storage points in this network."
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": "Count given or all items in the network or given members."
  },
  "LuaLogisticPoint": {
    "name": "LuaLogisticPoint",
    "type": "LuaLogisticPoint",
    "inherits": [],
    "properties": {
      "exact": {
        "name": "exact",
        "type": "boolean",
        "mode": "[R]",
        "doc": "If this logistic point is using the exact mode. In exact mode robots never over-deliver request"
      },
      "filters": {
        "name": "filters",
        "type": "array of LogisticFilter",
        "mode": "[R]",
        "doc": "The logistic filters for this logistic point or ````\nnil````\nif this doesn't use logistic filter    \n\n**Note: ** The returned array will always have an entry for each filter and will be indexed in sequence when not nil."
      },
      "force": {
        "name": "force",
        "type": "LuaForce",
        "mode": "[R]",
        "doc": "The force of this logistic poin    \n\n**Note: ** This will always be the same as the [LuaLogisticPoint::owner](http://lua-api.factorio.com/latest/LuaLogisticPoint.html#LuaLogisticPoint.owner) force."
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "logistic_member_index": {
        "name": "logistic_member_index",
        "type": "uint",
        "mode": "[R]",
        "doc": "The Logistic member index of this logistic poin"
      },
      "logistic_network": {
        "name": "logistic_network",
        "type": "LuaLogisticNetwork",
        "mode": "[R]"
      },
      "mode": {
        "name": "mode",
        "type": "defines.logistic_mode",
        "mode": "[R]",
        "doc": "The logistic mod"
      },
      "object_name": {
        "name": "object_name",
        "type": "string",
        "mode": "[R]",
        "doc": "The class name of this object."
      },
      "owner": {
        "name": "owner",
        "type": "LuaEntity",
        "mode": "[R]",
        "doc": "The [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html) owner of this [LuaLogisticPoint](http://lua-api.factorio.com/latest/LuaLogisticPoint.html"
      },
      "targeted_items_deliver": {
        "name": "targeted_items_deliver",
        "type": "dictionary string → uint",
        "mode": "[R]",
        "doc": "Items targeted to be dropped off into this logistic point by robot"
      },
      "targeted_items_pickup": {
        "name": "targeted_items_pickup",
        "type": "dictionary string → uint",
        "mode": "[R]",
        "doc": "Items targeted to be picked up from this logistic point by robot"
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": "The LuaEntity owner of this LuaLogisticPoint."
  },
  "LuaMiningDrillControlBehavior": {
    "name": "LuaMiningDrillControlBehavior",
    "type": "LuaMiningDrillControlBehavior",
    "inherits": [
      "Inherited from LuaControlBehavior: get_circuit_network, type, entity",
      "Inherited from LuaGenericOnOffControlBehavior: disabled, circuit_condition, logistic_condition, connect_to_logistic_network"
    ],
    "properties": {
      "circuit_condition": {
        "name": "circuit_condition",
        "type": "CircuitConditionSpecification",
        "mode": "[RW]",
        "doc": "The circuit condition    \n\n**Note: ** ````\ncondition````\nmay be ````\nnil````\nin order to clear the circuit condition.  \n\n**Example**  \nTell an entity to be active (e.g. a lamp to be lit) when it receives a circuit signal of more than 4 cha  \nsignal    \n````\na_behavior.circuit_condition = {condition={comparator=\"&gt;\",  \n                                           first_signal={type=\"item\", name=\"rail-chain-signal\"},  \n                                           constant=4}}````"
      },
      "circuit_enable_disable": {
        "name": "circuit_enable_disable",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "````\ntrue````\nif this drill is enabled or disabled using the logistics or circuit condition."
      },
      "circuit_read_resources": {
        "name": "circuit_read_resources",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "````\ntrue````\nif this drill should send the resources in the field to the circuit networ  \nWhich resources depends on [LuaMiningDrillControlBehavior::resource_read_mode](http://lua-api.factorio.com/latest/LuaControlBehavior.html#LuaMiningDrillControlBehavior.resource_read_mode)"
      },
      "connect_to_logistic_network": {
        "name": "connect_to_logistic_network",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "````\ntrue````\nif this should connect to the logistic network."
      },
      "disabled": {
        "name": "disabled",
        "type": "boolean",
        "mode": "[R]",
        "doc": "If the entity is currently disabled because of the control behavior."
      },
      "entity": {
        "name": "entity",
        "type": "LuaEntity",
        "mode": "[R]",
        "doc": "The entity this control behavior belongs to."
      },
      "get_circuit_network": {
        "name": "get_circuit_network",
        "type": "function",
        "returns": "LuaCircuitNetwork",
        "args": {
          "circuit_connector": {
            "name": "circuit_connector",
            "type": "defines.circuit_connector_id",
            "doc": "circuit_connector :: [defines.circuit_connector_id](http://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional): The connector to get circuit network fo  \nMust be specified for entities with more than one circuit network connector."
          },
          "wire": {
            "name": "wire",
            "type": "defines.wire_type",
            "doc": "wire :: [defines.wire_type](http://lua-api.factorio.com/latest/defines.html#defines.wire_type): Wire color of the network connected to this entity."
          }
        },
        "doc": "**Parameters**  \nwire :: [defines.wire_type](http://lua-api.factorio.com/latest/defines.html#defines.wire_type): Wire color of the network connected to this entity.  \ncircuit_connector :: [defines.circuit_connector_id](http://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional): The connector to get circuit network fo  \nMust be specified for entities with more than one circuit network connector.  \n\n**Return value**  \nThe circuit network or nil."
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "logistic_condition": {
        "name": "logistic_condition",
        "type": "CircuitConditionSpecification",
        "mode": "[RW]",
        "doc": "The logistic condition    \n\n**Note: ** ````\ncondition````\nmay be ````\nnil````\nin order to clear the logistic condition.  \n\n**Example**  \nTell an entity to be active (e.g. a lamp to be lit) when the logistics network it's connected to has more th  \n4 chain signal    \n````\na_behavior.logistic_condition = {condition={comparator=\"&gt;\",  \n                                            first_signal={type=\"item\", name=\"rail-chain-signal\"},  \n                                            constant=4}}````"
      },
      "object_name": {
        "name": "object_name",
        "type": "string",
        "mode": "[R]",
        "doc": "The class name of this object."
      },
      "resource_read_mode": {
        "name": "resource_read_mode",
        "type": "defines.control_behavior.mining_drill.resource_read_mode",
        "mode": "[RW]",
        "doc": "If the mining drill should send just the resources in its area or the entire field it's on to the circuit network."
      },
      "resource_read_targets": {
        "name": "resource_read_targets",
        "type": "array of LuaEntity",
        "mode": "[R]",
        "doc": "The resource entities that the mining drill will send information about to the circuit network or an empty array."
      },
      "type": {
        "name": "type",
        "type": "defines.control_behavior.type",
        "mode": "[R]",
        "doc": "The concrete type of this control behavior."
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": "Control behavior for mining drills."
  },
  "LuaModSettingPrototype": {
    "name": "LuaModSettingPrototype",
    "type": "LuaModSettingPrototype",
    "inherits": [],
    "properties": {
      "allow_blank": {
        "name": "allow_blank",
        "type": "boolean",
        "mode": "[R]",
        "doc": "If this string setting allows blank values or ````\nnil````\nif not a string settin"
      },
      "allowed_values": {
        "name": "allowed_values",
        "type": "array of string or array of int or array of double",
        "mode": "[R]",
        "doc": "The allowed values for this setting or ````\nnil````\nif this setting doesn't use the a fixed set of value"
      },
      "auto_trim": {
        "name": "auto_trim",
        "type": "boolean",
        "mode": "[R]",
        "doc": "If this string setting auto-trims values or ````\nnil````\nif not a string settin"
      },
      "default_value": {
        "name": "default_value",
        "type": "boolean or double or int or string",
        "mode": "[R]",
        "doc": "The default value of this settin"
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "hidden": {
        "name": "hidden",
        "type": "boolean",
        "mode": "[R]",
        "doc": "If this setting is hidden from the GU"
      },
      "localised_description": {
        "name": "localised_description",
        "type": "LocalisedString",
        "mode": "[R]"
      },
      "localised_name": {
        "name": "localised_name",
        "type": "LocalisedString",
        "mode": "[R]"
      },
      "maximum_value": {
        "name": "maximum_value",
        "type": "double or int",
        "mode": "[R]",
        "doc": "The maximum value for this setting or ````\nnil````\nif this setting type doesn't support a maximu"
      },
      "minimum_value": {
        "name": "minimum_value",
        "type": "double or int",
        "mode": "[R]",
        "doc": "The minimum value for this setting or ````\nnil````\nif this setting type doesn't support a minimu"
      },
      "mod": {
        "name": "mod",
        "type": "string",
        "mode": "[R]",
        "doc": "The mod that owns this settin"
      },
      "name": {
        "name": "name",
        "type": "string",
        "mode": "[R]",
        "doc": "Name of this prototype."
      },
      "object_name": {
        "name": "object_name",
        "type": "string",
        "mode": "[R]",
        "doc": "The class name of this object."
      },
      "order": {
        "name": "order",
        "type": "string",
        "mode": "[R]",
        "doc": "Order string of this prototype."
      },
      "setting_type": {
        "name": "setting_type",
        "type": "string",
        "mode": "[R]"
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": ""
  },
  "LuaModuleCategoryPrototype": {
    "name": "LuaModuleCategoryPrototype",
    "type": "LuaModuleCategoryPrototype",
    "inherits": [],
    "properties": {
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "localised_description": {
        "name": "localised_description",
        "type": "LocalisedString",
        "mode": "[R]"
      },
      "localised_name": {
        "name": "localised_name",
        "type": "LocalisedString",
        "mode": "[R]"
      },
      "name": {
        "name": "name",
        "type": "string",
        "mode": "[R]",
        "doc": "Name of this prototype."
      },
      "object_name": {
        "name": "object_name",
        "type": "string",
        "mode": "[R]",
        "doc": "The class name of this object."
      },
      "order": {
        "name": "order",
        "type": "string",
        "mode": "[R]",
        "doc": "Order string of this prototype."
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": ""
  },
  "LuaNamedNoiseExpression": {
    "name": "LuaNamedNoiseExpression",
    "type": "LuaNamedNoiseExpression",
    "inherits": [],
    "properties": {
      "expression": {
        "name": "expression",
        "type": "NoiseExpression",
        "mode": "[R]",
        "doc": "The expression itself."
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "intended_property": {
        "name": "intended_property",
        "type": "string",
        "mode": "[R]",
        "doc": "Name of the property that this expression is intended to provide a value for, if any."
      },
      "localised_description": {
        "name": "localised_description",
        "type": "LocalisedString",
        "mode": "[R]"
      },
      "localised_name": {
        "name": "localised_name",
        "type": "LocalisedString",
        "mode": "[R]"
      },
      "name": {
        "name": "name",
        "type": "string",
        "mode": "[R]",
        "doc": "Name of this prototype."
      },
      "object_name": {
        "name": "object_name",
        "type": "string",
        "mode": "[R]",
        "doc": "The class name of this object."
      },
      "order": {
        "name": "order",
        "type": "string",
        "mode": "[R]",
        "doc": "Order string of this prototype."
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": ""
  },
  "LuaNoiseLayerPrototype": {
    "name": "LuaNoiseLayerPrototype",
    "type": "LuaNoiseLayerPrototype",
    "inherits": [],
    "properties": {
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "localised_description": {
        "name": "localised_description",
        "type": "LocalisedString",
        "mode": "[R]"
      },
      "localised_name": {
        "name": "localised_name",
        "type": "LocalisedString",
        "mode": "[R]"
      },
      "name": {
        "name": "name",
        "type": "string",
        "mode": "[R]",
        "doc": "Name of this prototype."
      },
      "object_name": {
        "name": "object_name",
        "type": "string",
        "mode": "[R]",
        "doc": "The class name of this object."
      },
      "order": {
        "name": "order",
        "type": "string",
        "mode": "[R]",
        "doc": "Order string of this prototype."
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": ""
  },
  "LuaParticlePrototype": {
    "name": "LuaParticlePrototype",
    "type": "LuaParticlePrototype",
    "inherits": [],
    "properties": {
      "ended_in_water_trigger_effect": {
        "name": "ended_in_water_trigger_effect",
        "type": "TriggerEffectItem",
        "mode": "[R]"
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "life_time": {
        "name": "life_time",
        "type": "uint",
        "mode": "[R]"
      },
      "localised_description": {
        "name": "localised_description",
        "type": "LocalisedString",
        "mode": "[R]"
      },
      "localised_name": {
        "name": "localised_name",
        "type": "LocalisedString",
        "mode": "[R]"
      },
      "mining_particle_frame_speed": {
        "name": "mining_particle_frame_speed",
        "type": "float",
        "mode": "[R]"
      },
      "movement_modifier": {
        "name": "movement_modifier",
        "type": "float",
        "mode": "[R]"
      },
      "movement_modifier_when_on_ground": {
        "name": "movement_modifier_when_on_ground",
        "type": "float",
        "mode": "[R]"
      },
      "name": {
        "name": "name",
        "type": "string",
        "mode": "[R]",
        "doc": "Name of this prototype."
      },
      "object_name": {
        "name": "object_name",
        "type": "string",
        "mode": "[R]",
        "doc": "The class name of this object."
      },
      "order": {
        "name": "order",
        "type": "string",
        "mode": "[R]",
        "doc": "Order string of this prototype."
      },
      "regular_trigger_effect": {
        "name": "regular_trigger_effect",
        "type": "TriggerEffectItem",
        "mode": "[R]"
      },
      "regular_trigger_effect_frequency": {
        "name": "regular_trigger_effect_frequency",
        "type": "uint",
        "mode": "[R]"
      },
      "render_layer": {
        "name": "render_layer",
        "type": "RenderLayer",
        "mode": "[R]"
      },
      "render_layer_when_on_ground": {
        "name": "render_layer_when_on_ground",
        "type": "RenderLayer",
        "mode": "[R]"
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": ""
  },
  "LuaPermissionGroup": {
    "name": "LuaPermissionGroup",
    "type": "LuaPermissionGroup",
    "inherits": [],
    "properties": {
      "add_player": {
        "name": "add_player",
        "type": "function",
        "doc": "Adds the given player to this grou    \n\n**Parameters**  \nplayer :: [PlayerSpecification](http://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification)  \n\n**Return value**  \nIf the player was added.",
        "returns": "boolean",
        "args": {
          "player": {
            "name": "player",
            "type": "PlayerSpecification",
            "doc": "player :: [PlayerSpecification](http://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification)"
          }
        }
      },
      "allows_action": {
        "name": "allows_action",
        "type": "function",
        "doc": "If this group allows the given actio    \n\n**Parameters**  \naction: The defines.input_action value.",
        "returns": "boolean",
        "args": {
          "action": {
            "name": "action",
            "doc": "action: The defines.input_action value.",
            "type": "action"
          }
        }
      },
      "destroy": {
        "name": "destroy",
        "type": "function",
        "doc": "Destroys this grou    \n\n**Return value**  \nIf the group was destroyed.",
        "returns": "boolean"
      },
      "group_id": {
        "name": "group_id",
        "type": "uint",
        "mode": "[R]",
        "doc": "The group"
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "name": {
        "name": "name",
        "type": "string",
        "mode": "[RW]",
        "doc": "The name of this grou    \n\n**Note: ** Setting to ````\nnil````\nor an empty string sets the name to the default value."
      },
      "object_name": {
        "name": "object_name",
        "type": "string",
        "mode": "[R]",
        "doc": "The class name of this object."
      },
      "players": {
        "name": "players",
        "type": "array of LuaPlayer",
        "mode": "[R]",
        "doc": "The players in this grou"
      },
      "remove_player": {
        "name": "remove_player",
        "type": "function",
        "doc": "Removes the given player from this grou    \n\n**Parameters**  \nplayer :: [PlayerSpecification](http://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification)  \n\n**Return value**  \nIf the player was removed.",
        "returns": "boolean",
        "args": {
          "player": {
            "name": "player",
            "type": "PlayerSpecification",
            "doc": "player :: [PlayerSpecification](http://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification)"
          }
        }
      },
      "set_allows_action": {
        "name": "set_allows_action",
        "type": "function",
        "doc": "Sets if the player is allowed to perform the given actio    \n\n**Parameters**  \naction: The defines.input_action value.  \n\n**Return value**  \nIf the value was applied.",
        "returns": "boolean",
        "args": {
          "action": {
            "name": "action",
            "doc": "action: The defines.input_action value.",
            "type": "action"
          },
          "undefined": {
            "doc": ""
          }
        }
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": "Adds the given player to this group."
  },
  "LuaPermissionGroups": {
    "name": "LuaPermissionGroups",
    "type": "LuaPermissionGroups",
    "inherits": [],
    "properties": {
      "create_group": {
        "name": "create_group",
        "type": "function",
        "doc": "Creates a new permission grou    \n\n**Parameters**  \nname :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional)  \n\n**Note: ** May return nil if the calling player doesn't have permission to make groups.",
        "returns": "LuaPermissionGroup",
        "args": {
          "name": {
            "name": "name",
            "type": "string",
            "doc": "name :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional)"
          }
        }
      },
      "get_group": {
        "name": "get_group",
        "type": "function",
        "doc": "Gets the permission group with the given name or group ID or ````\nnil````\nif there is no matching grou    \n\n**Parameters**  \ngroup :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) or [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)",
        "returns": "LuaPermissionGroup",
        "args": {
          "group": {
            "name": "group",
            "type": "string or uint",
            "doc": "group :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) or [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)"
          }
        }
      },
      "groups": {
        "name": "groups",
        "type": "array of LuaPermissionGroup",
        "mode": "[R]",
        "doc": "All of the permission group"
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "object_name": {
        "name": "object_name",
        "type": "string",
        "mode": "[R]",
        "doc": "The class name of this object."
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": "Creates a new permission group."
  },
  "LuaPlayer": {
    "name": "LuaPlayer",
    "type": "LuaPlayer",
    "inherits": [
      "Inherited from LuaControl: get_inventory, get_main_inventory, can_insert, insert, set_gui_arrow, clear_gui_arrow, get_item_count, has_items_inside, can_reach_entity, clear_items_inside, remove_item, teleport, update_selected_entity, clear_selected_entity, disable_flashlight, enable_flashlight, is_flashlight_enabled, get_craftable_count, begin_crafting, cancel_crafting, mine_entity, mine_tile, is_player, open_technology_gui, set_personal_logistic_slot, set_vehicle_logistic_slot, get_personal_logistic_slot, get_vehicle_logistic_slot, clear_personal_logistic_slot, clear_vehicle_logistic_slot, is_cursor_blueprint, get_blueprint_entities, surface, position, vehicle, force, selected, opened, crafting_queue_size, crafting_queue_progress, walking_state, riding_state, mining_state, shooting_state, picking_state, repair_state, cursor_stack, cursor_ghost, driving, crafting_queue, following_robots, cheat_mode, character_crafting_speed_modifier, character_mining_speed_modifier, character_additional_mining_categories, character_running_speed_modifier, character_build_distance_bonus, character_item_drop_distance_bonus, character_reach_distance_bonus, character_resource_reach_distance_bonus, character_item_pickup_distance_bonus, character_loot_pickup_distance_bonus, character_inventory_slots_bonus, character_trash_slot_count_bonus, character_maximum_following_robot_count_bonus, character_health_bonus, character_personal_logistic_requests_enabled, vehicle_logistic_requests_enabled, opened_gui_type, build_distance, drop_item_distance, reach_distance, item_pickup_distance, loot_pickup_distance, resource_reach_distance, in_combat, character_running_speed, character_mining_progress"
    ],
    "properties": {
      "activate_paste": {
        "name": "activate_paste",
        "doc": "Gets a copy of the currently selected blueprint in the clipboard queue into the player's cursor, as if the player activated Paste.",
        "type": "function"
      },
      "add_alert": {
        "name": "add_alert",
        "doc": "Adds an alert to this player for the given entity of the given alert typ    \n\n**Parameters**  \nentity :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)  \ntype :: [defines.alert_type](http://lua-api.factorio.com/latest/defines.html#defines.alert_type)",
        "type": "function",
        "args": {
          "entity": {
            "name": "entity",
            "type": "LuaEntity",
            "doc": "entity :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)"
          },
          "type": {
            "name": "type",
            "type": "defines.alert_type",
            "doc": "type :: [defines.alert_type](http://lua-api.factorio.com/latest/defines.html#defines.alert_type)"
          }
        }
      },
      "add_custom_alert": {
        "name": "add_custom_alert",
        "doc": "Adds a custom alert to this playe    \n\n**Parameters**  \nentity :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html): If the alert is clicked, the map will open at the position of this entity.  \nicon :: [SignalID](http://lua-api.factorio.com/latest/Concepts.html#SignalID)  \nmessage :: [LocalisedString](http://lua-api.factorio.com/latest/Concepts.html#LocalisedString)  \nshow_on_map :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean)",
        "type": "function",
        "args": {
          "entity": {
            "name": "entity",
            "type": "LuaEntity",
            "doc": "entity :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html): If the alert is clicked, the map will open at the position of this entity."
          },
          "icon": {
            "name": "icon",
            "type": "SignalID",
            "doc": "icon :: [SignalID](http://lua-api.factorio.com/latest/Concepts.html#SignalID)"
          },
          "message": {
            "name": "message",
            "type": "LocalisedString",
            "doc": "message :: [LocalisedString](http://lua-api.factorio.com/latest/Concepts.html#LocalisedString)"
          },
          "show_on_map": {
            "name": "show_on_map",
            "type": "boolean",
            "doc": "show_on_map :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean)"
          }
        }
      },
      "add_recipe_notification": {
        "name": "add_recipe_notification",
        "doc": "Adds the given recipe to the list of recipe notifications for this player.   \n\n**Parameters**  \nstring: Name of the prototype to add",
        "args": {
          "string": {
            "name": "string",
            "doc": "string: Name of the prototype to add",
            "type": "string"
          }
        },
        "type": "function"
      },
      "add_to_clipboard": {
        "name": "add_to_clipboard",
        "doc": "Adds the given blueprint to the player's clipboard queue.   \n\n**Parameters**  \nLuaItemStack: Blueprint to add",
        "args": {
          "LuaItemStack": {
            "name": "LuaItemStack",
            "doc": "LuaItemStack: Blueprint to add",
            "type": "LuaItemStack"
          }
        },
        "type": "function"
      },
      "admin": {
        "name": "admin",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "````\ntrue````\nif the player is an admi    \n\n**Note: ** Trying to change player admin status from the console when you aren't an admin does nothing."
      },
      "afk_time": {
        "name": "afk_time",
        "type": "uint",
        "mode": "[R]",
        "doc": "How many ticks since the last action of this play"
      },
      "associate_character": {
        "name": "associate_character",
        "doc": "Associates a character with this playe    \n\n**Parameters**  \ncharacter :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html): The character entity.  \n\n**Note: ** The character must not be connected to any controller.  \n\n**Note: ** If this player is currently disconnected (see [LuaPlayer::connected](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.connected)) the character will be immediately \"logged off\".  \n\n**Note: ** See [LuaPlayer::get_associated_characters](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.get_associated_characters) for more information.",
        "type": "function",
        "args": {
          "character": {
            "name": "character",
            "type": "LuaEntity",
            "doc": "character :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html): The character entity."
          }
        }
      },
      "auto_sort_main_inventory": {
        "name": "auto_sort_main_inventory",
        "type": "boolean",
        "mode": "[R]",
        "doc": "If the main inventory will be auto sorte"
      },
      "begin_crafting": {
        "name": "begin_crafting",
        "type": "function",
        "doc": "Begins crafting the given count of the given recip    \n\n**Parameters**  \ncount :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The count to craft.  \nrecipe :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) or [LuaRecipe](http://lua-api.factorio.com/latest/LuaRecipe.html): The recipe to craft.  \nsilent :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If false and the recipe can't be crafted the requested number of times printing the failure is skipped.  \n\n**Return value**  \nThe count that was actually started crafting.",
        "returns": "uint",
        "args": {
          "count": {
            "name": "count",
            "type": "uint",
            "doc": "count :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The count to craft.  \nrecipe :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) or [LuaRecipe](http://lua-api.factorio.com/latest/LuaRecipe.html): The recipe to craft.  \nsilent :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If false and the recipe can't be crafted the requested number of times printing the failure is skipped."
          }
        }
      },
      "blueprint_to_setup": {
        "name": "blueprint_to_setup",
        "type": "LuaItemStack",
        "mode": "[R]",
        "doc": "The item stack containing a blueprint to be setu"
      },
      "build_distance": {
        "name": "build_distance",
        "type": "uint",
        "mode": "[R]",
        "doc": "The build distance of this character or max uint when not a character or player connected to a characte"
      },
      "build_from_cursor": {
        "name": "build_from_cursor",
        "doc": "Builds what ever is in the cursor on the surface the player is on    \n\n**Parameters**  \nTable with the following fields:   \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): Where the entity would be placed  \ndirection :: [defines.direction](http://lua-api.factorio.com/latest/defines.html#defines.direction) (optional): Direction the entity would be placed  \nalt :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If alt build should be used instead of normal build. Defaults to normal.  \nterrain_building_size :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional): The size for building terrain if building terrain. Defaults to 2.  \nskip_fog_of_war :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If chunks covered by fog-of-war are skipped.  \n\n**Note: ** Anything built will fire normal player-built events.  \n\n**Note: ** The cursor stack will automatically be reduced as if the player built normally.",
        "type": "function",
        "args": {
          "position": {
            "name": "position",
            "type": "Position",
            "doc": "Table with the following fields:   \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): Where the entity would be placed  \ndirection :: [defines.direction](http://lua-api.factorio.com/latest/defines.html#defines.direction) (optional): Direction the entity would be placed  \nalt :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If alt build should be used instead of normal build. Defaults to normal.  \nterrain_building_size :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional): The size for building terrain if building terrain. Defaults to 2.  \nskip_fog_of_war :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If chunks covered by fog-of-war are skipped."
          }
        }
      },
      "can_build_from_cursor": {
        "name": "can_build_from_cursor",
        "type": "function",
        "doc": "Checks if this player can build what ever is in the cursor on the surface the player is on    \n\n**Parameters**  \nTable with the following fields:   \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): Where the entity would be placed  \ndirection :: [defines.direction](http://lua-api.factorio.com/latest/defines.html#defines.direction) (optional): Direction the entity would be placed  \nalt :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If alt build should be used instead of normal build. Defaults to normal.  \nterrain_building_size :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional): The size for building terrain if building terrain. Defaults to 2.  \nskip_fog_of_war :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If chunks covered by fog-of-war are skipped.",
        "returns": "boolean",
        "args": {
          "position": {
            "name": "position",
            "type": "Position",
            "doc": "Table with the following fields:   \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): Where the entity would be placed  \ndirection :: [defines.direction](http://lua-api.factorio.com/latest/defines.html#defines.direction) (optional): Direction the entity would be placed  \nalt :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If alt build should be used instead of normal build. Defaults to normal.  \nterrain_building_size :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional): The size for building terrain if building terrain. Defaults to 2.  \nskip_fog_of_war :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If chunks covered by fog-of-war are skipped."
          }
        }
      },
      "can_insert": {
        "name": "can_insert",
        "type": "function",
        "doc": "Can at least some items be inserted?   \n\n**Parameters**  \nitems :: [ItemStackSpecification](http://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification): Items that would be inserted.  \n\n**Return value**  \n````\ntrue````\nif at least a part of the given items could be inserted into this inventory.",
        "returns": "boolean",
        "args": {
          "items": {
            "name": "items",
            "type": "ItemStackSpecification",
            "doc": "items :: [ItemStackSpecification](http://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification): Items that would be inserted."
          }
        }
      },
      "can_place_entity": {
        "name": "can_place_entity",
        "type": "function",
        "doc": "Checks if this player can build the give entity at the given location on the surface the player is on    \n\n**Parameters**  \nTable with the following fields:   \nname :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Name of the entity to check  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): Where the entity would be placed  \ndirection :: [defines.direction](http://lua-api.factorio.com/latest/defines.html#defines.direction) (optional): Direction the entity would be placed",
        "returns": "boolean",
        "args": {
          "name": {
            "name": "name",
            "type": "string",
            "doc": "Table with the following fields:   \nname :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Name of the entity to check  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): Where the entity would be placed  \ndirection :: [defines.direction](http://lua-api.factorio.com/latest/defines.html#defines.direction) (optional): Direction the entity would be placed"
          }
        }
      },
      "can_reach_entity": {
        "name": "can_reach_entity",
        "type": "function",
        "doc": "Can a given entity be opened or accessed?   \n\n**Parameters**  \nentity :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)",
        "returns": "boolean",
        "args": {
          "entity": {
            "name": "entity",
            "type": "LuaEntity",
            "doc": "entity :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)"
          }
        }
      },
      "cancel_crafting": {
        "name": "cancel_crafting",
        "doc": "Cancels crafting the given count of the given crafting queue index   \n\n**Parameters**  \noptions: :   \nindex :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The crafting queue index.  \ncount :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The count to cancel crafting.",
        "type": "function",
        "args": {
          "options": {
            "name": "options",
            "type": "uint",
            "doc": "options: :   \nindex :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The crafting queue index.  \ncount :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The count to cancel crafting."
          }
        }
      },
      "character": {
        "name": "character",
        "type": "LuaEntity",
        "mode": "[RW]",
        "doc": "The character attached to this player, or ````\nnil````\nif no character.   \n\n**Note: ** Will also return ````\nnil````\nwhen the player is disconnected (see [LuaPlayer::connected](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.connected))."
      },
      "character_additional_mining_categories": {
        "name": "character_additional_mining_categories",
        "type": "array of string",
        "mode": "[RW]",
        "doc": "**Note: ** When called on a [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html), it must be associated with a character (see [LuaPlayer::character](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character))."
      },
      "character_build_distance_bonus": {
        "name": "character_build_distance_bonus",
        "type": "uint",
        "mode": "[RW]",
        "doc": "**Note: ** When called on a [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html), it must be associated with a character (see [LuaPlayer::character](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character))."
      },
      "character_crafting_speed_modifier": {
        "name": "character_crafting_speed_modifier",
        "type": "double",
        "mode": "[RW]",
        "doc": "**Note: ** When called on a [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html), it must be associated with a character (see [LuaPlayer::character](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character))."
      },
      "character_health_bonus": {
        "name": "character_health_bonus",
        "type": "float",
        "mode": "[RW]",
        "doc": "**Note: ** When called on a [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html), it must be associated with a character (see [LuaPlayer::character](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character))."
      },
      "character_inventory_slots_bonus": {
        "name": "character_inventory_slots_bonus",
        "type": "uint",
        "mode": "[RW]",
        "doc": "**Note: ** When called on a [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html), it must be associated with a character (see [LuaPlayer::character](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character))."
      },
      "character_item_drop_distance_bonus": {
        "name": "character_item_drop_distance_bonus",
        "type": "uint",
        "mode": "[RW]",
        "doc": "**Note: ** When called on a [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html), it must be associated with a character (see [LuaPlayer::character](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character))."
      },
      "character_item_pickup_distance_bonus": {
        "name": "character_item_pickup_distance_bonus",
        "type": "uint",
        "mode": "[RW]",
        "doc": "**Note: ** When called on a [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html), it must be associated with a character (see [LuaPlayer::character](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character))."
      },
      "character_loot_pickup_distance_bonus": {
        "name": "character_loot_pickup_distance_bonus",
        "type": "uint",
        "mode": "[RW]",
        "doc": "**Note: ** When called on a [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html), it must be associated with a character (see [LuaPlayer::character](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character))."
      },
      "character_maximum_following_robot_count_bonus": {
        "name": "character_maximum_following_robot_count_bonus",
        "type": "uint",
        "mode": "[RW]",
        "doc": "**Note: ** When called on a [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html), it must be associated with a character (see [LuaPlayer::character](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character))."
      },
      "character_mining_progress": {
        "name": "character_mining_progress",
        "type": "double",
        "mode": "[R]",
        "doc": "Gets the current mining progress between 0 and 1 of this character, or 0 if they aren't minin"
      },
      "character_mining_speed_modifier": {
        "name": "character_mining_speed_modifier",
        "type": "double",
        "mode": "[RW]",
        "doc": "**Note: ** When called on a [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html), it must be associated with a character (see [LuaPlayer::character](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character))."
      },
      "character_personal_logistic_requests_enabled": {
        "name": "character_personal_logistic_requests_enabled",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "If personal logistic requests are enabled for this character or players character."
      },
      "character_reach_distance_bonus": {
        "name": "character_reach_distance_bonus",
        "type": "uint",
        "mode": "[RW]",
        "doc": "**Note: ** When called on a [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html), it must be associated with a character (see [LuaPlayer::character](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character))."
      },
      "character_resource_reach_distance_bonus": {
        "name": "character_resource_reach_distance_bonus",
        "type": "uint",
        "mode": "[RW]",
        "doc": "**Note: ** When called on a [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html), it must be associated with a character (see [LuaPlayer::character](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character))."
      },
      "character_running_speed": {
        "name": "character_running_speed",
        "type": "double",
        "mode": "[R]",
        "doc": "Gets the current movement speed of this character, including effects from exoskeletons, tiles, stickers and shootin"
      },
      "character_running_speed_modifier": {
        "name": "character_running_speed_modifier",
        "type": "double",
        "mode": "[RW]",
        "doc": "**Note: ** When called on a [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html), it must be associated with a character (see [LuaPlayer::character](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character))."
      },
      "character_trash_slot_count_bonus": {
        "name": "character_trash_slot_count_bonus",
        "type": "uint",
        "mode": "[RW]",
        "doc": "**Note: ** When called on a [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html), it must be associated with a character (see [LuaPlayer::character](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character))."
      },
      "chat_color": {
        "name": "chat_color",
        "type": "Color",
        "mode": "[RW]",
        "doc": "The color used when this player talks in game."
      },
      "cheat_mode": {
        "name": "cheat_mode",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "When ````\ntrue````\nhand crafting is free and instant"
      },
      "clear_console": {
        "name": "clear_console",
        "doc": "Clear the chat console.",
        "type": "function"
      },
      "clear_cursor": {
        "name": "clear_cursor",
        "type": "function",
        "doc": "Invokes the \"clear cursor\" action on the player as if the user pressed i    \n\n**Return value**  \nIf the cursor is now empty.",
        "returns": "boolean"
      },
      "clear_gui_arrow": {
        "name": "clear_gui_arrow",
        "doc": "Removes the arrow created by ````\nset_gui_arrow````\n.",
        "type": "function"
      },
      "clear_items_inside": {
        "name": "clear_items_inside",
        "doc": "Remove all items from this entity.",
        "type": "function"
      },
      "clear_personal_logistic_slot": {
        "name": "clear_personal_logistic_slot",
        "type": "function",
        "args": {
          "slot_index": {
            "name": "slot_index",
            "type": "uint",
            "doc": "slot_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The slot to clear."
          }
        },
        "doc": "**Parameters**  \nslot_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The slot to clear.  \n\n**Note: ** This will silently fail if personal logistics are not researched."
      },
      "clear_recipe_notifications": {
        "name": "clear_recipe_notifications",
        "doc": "Clears all the recipe notifications for this player",
        "type": "function"
      },
      "clear_selected_entity": {
        "name": "clear_selected_entity",
        "doc": "Unselect any selected entity.",
        "type": "function"
      },
      "clear_vehicle_logistic_slot": {
        "name": "clear_vehicle_logistic_slot",
        "type": "function",
        "args": {
          "slot_index": {
            "name": "slot_index",
            "type": "uint",
            "doc": "slot_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The slot to clear."
          }
        },
        "doc": "**Parameters**  \nslot_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The slot to clear.  \n\n**Note: ** This will silently fail if the vehicle does not use logistics."
      },
      "close_map": {
        "name": "close_map",
        "doc": "Queues request to switch to the normal game view from the map or zoom to world vie  \nRender mode change requests are processed before rendering of the next frame.",
        "type": "function"
      },
      "color": {
        "name": "color",
        "type": "Color",
        "mode": "[RW]",
        "doc": "The color associated with the player. This will be used to tint the player's character as well as the  \nbuildings and vehicles."
      },
      "connect_to_server": {
        "name": "connect_to_server",
        "doc": "Asks the player if they would like to connect to the given serve    \n\n**Parameters**  \nTable with the following fields:   \naddress :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): The server (address:port) if port is not given the default Factorio port is used.  \nname :: [LocalisedString](http://lua-api.factorio.com/latest/Concepts.html#LocalisedString) (optional): The name of the server.  \ndescription :: [LocalisedString](http://lua-api.factorio.com/latest/Concepts.html#LocalisedString) (optional)  \npassword :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): The password if different from the one used to join this gam  \nNote, if the current password is not empty but the one required to join the new server   \nan empty string should be given for this field.  \n\n**Note: ** This only does anything when used on a multiplayer peer. Single player and server hosts will ignore the prompt.",
        "type": "function",
        "args": {
          "address": {
            "name": "address",
            "type": "string",
            "doc": "Table with the following fields:   \naddress :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): The server (address:port) if port is not given the default Factorio port is used.  \nname :: [LocalisedString](http://lua-api.factorio.com/latest/Concepts.html#LocalisedString) (optional): The name of the server.  \ndescription :: [LocalisedString](http://lua-api.factorio.com/latest/Concepts.html#LocalisedString) (optional)  \npassword :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): The password if different from the one used to join this gam  \nNote, if the current password is not empty but the one required to join the new server   \nan empty string should be given for this field."
          }
        }
      },
      "connected": {
        "name": "connected",
        "type": "boolean",
        "mode": "[R]",
        "doc": "````\ntrue````\nif the player is currently connected to the game."
      },
      "controller_type": {
        "name": "controller_type",
        "type": "defines.controllers",
        "mode": "[R]"
      },
      "crafting_queue": {
        "name": "crafting_queue",
        "mode": "[R]",
        "doc": "Gets the current crafting queue items. Each CraftingQueueItem is a table:   \nindex :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The crafting queue index  \nrecipe :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): The recipe.  \ncount :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The count being crafted.",
        "type": "array of CraftingQueueItem"
      },
      "crafting_queue_progress": {
        "name": "crafting_queue_progress",
        "type": "double",
        "mode": "[R]",
        "doc": "The crafting queue progress [0-  \n0 when no recipe is being crafte"
      },
      "crafting_queue_size": {
        "name": "crafting_queue_size",
        "type": "uint",
        "mode": "[R]",
        "doc": "Size of the crafting queue."
      },
      "create_character": {
        "name": "create_character",
        "type": "function",
        "doc": "Creates and attaches a character entity to this playe    \n\n**Parameters**  \ncharacter :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): The character to create else the default is used.  \n\n**Return value**  \nWhether the character was created.  \n\n**Note: ** The player must not have a character already connected and must be online (see [LuaPlayer::connected](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.connected)).",
        "returns": "boolean",
        "args": {
          "character": {
            "name": "character",
            "type": "string",
            "doc": "character :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): The character to create else the default is used."
          }
        }
      },
      "create_local_flying_text": {
        "name": "create_local_flying_text",
        "doc": "Spawn a flying text that is only visible to this playe    \n\n**Parameters**  \nTable with the following fields:   \ntext :: [LocalisedString](http://lua-api.factorio.com/latest/Concepts.html#LocalisedString)  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) (optional)  \ncreate_at_cursor :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional)  \ncolor :: [Color](http://lua-api.factorio.com/latest/Concepts.html#Color) (optional)  \ntime_to_live :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional)  \nspeed :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional): Movement per second  \n\n**Note: ** Local flying text is not saved, this means it will disappear after save/load.  \n\n**Note: ** position or create_at_cursor is required.  \n\n**Note: ** when create_at_cursor is true all values except 'text' are ignored.",
        "type": "function",
        "args": {
          "text": {
            "name": "text",
            "type": "LocalisedString",
            "doc": "Table with the following fields:   \ntext :: [LocalisedString](http://lua-api.factorio.com/latest/Concepts.html#LocalisedString)  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) (optional)  \ncreate_at_cursor :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional)  \ncolor :: [Color](http://lua-api.factorio.com/latest/Concepts.html#Color) (optional)  \ntime_to_live :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional)  \nspeed :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional): Movement per second"
          }
        }
      },
      "cursor_ghost": {
        "name": "cursor_ghost",
        "type": "ItemPrototypeSpecification",
        "mode": "[RW]",
        "doc": "The ghost prototype in the player's curso    \n\n**Note: ** When read, it will be a [LuaItemPrototype](http://lua-api.factorio.com/latest/LuaItemPrototype.html).  \n\n**Note: ** Items in the cursor stack will take priority over the cursor ghost."
      },
      "cursor_stack": {
        "name": "cursor_stack",
        "type": "LuaItemStack",
        "mode": "[R]",
        "doc": "The player's cursor stack, or ````\nnil````\nif the player controller is a spectator. Even though this property is marked as read-only, it returns a [LuaItemStack](http://lua-api.factorio.com/latest/LuaItemStack.html), meaning it can be manipulated like so:   \n\n**Example**  \n````\nplayer.cursor_stack.clear()````"
      },
      "cutscene_character": {
        "name": "cutscene_character",
        "type": "LuaEntity",
        "mode": "[R]",
        "doc": "When in a cutscene; the character this player would be using once the cutscene is ove    \n\n**Note: ** Will also return ````\nnil````\nwhen the player is disconnected (see [LuaPlayer::connected](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.connected))."
      },
      "disable_alert": {
        "name": "disable_alert",
        "type": "function",
        "doc": "Disables alerts for the given alert categor    \n\n**Parameters**  \nalert_type :: [defines.alert_type](http://lua-api.factorio.com/latest/defines.html#defines.alert_type)  \n\n**Return value**  \nIf the alert type was disabled (false if it was already disabled).",
        "returns": "boolean",
        "args": {
          "alert_type": {
            "name": "alert_type",
            "type": "defines.alert_type",
            "doc": "alert_type :: [defines.alert_type](http://lua-api.factorio.com/latest/defines.html#defines.alert_type)"
          }
        }
      },
      "disable_flashlight": {
        "name": "disable_flashlight",
        "doc": "Disable the flashlight.",
        "type": "function"
      },
      "disable_recipe_groups": {
        "name": "disable_recipe_groups",
        "doc": "Disable recipe groups.",
        "type": "function"
      },
      "disable_recipe_subgroups": {
        "name": "disable_recipe_subgroups",
        "doc": "Disable recipe subgroups.",
        "type": "function"
      },
      "disassociate_character": {
        "name": "disassociate_character",
        "doc": "Disassociates a character from this playe  \nThis is functionally the same as setting [LuaEntity::associated_player](http://lua-api.factorio.com/latest/LuaEntity.html#LuaEntity.associated_player) to ````\nnil````    \n\n**Parameters**  \ncharacter :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html): The character entity  \n\n**Note: ** See [LuaPlayer::get_associated_characters](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.get_associated_characters) for more information.",
        "type": "function",
        "args": {
          "character": {
            "name": "character",
            "type": "LuaEntity",
            "doc": "character :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html): The character entity"
          }
        }
      },
      "display_resolution": {
        "name": "display_resolution",
        "type": "DisplayResolution",
        "mode": "[R]",
        "doc": "The display resolution for this playe"
      },
      "display_scale": {
        "name": "display_scale",
        "type": "double",
        "mode": "[R]",
        "doc": "The display scale for this playe"
      },
      "drag_wire": {
        "name": "drag_wire",
        "type": "function",
        "doc": "Start/end wire dragging at the specified location, wire type is based on the cursor conten    \n\n**Parameters**  \nTable with the following fields:   \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): Position at which cursor was clicked. Used only to decide which si  \nof arithmetic combinator, decider combinator or power switch is to be connected. Entity itse  \nto be connected is based on the player's selected entity.  \n\n**Return value**  \n````\ntrue````\nif the action did something",
        "returns": "boolean",
        "args": {
          "position": {
            "name": "position",
            "type": "Position",
            "doc": "Table with the following fields:   \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): Position at which cursor was clicked. Used only to decide which si  \nof arithmetic combinator, decider combinator or power switch is to be connected. Entity itse  \nto be connected is based on the player's selected entity."
          }
        }
      },
      "driving": {
        "name": "driving",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "````\ntrue````\nif the player is in a vehicle. Writing to this attribute puts the player in or out of  \nvehicle."
      },
      "drop_item_distance": {
        "name": "drop_item_distance",
        "type": "uint",
        "mode": "[R]",
        "doc": "The item drop distance of this character or max uint when not a character or player connected to a characte"
      },
      "enable_alert": {
        "name": "enable_alert",
        "type": "function",
        "doc": "Enables alerts for the given alert categor    \n\n**Parameters**  \nalert_type :: [defines.alert_type](http://lua-api.factorio.com/latest/defines.html#defines.alert_type)  \n\n**Return value**  \nIf the alert type was enabled (false if it was already enabled).",
        "returns": "boolean",
        "args": {
          "alert_type": {
            "name": "alert_type",
            "type": "defines.alert_type",
            "doc": "alert_type :: [defines.alert_type](http://lua-api.factorio.com/latest/defines.html#defines.alert_type)"
          }
        }
      },
      "enable_flashlight": {
        "name": "enable_flashlight",
        "doc": "Enable the flashlight.",
        "type": "function"
      },
      "enable_recipe_groups": {
        "name": "enable_recipe_groups",
        "doc": "Enable recipe groups.",
        "type": "function"
      },
      "enable_recipe_subgroups": {
        "name": "enable_recipe_subgroups",
        "doc": "Enable recipe subgroups.",
        "type": "function"
      },
      "entity_copy_source": {
        "name": "entity_copy_source",
        "type": "LuaEntity",
        "mode": "[R]",
        "doc": "The source entity used during entity settings copy-paste if an  \n````\nnil````\nif there isn't currently a source entity."
      },
      "exit_cutscene": {
        "name": "exit_cutscene",
        "doc": "Exit the current cutscene. Errors if not in a cutscene.",
        "type": "function"
      },
      "following_robots": {
        "name": "following_robots",
        "type": "array of LuaEntity",
        "mode": "[R]",
        "doc": "The current combat robots following the charact    \n\n**Note: ** When called on a [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html), it must be associated with a character(see [LuaPlayer::character](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character))."
      },
      "force": {
        "name": "force",
        "type": "ForceSpecification",
        "mode": "[RW]",
        "doc": "The force of this entity. Reading will always give a [LuaForce](http://lua-api.factorio.com/latest/LuaForce.html), but it is possible   \nassign either [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) or [LuaForce](http://lua-api.factorio.com/latest/LuaForce.html) to this attribute to change the forc"
      },
      "game_view_settings": {
        "name": "game_view_settings",
        "type": "GameViewSettings",
        "mode": "[RW]",
        "doc": "The player's game view settings."
      },
      "get_active_quick_bar_page": {
        "name": "get_active_quick_bar_page",
        "type": "function",
        "doc": "Gets which quick bar page is being used for the given screen page or ````\nnil````\nif not know    \n\n**Parameters**  \nindex :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The screen page. Index 1 is the top row in the gui. Index can go beyond the visible number of bars on the screen to account for the interface config setting change.",
        "returns": "uint8",
        "args": {
          "index": {
            "name": "index",
            "type": "uint",
            "doc": "index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The screen page. Index 1 is the top row in the gui. Index can go beyond the visible number of bars on the screen to account for the interface config setting change."
          }
        }
      },
      "get_alerts": {
        "name": "get_alerts",
        "type": "function",
        "doc": "Gets all alerts matching the given filters or if no filters are given all alerts are returne    \nA mapping of surface index to an array of arrays of alerts indexed by the alert typ  \nAn alert is a table:   \ntarget :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html) (optional)  \nprototype :: [LuaEntityPrototype](http://lua-api.factorio.com/latest/LuaEntityPrototype.html) (optional)  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) (optional)  \ntick :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The tick this alert was created  \nicon :: [SignalID](http://lua-api.factorio.com/latest/Concepts.html#SignalID) (optional): The SignalID used for a custom alert. Only present for custom alerts.  \nmessage :: [LocalisedString](http://lua-api.factorio.com/latest/Concepts.html#LocalisedString) (optional): The message for a custom alert. Only present for custom alerts.  \n\n**Parameters**  \nTable with the following fields:   \nentity :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html) (optional)  \nprototype :: [LuaEntityPrototype](http://lua-api.factorio.com/latest/LuaEntityPrototype.html) (optional)  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) (optional)  \ntype :: [defines.alert_type](http://lua-api.factorio.com/latest/defines.html#defines.alert_type) (optional)  \nsurface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification) (optional)",
        "returns": "dictionary uint → dictionary defines.alert_type → array of alert",
        "args": {
          "entity": {
            "name": "entity",
            "type": "LuaEntity",
            "doc": "Table with the following fields:   \nentity :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html) (optional)  \nprototype :: [LuaEntityPrototype](http://lua-api.factorio.com/latest/LuaEntityPrototype.html) (optional)  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) (optional)  \ntype :: [defines.alert_type](http://lua-api.factorio.com/latest/defines.html#defines.alert_type) (optional)  \nsurface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification) (optional)"
          }
        }
      },
      "get_associated_characters": {
        "name": "get_associated_characters",
        "type": "function",
        "doc": "The characters associated with this playe    \n\n**Note: ** The array will always be empty when the player is disconnected (see [LuaPlayer::connected](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.connected)) regardless of there being associated characters.  \n\n**Note: ** Characters associated with this player will be logged off when this player disconnects but are not controlled by any player.",
        "returns": "array of LuaEntity"
      },
      "get_blueprint_entities": {
        "name": "get_blueprint_entities",
        "doc": "Returns the same type of data as [LuaItemStack::get_blueprint_entities](http://lua-api.factorio.com/latest/LuaItemStack.html#LuaItemStack.get_blueprint_entities), but works for the currently selected blueprin  \nregardless of it being in a blueprint book or picked from the blueprint library.",
        "type": "function",
        "returns": "array of blueprint entity"
      },
      "get_craftable_count": {
        "name": "get_craftable_count",
        "type": "function",
        "doc": "Gets the count of the given recipe that can be crafted    \n\n**Parameters**  \nrecipe :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) or [LuaRecipe](http://lua-api.factorio.com/latest/LuaRecipe.html): The recipe.  \n\n**Return value**  \nThe count that can be crafted.",
        "returns": "uint",
        "args": {
          "recipe": {
            "name": "recipe",
            "type": "string or LuaRecipe",
            "doc": "recipe :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) or [LuaRecipe](http://lua-api.factorio.com/latest/LuaRecipe.html): The recipe."
          }
        }
      },
      "get_goal_description": {
        "name": "get_goal_description",
        "type": "function",
        "doc": "Get the current goal description, as a localised string.",
        "returns": "LocalisedString"
      },
      "get_infinity_inventory_filter": {
        "name": "get_infinity_inventory_filter",
        "type": "function",
        "doc": "Gets the filter for this map editor infinity filters at the given index or ````\nnil````\nif the filter index doesn't exist or is empt    \n\n**Parameters**  \nindex :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The index to get.",
        "returns": "InfinityInventoryFilter",
        "args": {
          "index": {
            "name": "index",
            "type": "uint",
            "doc": "index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The index to get."
          }
        }
      },
      "get_inventory": {
        "name": "get_inventory",
        "type": "function",
        "doc": "Get an inventory belonging to this entity. This can be either the \"main\" inventory or some auxilia  \none, like the module slots or logistic trash slot    \n\n**Parameters**  \ninventory :: [defines.inventory](http://lua-api.factorio.com/latest/defines.html#defines.inventory)  \n\n**Return value**  \nor ````\nnil````\nif this entity doesn't have an inventory with the given index.  \n\n**Note: ** A given [defines.inventory](http://lua-api.factorio.com/latest/defines.html#defines.inventory) is only meaningful for the corresponding LuaObject type. EG: get_inventory(defines.inventory.character_main) is only meaningful if 'this' is a player character. You may get a value back but if the type of 'this' isn't the type referred to by the [defines.inventory](http://lua-api.factorio.com/latest/defines.html#defines.inventory) it's almost guaranteed to not be the inventory asked for.",
        "returns": "LuaInventory",
        "args": {
          "inventory": {
            "name": "inventory",
            "type": "defines.inventory",
            "doc": "inventory :: [defines.inventory](http://lua-api.factorio.com/latest/defines.html#defines.inventory)"
          }
        }
      },
      "get_item_count": {
        "name": "get_item_count",
        "type": "function",
        "doc": "Get the number of all or some items in this entity.   \n\n**Parameters**  \nitem :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): Prototype name of the item to count. If not specified, count all items.",
        "returns": "uint",
        "args": {
          "item": {
            "name": "item",
            "type": "string",
            "doc": "item :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): Prototype name of the item to count. If not specified, count all items."
          }
        }
      },
      "get_main_inventory": {
        "name": "get_main_inventory",
        "type": "function",
        "doc": "Gets the main inventory for this character or player if this is a character or player.   \n\n**Return value**  \nor ````\nnil````\nif this entity is not a character or player.",
        "returns": "LuaInventory"
      },
      "get_personal_logistic_slot": {
        "name": "get_personal_logistic_slot",
        "type": "function",
        "doc": "Sets the personal request and trash to the given value    \n\n**Parameters**  \nslot_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The slot to get.  \n\n**Note: ** This will silently return an empty value (.name will be nil) if personal logistics aren't researched yet.",
        "returns": "PersonalLogisticParameters",
        "args": {
          "slot_index": {
            "name": "slot_index",
            "type": "uint",
            "doc": "slot_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The slot to get."
          }
        }
      },
      "get_quick_bar_slot": {
        "name": "get_quick_bar_slot",
        "type": "function",
        "doc": "Gets the quick bar filter for the given slot or ````\nnil````    \n\n**Parameters**  \nindex :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The slot index. 1 for the first slot of page one, 2 for slot two of page one, 11 for the first slot of page 2, etc.",
        "returns": "LuaItemPrototype",
        "args": {
          "index": {
            "name": "index",
            "type": "uint",
            "doc": "index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The slot index. 1 for the first slot of page one, 2 for slot two of page one, 11 for the first slot of page 2, etc."
          }
        }
      },
      "get_vehicle_logistic_slot": {
        "name": "get_vehicle_logistic_slot",
        "type": "function",
        "doc": "Sets the vehicle logistic request and trash to the given value    \n\n**Parameters**  \nslot_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The slot to get.  \n\n**Note: ** This will silently return an empty value (.name will be nil) if the vehicle does not use logistics.",
        "returns": "PersonalLogisticParameters",
        "args": {
          "slot_index": {
            "name": "slot_index",
            "type": "uint",
            "doc": "slot_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The slot to get."
          }
        }
      },
      "gui": {
        "name": "gui",
        "type": "LuaGui",
        "mode": "[R]"
      },
      "hand_location": {
        "name": "hand_location",
        "type": "ItemStackLocation",
        "mode": "[RW]",
        "doc": "The original location of the item in the cursor, marked with a han  \nWhen writing, the specified inventory slot must be empty and the cursor stack must not be empt"
      },
      "has_items_inside": {
        "name": "has_items_inside",
        "type": "function",
        "doc": "Does this entity have any item inside it?",
        "returns": "boolean"
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "in_combat": {
        "name": "in_combat",
        "type": "boolean",
        "mode": "[R]",
        "doc": "If this character entity is in comba"
      },
      "index": {
        "name": "index",
        "type": "uint",
        "mode": "[R]",
        "doc": "This player's index in [LuaGameScript::players](http://lua-api.factorio.com/latest/LuaGameScript.html#LuaGameScript.players)."
      },
      "infinity_inventory_filters": {
        "name": "infinity_inventory_filters",
        "type": "array of InfinityInventoryFilter",
        "mode": "[RW]",
        "doc": "The filters for this map editor infinity inventory setting"
      },
      "insert": {
        "name": "insert",
        "type": "function",
        "doc": "Insert items into this entity. This works the same way as inserters or shift-clicking: the \"bes  \ninventory is chosen automatically.   \n\n**Parameters**  \nitems :: [ItemStackSpecification](http://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification): Items to insert.  \n\n**Return value**  \nNumber of items actually inserted.",
        "returns": "uint",
        "args": {
          "items": {
            "name": "items",
            "type": "ItemStackSpecification",
            "doc": "items :: [ItemStackSpecification](http://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification): Items to insert."
          }
        }
      },
      "is_alert_enabled": {
        "name": "is_alert_enabled",
        "type": "function",
        "doc": "If the given alert type is currently enable    \n\n**Parameters**  \nalert_type :: [defines.alert_type](http://lua-api.factorio.com/latest/defines.html#defines.alert_type)",
        "returns": "boolean",
        "args": {
          "alert_type": {
            "name": "alert_type",
            "type": "defines.alert_type",
            "doc": "alert_type :: [defines.alert_type](http://lua-api.factorio.com/latest/defines.html#defines.alert_type)"
          }
        }
      },
      "is_alert_muted": {
        "name": "is_alert_muted",
        "type": "function",
        "doc": "If the given alert type is currently mute    \n\n**Parameters**  \nalert_type :: [defines.alert_type](http://lua-api.factorio.com/latest/defines.html#defines.alert_type)",
        "returns": "boolean",
        "args": {
          "alert_type": {
            "name": "alert_type",
            "type": "defines.alert_type",
            "doc": "alert_type :: [defines.alert_type](http://lua-api.factorio.com/latest/defines.html#defines.alert_type)"
          }
        }
      },
      "is_cursor_blueprint": {
        "name": "is_cursor_blueprint",
        "type": "function",
        "doc": "Returns whether the player is holding a blueprint, it takes into account a blueprint as an item as well as bluepri  \nfrom the blueprint record from the blueprint librar  \nNote that the is_cursor_blueprint and get_cursor_blueprint_entities refer to the currently selected blueprint,   \nit returns blueprint related information also when holding a blueprint book with a blueprint being selected in it.",
        "returns": "boolean"
      },
      "is_flashlight_enabled": {
        "name": "is_flashlight_enabled",
        "doc": "Is the flashlight enabled.",
        "type": "function"
      },
      "is_player": {
        "name": "is_player",
        "type": "function",
        "doc": "When ````\ntrue````\ncontrol adapter is a LuaPlayer object, ````\nfalse````\nfor entities including characters with players",
        "returns": "boolean"
      },
      "is_shortcut_available": {
        "name": "is_shortcut_available",
        "type": "function",
        "doc": "Is a custom Lua shortcut currently availabl    \n\n**Parameters**  \nprototype_name :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Prototype name of the custom shortcut.",
        "returns": "boolean",
        "args": {
          "prototype_name": {
            "name": "prototype_name",
            "type": "string",
            "doc": "prototype_name :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Prototype name of the custom shortcut."
          }
        }
      },
      "is_shortcut_toggled": {
        "name": "is_shortcut_toggled",
        "type": "function",
        "doc": "Is a custom Lua shortcut currently toggle    \n\n**Parameters**  \nprototype_name :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Prototype name of the custom shortcut.",
        "returns": "boolean",
        "args": {
          "prototype_name": {
            "name": "prototype_name",
            "type": "string",
            "doc": "prototype_name :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Prototype name of the custom shortcut."
          }
        }
      },
      "item_pickup_distance": {
        "name": "item_pickup_distance",
        "type": "double",
        "mode": "[R]",
        "doc": "The item pickup distance of this character or max double when not a character or player connected to a characte"
      },
      "jump_to_cutscene_waypoint": {
        "name": "jump_to_cutscene_waypoint",
        "doc": "Jump to the specified cutscene waypoint. Only works when the player is viewing a cutscen    \n\n**Parameters**  \nwaypoint_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)",
        "type": "function",
        "args": {
          "waypoint_index": {
            "name": "waypoint_index",
            "type": "uint",
            "doc": "waypoint_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)"
          }
        }
      },
      "last_online": {
        "name": "last_online",
        "type": "uint",
        "mode": "[R]",
        "doc": "At what tick this player was last onlin"
      },
      "log_active_entity_chunk_counts": {
        "name": "log_active_entity_chunk_counts",
        "doc": "Logs a dictionary of chunks -&gt; active entities for the surface this player is on.",
        "type": "function"
      },
      "log_active_entity_counts": {
        "name": "log_active_entity_counts",
        "doc": "Logs a dictionary of active entities -&gt; count for the surface this player is on.",
        "type": "function"
      },
      "loot_pickup_distance": {
        "name": "loot_pickup_distance",
        "type": "double",
        "mode": "[R]",
        "doc": "The loot pickup distance of this character or max double when not a character or player connected to a characte"
      },
      "map_view_settings": {
        "name": "map_view_settings",
        "type": "MapViewSettings",
        "mode": "[W]",
        "doc": "The player's map view settings. To write to this, use a table containing the fields that should be change"
      },
      "mine_entity": {
        "name": "mine_entity",
        "type": "function",
        "doc": "Mines the given entity as if this player (or character) mined i    \n\n**Parameters**  \nentity :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html): The entity to mine  \nforce :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): Forces mining the entity even if the items can't fit in the player.  \n\n**Return value**  \nIf the mining succeeded.",
        "returns": "boolean",
        "args": {
          "entity": {
            "name": "entity",
            "type": "LuaEntity",
            "doc": "entity :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html): The entity to mine"
          },
          "force": {
            "name": "force",
            "type": "boolean",
            "doc": "force :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): Forces mining the entity even if the items can't fit in the player."
          }
        }
      },
      "mine_tile": {
        "name": "mine_tile",
        "type": "function",
        "doc": "Mines the given tile as if this player (or character) mined i    \n\n**Parameters**  \ntile :: [LuaTile](http://lua-api.factorio.com/latest/LuaTile.html): The tile to mine.  \n\n**Return value**  \nIf the mining succeeded.",
        "returns": "boolean",
        "args": {
          "tile": {
            "name": "tile",
            "type": "LuaTile",
            "doc": "tile :: [LuaTile](http://lua-api.factorio.com/latest/LuaTile.html): The tile to mine."
          }
        }
      },
      "minimap_enabled": {
        "name": "minimap_enabled",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "````\ntrue````\nif the minimap is visible."
      },
      "mining_state": {
        "name": "mining_state",
        "type": "table",
        "mode": "[RW]",
        "doc": "Current mining stat  \nIt is a table with two fields:   \nmining :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean): Whether the player is mining at all  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) (optional): What tiles the player is mining; only used when the player is mining tiles (holding a tile in the cursor).  \n\n**Note: ** When the player isn't mining tiles the player will mine what ever entity is currently selected. See [LuaControl::selected](http://lua-api.factorio.com/latest/LuaControl.html#LuaControl.selected) and [LuaControl::update_selected_entity](http://lua-api.factorio.com/latest/LuaControl.html#LuaControl.update_selected_entity)."
      },
      "mod_settings": {
        "name": "mod_settings",
        "type": "CustomDictionary string → ModSetting",
        "mode": "[R]",
        "doc": "**Note: ** This can become invalid if during operation this player becomes invalid."
      },
      "mute_alert": {
        "name": "mute_alert",
        "type": "function",
        "doc": "Mutes alerts for the given alert categor    \n\n**Parameters**  \nalert_type :: [defines.alert_type](http://lua-api.factorio.com/latest/defines.html#defines.alert_type)  \n\n**Return value**  \nIf the alert type was muted (false if it was already muted).",
        "returns": "boolean",
        "args": {
          "alert_type": {
            "name": "alert_type",
            "type": "defines.alert_type",
            "doc": "alert_type :: [defines.alert_type](http://lua-api.factorio.com/latest/defines.html#defines.alert_type)"
          }
        }
      },
      "name": {
        "name": "name",
        "type": "string",
        "mode": "[R]",
        "doc": "The player's username."
      },
      "object_name": {
        "name": "object_name",
        "type": "string",
        "mode": "[R]",
        "doc": "The class name of this object."
      },
      "online_time": {
        "name": "online_time",
        "type": "uint",
        "mode": "[R]",
        "doc": "How many ticks did this player spend playing this save (all sessions combine"
      },
      "open_map": {
        "name": "open_map",
        "doc": "Queues a request to open the map at the specified position. If the map is already opened, the request will simply set the position (and scale  \nRender mode change requests are processed before rendering of the next fram    \n\n**Parameters**  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position)  \nscale :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional)",
        "type": "function",
        "args": {
          "position": {
            "name": "position",
            "type": "Position",
            "doc": "position :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position)"
          },
          "scale": {
            "name": "scale",
            "type": "double",
            "doc": "scale :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional)"
          }
        }
      },
      "open_technology_gui": {
        "name": "open_technology_gui",
        "doc": "Open the technology GUI and select a given technolog    \n\n**Parameters**  \ntechnology :: [TechnologySpecification](http://lua-api.factorio.com/latest/Concepts.html#TechnologySpecification) (optional): The technology to select after opening the GUI.",
        "type": "function",
        "args": {
          "technology": {
            "name": "technology",
            "type": "TechnologySpecification",
            "doc": "technology :: [TechnologySpecification](http://lua-api.factorio.com/latest/Concepts.html#TechnologySpecification) (optional): The technology to select after opening the GUI."
          }
        }
      },
      "opened": {
        "name": "opened",
        "type": "LuaEntity or LuaItemStack or LuaEquipment or LuaEquipmentGrid or LuaPlayer or LuaGuiElement or defines.gui_type",
        "mode": "[RW]",
        "doc": "The GUI target the player currently has open; ````\nnil````\nif non    \n\n**Note: ** Write supports any of the types. Read will return the entity, equipment, equipment-grid, player, element or nil."
      },
      "opened_gui_type": {
        "name": "opened_gui_type",
        "type": "defines.gui_type",
        "mode": "[R]",
        "doc": "Returns the [defines.gui_type](http://lua-api.factorio.com/latest/defines.html#defines.gui_type) or ````\nnil````\n."
      },
      "opened_self": {
        "name": "opened_self",
        "type": "boolean",
        "mode": "[R]",
        "doc": "````\ntrue````\nif the player opened itself. I.e. if they opened the character or god-controller GUI."
      },
      "permission_group": {
        "name": "permission_group",
        "type": "LuaPermissionGroup",
        "mode": "[RW]",
        "doc": "The permission group this player is part of or ````\nnil````\nif not part of any grou"
      },
      "picking_state": {
        "name": "picking_state",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "Current item-picking stat"
      },
      "pipette_entity": {
        "name": "pipette_entity",
        "type": "function",
        "doc": "Invokes the \"smart pipette\" action on the player as if the user pressed i    \n\n**Parameters**  \nentity :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) or [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html) or [LuaEntityPrototype](http://lua-api.factorio.com/latest/LuaEntityPrototype.html)  \n\n**Return value**  \nIf the smart pipette found something to place",
        "returns": "boolean",
        "args": {
          "entity": {
            "name": "entity",
            "type": "string or LuaEntity or LuaEntityPrototype",
            "doc": "entity :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) or [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html) or [LuaEntityPrototype](http://lua-api.factorio.com/latest/LuaEntityPrototype.html)"
          }
        }
      },
      "play_sound": {
        "name": "play_sound",
        "type": "function",
        "doc": "Plays a sound for this playe    \n\n**Parameters**  \nTable with the following fields:   \npath :: [SoundPath](http://lua-api.factorio.com/latest/Concepts.html#SoundPath): The sound to play  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) (optional): Where the sound should be played. If not given it's played 'everywhere'.  \nvolume_modifier :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional): Must be between 0 and 1 inclusive.  \noverride_sound_type :: [SoundType](http://lua-api.factorio.com/latest/Concepts.html#SoundType) (optional): Which volume mixer to play the sound through. Uses the default mixer for the sound type if not specified.",
        "returns": "boolean",
        "args": {
          "path": {
            "name": "path",
            "type": "SoundPath",
            "doc": "Table with the following fields:   \npath :: [SoundPath](http://lua-api.factorio.com/latest/Concepts.html#SoundPath): The sound to play  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) (optional): Where the sound should be played. If not given it's played 'everywhere'.  \nvolume_modifier :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional): Must be between 0 and 1 inclusive.  \noverride_sound_type :: [SoundType](http://lua-api.factorio.com/latest/Concepts.html#SoundType) (optional): Which volume mixer to play the sound through. Uses the default mixer for the sound type if not specified."
          }
        }
      },
      "position": {
        "name": "position",
        "type": "Position",
        "mode": "[R]",
        "doc": "Current position of the entity."
      },
      "print": {
        "name": "print",
        "doc": "Print text to the chat console.   \n\n**Parameters**  \nmessage :: [LocalisedString](http://lua-api.factorio.com/latest/Concepts.html#LocalisedString)  \ncolor :: [Color](http://lua-api.factorio.com/latest/Concepts.html#Color) (optional)  \n\n**Note: ** Messages that are identical to a message sent in the last 60 ticks are not printed again.",
        "type": "function",
        "args": {
          "color": {
            "name": "color",
            "type": "Color",
            "doc": "color :: [Color](http://lua-api.factorio.com/latest/Concepts.html#Color) (optional)"
          },
          "message": {
            "name": "message",
            "type": "LocalisedString",
            "doc": "message :: [LocalisedString](http://lua-api.factorio.com/latest/Concepts.html#LocalisedString)"
          }
        }
      },
      "print_entity_statistics": {
        "name": "print_entity_statistics",
        "doc": "Print entity statistics to the player's consol    \n\n**Parameters**  \nentities :: array of [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): Entity prototypes to get statistics for. If not specified or empt  \ndisplay statistics for all entities.",
        "type": "function",
        "args": {
          "entities": {
            "name": "entities",
            "type": "array of string",
            "doc": "entities :: array of [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): Entity prototypes to get statistics for. If not specified or empt  \ndisplay statistics for all entities."
          }
        }
      },
      "print_lua_object_statistics": {
        "name": "print_lua_object_statistics",
        "doc": "Print LuaObject counts per mod.",
        "type": "function"
      },
      "print_robot_jobs": {
        "name": "print_robot_jobs",
        "doc": "Print construction robot job counts to the players console.",
        "type": "function"
      },
      "reach_distance": {
        "name": "reach_distance",
        "type": "uint",
        "mode": "[R]",
        "doc": "The reach distance of this character or max uint when not a character or player connected to a characte"
      },
      "remove_alert": {
        "name": "remove_alert",
        "doc": "Removes all alerts matching the given filters or if an empty filters table is given all alerts are remove    \n\n**Parameters**  \nTable with the following fields:   \nentity :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html) (optional)  \nprototype :: [LuaEntityPrototype](http://lua-api.factorio.com/latest/LuaEntityPrototype.html) (optional)  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) (optional)  \ntype :: [defines.alert_type](http://lua-api.factorio.com/latest/defines.html#defines.alert_type) (optional)  \nsurface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification) (optional)  \nicon :: [SignalID](http://lua-api.factorio.com/latest/Concepts.html#SignalID) (optional)  \nmessage :: [LocalisedString](http://lua-api.factorio.com/latest/Concepts.html#LocalisedString) (optional)",
        "type": "function",
        "args": {
          "entity": {
            "name": "entity",
            "type": "LuaEntity",
            "doc": "Table with the following fields:   \nentity :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html) (optional)  \nprototype :: [LuaEntityPrototype](http://lua-api.factorio.com/latest/LuaEntityPrototype.html) (optional)  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) (optional)  \ntype :: [defines.alert_type](http://lua-api.factorio.com/latest/defines.html#defines.alert_type) (optional)  \nsurface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification) (optional)  \nicon :: [SignalID](http://lua-api.factorio.com/latest/Concepts.html#SignalID) (optional)  \nmessage :: [LocalisedString](http://lua-api.factorio.com/latest/Concepts.html#LocalisedString) (optional)"
          }
        }
      },
      "remove_item": {
        "name": "remove_item",
        "type": "function",
        "doc": "Remove items from this entity.   \n\n**Parameters**  \nitems :: [ItemStackSpecification](http://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification): Items to remove.  \n\n**Return value**  \nNumber of items actually removed.",
        "returns": "uint",
        "args": {
          "items": {
            "name": "items",
            "type": "ItemStackSpecification",
            "doc": "items :: [ItemStackSpecification](http://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification): Items to remove."
          }
        }
      },
      "remove_unfiltered_items": {
        "name": "remove_unfiltered_items",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "If items not included in this map editor infinity inventory filters should be remove"
      },
      "render_mode": {
        "name": "render_mode",
        "type": "defines.render_mode",
        "mode": "[R]",
        "doc": "The render mode of the player, like map or zoom to worl  \nThe render mode can be set using [LuaPlayer::open_map](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.open_map), [LuaPlayer::zoom_to_world](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.zoom_to_world) and [LuaPlayer::close_map](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.close_map"
      },
      "repair_state": {
        "name": "repair_state",
        "type": "table",
        "mode": "[RW]",
        "doc": "Current repair stat  \nIt is a table with two fields:   \nrepairing :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean): The current state  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): The position being repaired"
      },
      "request_translation": {
        "name": "request_translation",
        "type": "function",
        "doc": "Requests a translation for the given localised strin  \nIf the request is successful the [on_string_translated](http://lua-api.factorio.com/latest/events.html#on_string_translated) event will be fired at a later time with the result    \n\n**Parameters**  \nlocalised_string :: [LocalisedString](http://lua-api.factorio.com/latest/Concepts.html#LocalisedString)  \n\n**Return value**  \nIf the request was sent or not.  \n\n**Note: ** Does nothing if this player is not connected. (see [LuaPlayer::connected](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.connected)).",
        "returns": "boolean",
        "args": {
          "localised_string": {
            "name": "localised_string",
            "type": "LocalisedString",
            "doc": "localised_string :: [LocalisedString](http://lua-api.factorio.com/latest/Concepts.html#LocalisedString)"
          }
        }
      },
      "resource_reach_distance": {
        "name": "resource_reach_distance",
        "type": "double",
        "mode": "[R]",
        "doc": "The resource reach distance of this character or max double when not a character or player connected to a characte"
      },
      "riding_state": {
        "name": "riding_state",
        "type": "RidingState",
        "mode": "[RW]",
        "doc": "Current riding state of this car or the vehicle this player is riding i"
      },
      "selected": {
        "name": "selected",
        "type": "LuaEntity",
        "mode": "[RW]",
        "doc": "The currently selected entity; ````\nnil````\nif none. Assigning an entity will select it if selectable otherwise clears selection."
      },
      "set_active_quick_bar_page": {
        "name": "set_active_quick_bar_page",
        "doc": "Sets which quick bar page is being used for the given screen pag    \n\n**Parameters**  \nscreen_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The screen page. Index 1 is the top row in the gui. Index can go beyond the visible number of bars on the screen to account for the interface config setting change.  \npage_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The new quick bar page.",
        "type": "function",
        "args": {
          "page_index": {
            "name": "page_index",
            "type": "uint",
            "doc": "page_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The new quick bar page."
          },
          "screen_index": {
            "name": "screen_index",
            "type": "uint",
            "doc": "screen_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The screen page. Index 1 is the top row in the gui. Index can go beyond the visible number of bars on the screen to account for the interface config setting change."
          }
        }
      },
      "set_controller": {
        "name": "set_controller",
        "doc": "Set the controller type of the player.   \n\n**Parameters**  \nTable with the following fields:   \ntype :: [defines.controllers](http://lua-api.factorio.com/latest/defines.html#defines.controllers): Which controller to use  \ncharacter :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html) (optional): Entity to control. Mandatory when ````\ntype````  \n[defines.controllers.character](http://lua-api.factorio.com/latest/defines.html#defines.controllers.character), ignored otherwise.  \nwaypoints (optional): List of waypoints for the cutscene controller. This parameter is mandatory wh  \n````\ntype````\nis [defines.controllers.cutscene](http://lua-api.factorio.com/latest/defines.html#defines.controllers.cutscene). Each waypoint is a tabl    \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) (optional): Position to pan the camera to.  \ntarget :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html) or [LuaUnitGroup](http://lua-api.factorio.com/latest/LuaUnitGroup.html) (optional): Entity or unit group to pan the camera to.  \ntransition_time :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): How many ticks it will take to reach this waypoint from the previous one.  \ntime_to_wait :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): Time in ticks to wait before moving to the next waypoint.  \nzoom :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional): Zoom level to be set when the waypoint is reached. When not specified, t  \nprevious waypoint's zoom is used.  \nstart_position :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) (optional): If specified and ````\ntype````\nis [defines.controllers.cutscene](http://lua-api.factorio.com/latest/defines.html#defines.controllers.cutscene  \nthe cutscene will start at this position. If not given the start position will be the player position.  \nstart_zoom :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional): If specified and ````\ntype````\nis [defines.controllers.cutscene](http://lua-api.factorio.com/latest/defines.html#defines.controllers.cutscene  \nthe cutscene will start at this zoom level. If not given the start zoom will be the players zoom.  \nfinal_transition_time :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional): If specified and ````\ntype````\nis [defines.controllers.cutscene](http://lua-api.factorio.com/latest/defines.html#defines.controllers.cutscene  \nit is the time in ticks it will take for the camera to pan from the final waypoint back to the starti  \nposition. If not given the camera will not pan back to the start position/zoom.  \nchart_mode_cutoff :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional): If specified and ````\ntype````\nis [defines.controllers.cutscene](http://lua-api.factorio.com/latest/defines.html#defines.controllers.cutscene  \nthe game will switch to chart-mode (map zoomed out) rendering when the zoom level is less than this value.  \n\n**Note: ** Setting a player to [defines.controllers.editor](http://lua-api.factorio.com/latest/defines.html#defines.controllers.editor) auto promotes the player to admin and enables cheat mode.  \n\n**Note: ** Setting a player to [defines.controllers.editor](http://lua-api.factorio.com/latest/defines.html#defines.controllers.editor) also requires the calling player be an admin.",
        "type": "function",
        "args": {
          "type": {
            "name": "type",
            "type": "defines.controllers",
            "doc": "Table with the following fields:   \ntype :: [defines.controllers](http://lua-api.factorio.com/latest/defines.html#defines.controllers): Which controller to use  \ncharacter :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html) (optional): Entity to control. Mandatory when ````\ntype````  \n[defines.controllers.character](http://lua-api.factorio.com/latest/defines.html#defines.controllers.character), ignored otherwise.  \nwaypoints (optional): List of waypoints for the cutscene controller. This parameter is mandatory wh  \n````\ntype````\nis [defines.controllers.cutscene](http://lua-api.factorio.com/latest/defines.html#defines.controllers.cutscene). Each waypoint is a tabl    \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) (optional): Position to pan the camera to.  \ntarget :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html) or [LuaUnitGroup](http://lua-api.factorio.com/latest/LuaUnitGroup.html) (optional): Entity or unit group to pan the camera to.  \ntransition_time :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): How many ticks it will take to reach this waypoint from the previous one.  \ntime_to_wait :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): Time in ticks to wait before moving to the next waypoint.  \nzoom :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional): Zoom level to be set when the waypoint is reached. When not specified, t  \nprevious waypoint's zoom is used.  \nstart_position :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) (optional): If specified and ````\ntype````\nis [defines.controllers.cutscene](http://lua-api.factorio.com/latest/defines.html#defines.controllers.cutscene  \nthe cutscene will start at this position. If not given the start position will be the player position.  \nstart_zoom :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional): If specified and ````\ntype````\nis [defines.controllers.cutscene](http://lua-api.factorio.com/latest/defines.html#defines.controllers.cutscene  \nthe cutscene will start at this zoom level. If not given the start zoom will be the players zoom.  \nfinal_transition_time :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional): If specified and ````\ntype````\nis [defines.controllers.cutscene](http://lua-api.factorio.com/latest/defines.html#defines.controllers.cutscene  \nit is the time in ticks it will take for the camera to pan from the final waypoint back to the starti  \nposition. If not given the camera will not pan back to the start position/zoom.  \nchart_mode_cutoff :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional): If specified and ````\ntype````\nis [defines.controllers.cutscene](http://lua-api.factorio.com/latest/defines.html#defines.controllers.cutscene  \nthe game will switch to chart-mode (map zoomed out) rendering when the zoom level is less than this value."
          }
        }
      },
      "set_ending_screen_data": {
        "name": "set_ending_screen_data",
        "doc": "Setup the screen to be shown when the game is finished.   \n\n**Parameters**  \nmessage :: [LocalisedString](http://lua-api.factorio.com/latest/Concepts.html#LocalisedString): Message to be shown.  \nfile :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): Path to image to be shown.",
        "type": "function",
        "args": {
          "file": {
            "name": "file",
            "type": "string",
            "doc": "file :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): Path to image to be shown."
          },
          "message": {
            "name": "message",
            "type": "LocalisedString",
            "doc": "message :: [LocalisedString](http://lua-api.factorio.com/latest/Concepts.html#LocalisedString): Message to be shown."
          }
        }
      },
      "set_goal_description": {
        "name": "set_goal_description",
        "doc": "Set the text in the goal window (top left).   \n\n**Parameters**  \ntext :: [LocalisedString](http://lua-api.factorio.com/latest/Concepts.html#LocalisedString) (optional): The text to display. \\n can be used to delimit lines. Passing emp  \nstring or omitting this parameter entirely will make the goal window disappear.  \nonly_update :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): When ````\ntrue````\n, won't play the \"goal updated\" sound.",
        "type": "function",
        "args": {
          "only_update": {
            "name": "only_update",
            "type": "boolean",
            "doc": "only_update :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): When ````\ntrue````\n, won't play the \"goal updated\" sound."
          },
          "text": {
            "name": "text",
            "type": "LocalisedString",
            "doc": "text :: [LocalisedString](http://lua-api.factorio.com/latest/Concepts.html#LocalisedString) (optional): The text to display. \\n can be used to delimit lines. Passing emp  \nstring or omitting this parameter entirely will make the goal window disappear."
          }
        }
      },
      "set_gui_arrow": {
        "name": "set_gui_arrow",
        "doc": "Create an arrow which points at this entity. This is used in the tutorial. For examples, see ````\ncontrol.lua````  \nin the campaign missions.   \n\n**Parameters**  \nTable with the following fields:   \ntype :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Where to point to. This field determines what other fields are mandator  \nMay be ````\n\"nowhere\"````\n, ````\n\"goal\"````\n, ````\n\"entity_info\"````\n, ````\n\"active_window\"````\n, ````\n\"entity\"````\n, ````\n\"position\"````  \n````\n\"crafting_queue\"````\n, or ````\n\"item_stack\"````\n.  \nAdditional ````\ntype````\n-specific parameters  \nentity  \nentity :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)  \nposition  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position)  \ncrafting_queue  \ncrafting_queueindex :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \nitem_stack  \ninventory_index :: [defines.inventory](http://lua-api.factorio.com/latest/defines.html#defines.inventory)  \nitem_stack_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \nsource :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): May be either ````\n\"player\"````\nor ````\n\"target\"````\n.",
        "type": "function",
        "args": {
          "type": {
            "name": "type",
            "type": "string",
            "doc": "Table with the following fields:   \ntype :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Where to point to. This field determines what other fields are mandator  \nMay be ````\n\"nowhere\"````\n, ````\n\"goal\"````\n, ````\n\"entity_info\"````\n, ````\n\"active_window\"````\n, ````\n\"entity\"````\n, ````\n\"position\"````  \n````\n\"crafting_queue\"````\n, or ````\n\"item_stack\"````\n.  \nAdditional ````\ntype````\n-specific parameters  \nentity  \nentity :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)  \nposition  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position)  \ncrafting_queue  \ncrafting_queueindex :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \nitem_stack  \ninventory_index :: [defines.inventory](http://lua-api.factorio.com/latest/defines.html#defines.inventory)  \nitem_stack_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \nsource :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): May be either ````\n\"player\"````\nor ````\n\"target\"````\n."
          }
        }
      },
      "set_infinity_inventory_filter": {
        "name": "set_infinity_inventory_filter",
        "doc": "Sets the filter for this map editor infinity filters at the given inde    \n\n**Parameters**  \nindex :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The index to set.  \nfilter :: [InfinityInventoryFilter](http://lua-api.factorio.com/latest/Concepts.html#InfinityInventoryFilter): The new filter or ````\nnil````\nto clear the filter.  \n_Can only be used if this is InfinityContainer_",
        "type": "function",
        "args": {
          "filter": {
            "name": "filter",
            "type": "InfinityInventoryFilter",
            "doc": "filter :: [InfinityInventoryFilter](http://lua-api.factorio.com/latest/Concepts.html#InfinityInventoryFilter): The new filter or ````\nnil````\nto clear the filter."
          },
          "index": {
            "name": "index",
            "type": "uint",
            "doc": "index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The index to set."
          }
        }
      },
      "set_personal_logistic_slot": {
        "name": "set_personal_logistic_slot",
        "type": "function",
        "doc": "Sets the personal request and trash to the given value    \n\n**Parameters**  \nslot_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The slot to set/  \nvalue :: [PersonalLogistic\n\n**Parameters**  \n](http://lua-api.factorio.com/latest/Concepts.html#PersonalLogistic\n\n**Parameters**  \n)  \n\n**Return value**  \nIf the slot was set.  \n\n**Note: ** This will silently fail if personal logistics are not researched.",
        "returns": "boolean",
        "args": {
          "slot_index": {
            "name": "slot_index",
            "type": "uint",
            "doc": "slot_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The slot to set/"
          },
          "value": {
            "name": "value",
            "type": "PersonalLogisticParameters",
            "doc": "value :: [PersonalLogistic\n\n**Parameters**  \n](http://lua-api.factorio.com/latest/Concepts.html#PersonalLogistic\n\n**Parameters**  \n)"
          }
        }
      },
      "set_quick_bar_slot": {
        "name": "set_quick_bar_slot",
        "doc": "Sets the quick bar filter for the given slo    \n\n**Parameters**  \nindex :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The slot index. 1 for the first slot of page one, 2 for slot two of page one, 11 for the first slot of page 2, etc.  \nfilter :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) or [LuaItemPrototype](http://lua-api.factorio.com/latest/LuaItemPrototype.html) or [LuaItemStack](http://lua-api.factorio.com/latest/LuaItemStack.html): The filter or ````\nnil````\n.",
        "type": "function",
        "args": {
          "filter": {
            "name": "filter",
            "type": "string or LuaItemPrototype or LuaItemStack",
            "doc": "filter :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) or [LuaItemPrototype](http://lua-api.factorio.com/latest/LuaItemPrototype.html) or [LuaItemStack](http://lua-api.factorio.com/latest/LuaItemStack.html): The filter or ````\nnil````\n."
          },
          "index": {
            "name": "index",
            "type": "uint",
            "doc": "index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The slot index. 1 for the first slot of page one, 2 for slot two of page one, 11 for the first slot of page 2, etc."
          }
        }
      },
      "set_shortcut_available": {
        "name": "set_shortcut_available",
        "doc": "Make a custom Lua shortcut available or unavailabl    \n\n**Parameters**  \nprototype_name :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Prototype name of the custom shortcut.  \navailable :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean)",
        "type": "function",
        "args": {
          "available": {
            "name": "available",
            "type": "boolean",
            "doc": "available :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean)"
          },
          "prototype_name": {
            "name": "prototype_name",
            "type": "string",
            "doc": "prototype_name :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Prototype name of the custom shortcut."
          }
        }
      },
      "set_shortcut_toggled": {
        "name": "set_shortcut_toggled",
        "doc": "Toggle or untoggle a custom Lua shortc    \n\n**Parameters**  \nprototype_name :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Prototype name of the custom shortcut.  \ntoggled :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean)",
        "type": "function",
        "args": {
          "prototype_name": {
            "name": "prototype_name",
            "type": "string",
            "doc": "prototype_name :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Prototype name of the custom shortcut."
          },
          "toggled": {
            "name": "toggled",
            "type": "boolean",
            "doc": "toggled :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean)"
          }
        }
      },
      "set_vehicle_logistic_slot": {
        "name": "set_vehicle_logistic_slot",
        "type": "function",
        "doc": "Sets the vehicle logistic request and trash to the given value    \n\n**Parameters**  \nslot_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The slot to set/  \nvalue :: [PersonalLogistic\n\n**Parameters**  \n](http://lua-api.factorio.com/latest/Concepts.html#PersonalLogistic\n\n**Parameters**  \n)  \n\n**Return value**  \nIf the slot was set.  \n\n**Note: ** This will silently fail if the spider does not use logistics.",
        "returns": "boolean",
        "args": {
          "slot_index": {
            "name": "slot_index",
            "type": "uint",
            "doc": "slot_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The slot to set/"
          },
          "value": {
            "name": "value",
            "type": "PersonalLogisticParameters",
            "doc": "value :: [PersonalLogistic\n\n**Parameters**  \n](http://lua-api.factorio.com/latest/Concepts.html#PersonalLogistic\n\n**Parameters**  \n)"
          }
        }
      },
      "shooting_state": {
        "name": "shooting_state",
        "type": "table",
        "mode": "[RW]",
        "doc": "Current shooting stat  \nIt is a table with two fields:   \nstate :: [defines.shooting](http://lua-api.factorio.com/latest/defines.html#defines.shooting): The current state  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): The position being shot at"
      },
      "spectator": {
        "name": "spectator",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "If ````\ntrue````\n, zoom-to-world noise effect will be disabled and environmental sounds will be bas  \non zoom-to-world view instead of position of player's character."
      },
      "stashed_controller_type": {
        "name": "stashed_controller_type",
        "type": "defines.controllers",
        "mode": "[R]",
        "doc": "The stashed controller type or ````\nnil````\nif no controller is stashe    \n\n**Note: ** This is mainly useful when a player is in the map editor."
      },
      "surface": {
        "name": "surface",
        "type": "LuaSurface",
        "mode": "[R]",
        "doc": "The surface this entity is currently on."
      },
      "tag": {
        "name": "tag",
        "type": "string",
        "mode": "[RW]",
        "doc": "The tag that is shown after the player in chat and on the map."
      },
      "teleport": {
        "name": "teleport",
        "type": "function",
        "doc": "Teleport the entity to a given position, possibly on another surface    \n\n**Parameters**  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): Where to teleport to.  \nsurface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification) (optional): Surface to teleport to. If not given, will telepo  \nto the entity's current surface. Only players, cars, and spidertrons can be teleported cross-surface.  \n\n**Return value**  \n````\ntrue````\nwhen the entity was successfully teleported.  \n\n**Note: ** Some entities may not be teleported. For instance, transport bel  \nwon't allow teleportation and this method will always return ````\nfalse````\nwhen used on any such entity.  \n\n**Note: ** You can also pass 1 or 2 numbers as the parameters and they will be used as relative teleport coordinat  \n````\n'teleport(0, 1)'````\nto move the entity 1 tile positive   \n````\n'teleport(4)'````\nto move the entity 4 tiles to the positive x.",
        "returns": "boolean",
        "args": {
          "position": {
            "name": "position",
            "type": "Position",
            "doc": "position :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): Where to teleport to."
          },
          "surface": {
            "name": "surface",
            "type": "SurfaceSpecification",
            "doc": "surface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification) (optional): Surface to teleport to. If not given, will telepo  \nto the entity's current surface. Only players, cars, and spidertrons can be teleported cross-surface."
          }
        }
      },
      "ticks_to_respawn": {
        "name": "ticks_to_respawn",
        "type": "uint",
        "mode": "[RW]",
        "doc": "The number of ticks until this player will respawn or ````\nnil````\nif not waiting to respaw    \n\n**Note: ** Set to ````\nnil````\nto immediately respawn the player.  \n\n**Note: ** Set to any positive value to trigger the respawn state for this player."
      },
      "toggle_map_editor": {
        "name": "toggle_map_editor",
        "doc": "Toggles this player into or out of the map edito  \nDoes nothing if this player isn't an admin or if the player doesn't have permission to use the map editor.",
        "type": "function"
      },
      "unlock_achievement": {
        "name": "unlock_achievement",
        "doc": "Unlock the achievements of the given playe  \nThis has any effect only when this is the local player, the achievement isn't unlocked so far and the achievement is of the type \"achievement    \n\n**Parameters**  \nname :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): name of the achievement to unlock",
        "type": "function",
        "args": {
          "name": {
            "name": "name",
            "type": "string",
            "doc": "name :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): name of the achievement to unlock"
          }
        }
      },
      "unmute_alert": {
        "name": "unmute_alert",
        "type": "function",
        "doc": "Unmutes alerts for the given alert categor    \n\n**Parameters**  \nalert_type :: [defines.alert_type](http://lua-api.factorio.com/latest/defines.html#defines.alert_type)  \n\n**Return value**  \nIf the alert type was unmuted (false if it was wasn't muted).",
        "returns": "boolean",
        "args": {
          "alert_type": {
            "name": "alert_type",
            "type": "defines.alert_type",
            "doc": "alert_type :: [defines.alert_type](http://lua-api.factorio.com/latest/defines.html#defines.alert_type)"
          }
        }
      },
      "update_selected_entity": {
        "name": "update_selected_entity",
        "doc": "Select an entity, as if by hovering the mouse above it.   \n\n**Parameters**  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): Position of the entity to select",
        "type": "function",
        "args": {
          "position": {
            "name": "position",
            "type": "Position",
            "doc": "position :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): Position of the entity to select"
          }
        }
      },
      "use_from_cursor": {
        "name": "use_from_cursor",
        "doc": "Uses the current item in the cursor if it's a capsule or does nothing if no    \n\n**Parameters**  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): Where the item would be used.",
        "type": "function",
        "args": {
          "position": {
            "name": "position",
            "type": "Position",
            "doc": "position :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): Where the item would be used."
          }
        }
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      },
      "vehicle": {
        "name": "vehicle",
        "type": "LuaEntity",
        "mode": "[R]",
        "doc": "The vehicle the player is currently sitting in; ````\nnil````\nif none."
      },
      "vehicle_logistic_requests_enabled": {
        "name": "vehicle_logistic_requests_enabled",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "If personal logistic requests are enabled for this vehicle (spidertron)."
      },
      "walking_state": {
        "name": "walking_state",
        "type": "table",
        "mode": "[RW]",
        "doc": "Current walking stat  \nIt is a table with two fields:   \nwalking :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean): If ````\nfalse````\n, the player is currently not walking; otherwise it's going somewhere  \ndirection :: [defines.direction](http://lua-api.factorio.com/latest/defines.html#defines.direction): Direction where the player is walking  \n\n**Example**  \nMake the player go north. Note that a one-shot action like this will only make the player walk for one tic    \n````\ngame.player.walking_state = {walking = true, direction = defines.direction.north}````"
      },
      "zoom": {
        "name": "zoom",
        "type": "double",
        "mode": "[W]",
        "doc": "The player's zoom-level."
      },
      "zoom_to_world": {
        "name": "zoom_to_world",
        "doc": "Queues a request to zoom to world at the specified position. If the player is already zooming to world, the request will simply set the position (and scale  \nRender mode change requests are processed before rendering of the next fram    \n\n**Parameters**  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position)  \nscale :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional)",
        "type": "function",
        "args": {
          "position": {
            "name": "position",
            "type": "Position",
            "doc": "position :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position)"
          },
          "scale": {
            "name": "scale",
            "type": "double",
            "doc": "scale :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional)"
          }
        }
      }
    },
    "doc": "Setup the screen to be shown when the game is finished."
  },
  "LuaProfiler": {
    "name": "LuaProfiler",
    "type": "LuaProfiler",
    "inherits": [],
    "properties": {
      "add": {
        "name": "add",
        "doc": "Add the duration of another timer to this timer. Useful to reduce start/stop overhead when accumulating time onto many timers at onc    \n\n**Parameters**  \nother :: [LuaProfiler](http://lua-api.factorio.com/latest/LuaProfiler.html): The timer to add to this timer.  \n\n**Note: ** If other is running, the time to now will be added.",
        "type": "function",
        "args": {
          "other": {
            "name": "other",
            "type": "LuaProfiler",
            "doc": "other :: [LuaProfiler](http://lua-api.factorio.com/latest/LuaProfiler.html): The timer to add to this timer."
          }
        }
      },
      "divide": {
        "name": "divide",
        "doc": "Divides the current duration by a set value. Useful for calculating the average of many iteration    \n\n**Parameters**  \nnumber :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double): The number to divide by. Must be &gt; 0.  \n\n**Note: ** Does nothing if this isn't stopped.",
        "type": "function",
        "args": {
          "number": {
            "name": "number",
            "type": "double",
            "doc": "number :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double): The number to divide by. Must be &gt; 0."
          }
        }
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "object_name": {
        "name": "object_name",
        "type": "string",
        "mode": "[R]",
        "doc": "The class name of this object."
      },
      "reset": {
        "name": "reset",
        "doc": "Resets the clock, also restarting it.",
        "type": "function"
      },
      "restart": {
        "name": "restart",
        "doc": "Start the clock again, without resetting it.",
        "type": "function"
      },
      "stop": {
        "name": "stop",
        "doc": "Stops the clock.",
        "type": "function"
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": "Resets the clock, also restarting it."
  },
  "LuaProgrammableSpeakerControlBehavior": {
    "name": "LuaProgrammableSpeakerControlBehavior",
    "type": "LuaProgrammableSpeakerControlBehavior",
    "inherits": [
      "Inherited from LuaControlBehavior: get_circuit_network, type, entity"
    ],
    "properties": {
      "circuit_condition": {
        "name": "circuit_condition",
        "type": "CircuitConditionSpecification",
        "mode": "[RW]"
      },
      "circuit_parameters": {
        "name": "circuit_parameters",
        "type": "ProgrammableSpeakerCircuitParameters",
        "mode": "[RW]"
      },
      "entity": {
        "name": "entity",
        "type": "LuaEntity",
        "mode": "[R]",
        "doc": "The entity this control behavior belongs to."
      },
      "get_circuit_network": {
        "name": "get_circuit_network",
        "type": "function",
        "returns": "LuaCircuitNetwork",
        "args": {
          "circuit_connector": {
            "name": "circuit_connector",
            "type": "defines.circuit_connector_id",
            "doc": "circuit_connector :: [defines.circuit_connector_id](http://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional): The connector to get circuit network fo  \nMust be specified for entities with more than one circuit network connector."
          },
          "wire": {
            "name": "wire",
            "type": "defines.wire_type",
            "doc": "wire :: [defines.wire_type](http://lua-api.factorio.com/latest/defines.html#defines.wire_type): Wire color of the network connected to this entity."
          }
        },
        "doc": "**Parameters**  \nwire :: [defines.wire_type](http://lua-api.factorio.com/latest/defines.html#defines.wire_type): Wire color of the network connected to this entity.  \ncircuit_connector :: [defines.circuit_connector_id](http://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional): The connector to get circuit network fo  \nMust be specified for entities with more than one circuit network connector.  \n\n**Return value**  \nThe circuit network or nil."
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "object_name": {
        "name": "object_name",
        "type": "string",
        "mode": "[R]",
        "doc": "The class name of this object."
      },
      "type": {
        "name": "type",
        "type": "defines.control_behavior.type",
        "mode": "[R]",
        "doc": "The concrete type of this control behavior."
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": "Control behavior for programmable speakers."
  },
  "LuaRCON": {
    "name": "LuaRCON",
    "type": "LuaRCON",
    "inherits": [],
    "properties": {
      "object_name": {
        "name": "object_name",
        "type": "string",
        "mode": "[R]",
        "doc": "This object's nam"
      },
      "print": {
        "name": "print",
        "doc": "Print text to the calling RCON interface if an    \n\n**Parameters**  \nmessage :: [LocalisedString](http://lua-api.factorio.com/latest/Concepts.html#LocalisedString)",
        "type": "function",
        "args": {
          "message": {
            "name": "message",
            "type": "LocalisedString",
            "doc": "message :: [LocalisedString](http://lua-api.factorio.com/latest/Concepts.html#LocalisedString)"
          }
        }
      }
    },
    "doc": "Print text to the calling RCON interface if any."
  },
  "LuaRailChainSignalControlBehavior": {
    "name": "LuaRailChainSignalControlBehavior",
    "type": "LuaRailChainSignalControlBehavior",
    "inherits": [
      "Inherited from LuaControlBehavior: get_circuit_network, type, entity"
    ],
    "properties": {
      "blue_signal": {
        "name": "blue_signal",
        "type": "SignalID",
        "mode": "[RW]"
      },
      "entity": {
        "name": "entity",
        "type": "LuaEntity",
        "mode": "[R]",
        "doc": "The entity this control behavior belongs to."
      },
      "get_circuit_network": {
        "name": "get_circuit_network",
        "type": "function",
        "returns": "LuaCircuitNetwork",
        "args": {
          "circuit_connector": {
            "name": "circuit_connector",
            "type": "defines.circuit_connector_id",
            "doc": "circuit_connector :: [defines.circuit_connector_id](http://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional): The connector to get circuit network fo  \nMust be specified for entities with more than one circuit network connector."
          },
          "wire": {
            "name": "wire",
            "type": "defines.wire_type",
            "doc": "wire :: [defines.wire_type](http://lua-api.factorio.com/latest/defines.html#defines.wire_type): Wire color of the network connected to this entity."
          }
        },
        "doc": "**Parameters**  \nwire :: [defines.wire_type](http://lua-api.factorio.com/latest/defines.html#defines.wire_type): Wire color of the network connected to this entity.  \ncircuit_connector :: [defines.circuit_connector_id](http://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional): The connector to get circuit network fo  \nMust be specified for entities with more than one circuit network connector.  \n\n**Return value**  \nThe circuit network or nil."
      },
      "green_signal": {
        "name": "green_signal",
        "type": "SignalID",
        "mode": "[RW]"
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "object_name": {
        "name": "object_name",
        "type": "string",
        "mode": "[R]",
        "doc": "The class name of this object."
      },
      "orange_signal": {
        "name": "orange_signal",
        "type": "SignalID",
        "mode": "[RW]"
      },
      "red_signal": {
        "name": "red_signal",
        "type": "SignalID",
        "mode": "[RW]"
      },
      "type": {
        "name": "type",
        "type": "defines.control_behavior.type",
        "mode": "[R]",
        "doc": "The concrete type of this control behavior."
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": "Control behavior for rail chain signals."
  },
  "LuaRailPath": {
    "name": "LuaRailPath",
    "type": "LuaRailPath",
    "inherits": [],
    "properties": {
      "current": {
        "name": "current",
        "type": "uint",
        "mode": "[R]",
        "doc": "The current rail inde"
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "object_name": {
        "name": "object_name",
        "type": "string",
        "mode": "[R]",
        "doc": "The class name of this object."
      },
      "rails": {
        "name": "rails",
        "type": "CustomDictionary uint → LuaEntity",
        "mode": "[R]",
        "doc": "The rails this path travel"
      },
      "size": {
        "name": "size",
        "type": "uint",
        "mode": "[R]",
        "doc": "The total number of rails in this pat"
      },
      "total_distance": {
        "name": "total_distance",
        "type": "double",
        "mode": "[R]",
        "doc": "The total path distanc"
      },
      "travelled_distance": {
        "name": "travelled_distance",
        "type": "double",
        "mode": "[R]",
        "doc": "The total distance travelle"
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": "The total number of rails in this path."
  },
  "LuaRailSignalControlBehavior": {
    "name": "LuaRailSignalControlBehavior",
    "type": "LuaRailSignalControlBehavior",
    "inherits": [
      "Inherited from LuaControlBehavior: get_circuit_network, type, entity"
    ],
    "properties": {
      "circuit_condition": {
        "name": "circuit_condition",
        "type": "CircuitConditionSpecification",
        "mode": "[RW]",
        "doc": "The circuit condition when controlling the signal through the circuit networ"
      },
      "close_signal": {
        "name": "close_signal",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "If this will close the rail signal based off the circuit conditio"
      },
      "entity": {
        "name": "entity",
        "type": "LuaEntity",
        "mode": "[R]",
        "doc": "The entity this control behavior belongs to."
      },
      "get_circuit_network": {
        "name": "get_circuit_network",
        "type": "function",
        "returns": "LuaCircuitNetwork",
        "args": {
          "circuit_connector": {
            "name": "circuit_connector",
            "type": "defines.circuit_connector_id",
            "doc": "circuit_connector :: [defines.circuit_connector_id](http://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional): The connector to get circuit network fo  \nMust be specified for entities with more than one circuit network connector."
          },
          "wire": {
            "name": "wire",
            "type": "defines.wire_type",
            "doc": "wire :: [defines.wire_type](http://lua-api.factorio.com/latest/defines.html#defines.wire_type): Wire color of the network connected to this entity."
          }
        },
        "doc": "**Parameters**  \nwire :: [defines.wire_type](http://lua-api.factorio.com/latest/defines.html#defines.wire_type): Wire color of the network connected to this entity.  \ncircuit_connector :: [defines.circuit_connector_id](http://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional): The connector to get circuit network fo  \nMust be specified for entities with more than one circuit network connector.  \n\n**Return value**  \nThe circuit network or nil."
      },
      "green_signal": {
        "name": "green_signal",
        "type": "SignalID",
        "mode": "[RW]"
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "object_name": {
        "name": "object_name",
        "type": "string",
        "mode": "[R]",
        "doc": "The class name of this object."
      },
      "orange_signal": {
        "name": "orange_signal",
        "type": "SignalID",
        "mode": "[RW]"
      },
      "read_signal": {
        "name": "read_signal",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "If this will read the rail signal stat"
      },
      "red_signal": {
        "name": "red_signal",
        "type": "SignalID",
        "mode": "[RW]"
      },
      "type": {
        "name": "type",
        "type": "defines.control_behavior.type",
        "mode": "[R]",
        "doc": "The concrete type of this control behavior."
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": "Control behavior for rail signals."
  },
  "LuaRandomGenerator": {
    "name": "LuaRandomGenerator",
    "type": "LuaRandomGenerator",
    "inherits": [],
    "properties": {
      "()": {
        "name": "()",
        "type": "function",
        "doc": "Generates a random numbe  \nIf no parameters are given a number in the [0, 1) range is returne  \nIf a single parameter is given a floored number in the [1, N] range is returne  \nIf 2 parameters are given a floored number in the [N1, N2] range is returne    \n\n**Parameters**  \nlower :: [int](http://lua-api.factorio.com/latest/Builtin-Types.html#int) (optional): Inclusive lower bound on the result  \nupper :: [int](http://lua-api.factorio.com/latest/Builtin-Types.html#int) (optional): Inclusive upper bound on the result",
        "returns": "double",
        "args": {
          "lower": {
            "name": "lower",
            "type": "int",
            "doc": "lower :: [int](http://lua-api.factorio.com/latest/Builtin-Types.html#int) (optional): Inclusive lower bound on the result"
          },
          "upper": {
            "name": "upper",
            "type": "int",
            "doc": "upper :: [int](http://lua-api.factorio.com/latest/Builtin-Types.html#int) (optional): Inclusive upper bound on the result"
          }
        }
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "object_name": {
        "name": "object_name",
        "type": "string",
        "mode": "[R]",
        "doc": "The class name of this object."
      },
      "re_seed": {
        "name": "re_seed",
        "doc": "Re-seeds the random generator with the given valu    \n\n**Parameters**  \nseed :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \n\n**Note: ** Seeds that are close together will produce similar results. Seeds from 0 to 341 will produce the same results.",
        "type": "function",
        "args": {
          "seed": {
            "name": "seed",
            "type": "uint",
            "doc": "seed :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)"
          }
        }
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": "Generates a random number.\n If no parameters are given a number in the [0, 1) range is returned.\n If a single parameter is given a floored number in the [1, N] range is returned.\n If 2 parameters are given a floored number in the [N1, N2] range is returned."
  },
  "LuaRecipe": {
    "name": "LuaRecipe",
    "type": "LuaRecipe",
    "inherits": [],
    "properties": {
      "category": {
        "name": "category",
        "type": "string",
        "mode": "[R]",
        "doc": "Category of the recip"
      },
      "enabled": {
        "name": "enabled",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "Can the recipe be use"
      },
      "energy": {
        "name": "energy",
        "type": "double",
        "mode": "[R]",
        "doc": "Energy required to execute this recipe. This directly affects the crafting time: Recipe's ener  \nis exactly its crafting time in seconds, when crafted in an assembling machine with crafting spe  \nexactly equal to one."
      },
      "force": {
        "name": "force",
        "type": "LuaForce",
        "mode": "[R]",
        "doc": "The force that owns this recip"
      },
      "group": {
        "name": "group",
        "type": "LuaGroup",
        "mode": "[R]",
        "doc": "Group of this recip"
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "hidden": {
        "name": "hidden",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is the recipe hidden? Hidden recipe don't show up in the crafting men"
      },
      "hidden_from_flow_stats": {
        "name": "hidden_from_flow_stats",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "Is the recipe hidden from flow statistic"
      },
      "ingredients": {
        "name": "ingredients",
        "type": "array of Ingredient",
        "mode": "[R]",
        "doc": "Ingredients for this recip    \n\n**Example**  \nWhat the \"steel-chest\" recipe would retu    \n````\n{ {type=\"item\", name=\"steel-plate\", amount=8} }````  \n\n**Example**  \nWhat the \"advanced-oil-processing\" recipe would retu    \n````\n{ {type=\"fluid\", name=\"crude-oil\", amount=10}, {type=\"fluid\", name=\"water\", amount=5} }````"
      },
      "localised_description": {
        "name": "localised_description",
        "type": "LocalisedString",
        "mode": "[R]"
      },
      "localised_name": {
        "name": "localised_name",
        "type": "LocalisedString",
        "mode": "[R]",
        "doc": "Localised name of the recip"
      },
      "name": {
        "name": "name",
        "type": "string",
        "mode": "[R]",
        "doc": "Name of the recipe. This can be different than the name of the result items as there cou  \nbe more recipes to make the same ite"
      },
      "object_name": {
        "name": "object_name",
        "type": "string",
        "mode": "[R]",
        "doc": "The class name of this object."
      },
      "order": {
        "name": "order",
        "type": "string",
        "mode": "[R]",
        "doc": "Order string. This is used to sort the crafting men"
      },
      "products": {
        "name": "products",
        "type": "array of Product",
        "mode": "[R]",
        "doc": "The results of this recipe."
      },
      "prototype": {
        "name": "prototype",
        "type": "LuaRecipePrototype",
        "mode": "[R]",
        "doc": "The prototype for this recip"
      },
      "reload": {
        "name": "reload",
        "doc": "Reload the recipe from the prototype.",
        "type": "function"
      },
      "subgroup": {
        "name": "subgroup",
        "type": "LuaGroup",
        "mode": "[R]",
        "doc": "Subgroup of this recip"
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": "Reload the recipe from the prototype."
  },
  "LuaRecipeCategoryPrototype": {
    "name": "LuaRecipeCategoryPrototype",
    "type": "LuaRecipeCategoryPrototype",
    "inherits": [],
    "properties": {
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "localised_description": {
        "name": "localised_description",
        "type": "LocalisedString",
        "mode": "[R]"
      },
      "localised_name": {
        "name": "localised_name",
        "type": "LocalisedString",
        "mode": "[R]"
      },
      "name": {
        "name": "name",
        "type": "string",
        "mode": "[R]",
        "doc": "Name of this prototype."
      },
      "object_name": {
        "name": "object_name",
        "type": "string",
        "mode": "[R]",
        "doc": "The class name of this object."
      },
      "order": {
        "name": "order",
        "type": "string",
        "mode": "[R]",
        "doc": "Order string of this prototype."
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": ""
  },
  "LuaRecipePrototype": {
    "name": "LuaRecipePrototype",
    "type": "LuaRecipePrototype",
    "inherits": [],
    "properties": {
      "allow_as_intermediate": {
        "name": "allow_as_intermediate",
        "type": "boolean",
        "mode": "[R]",
        "doc": "If this recipe is enabled for the purpose of intermediate hand-craftin"
      },
      "allow_decomposition": {
        "name": "allow_decomposition",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this recipe allowed to be broken down for the recipe tooltip \"Total raw\" calculation"
      },
      "allow_inserter_overload": {
        "name": "allow_inserter_overload",
        "type": "boolean",
        "mode": "[R]",
        "doc": "If the recipe is allowed to have the extra inserter overload bonus applied (4 * stack inserter stack size"
      },
      "allow_intermediates": {
        "name": "allow_intermediates",
        "type": "boolean",
        "mode": "[R]",
        "doc": "If this recipe is allowed to use intermediate recipes when hand-craftin"
      },
      "always_show_made_in": {
        "name": "always_show_made_in",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Should this recipe always show \"Made in\" in the toolti"
      },
      "always_show_products": {
        "name": "always_show_products",
        "type": "boolean",
        "mode": "[R]",
        "doc": "If the products are always shown in the recipe toolti"
      },
      "category": {
        "name": "category",
        "type": "string",
        "mode": "[R]",
        "doc": "Category of the recip"
      },
      "emissions_multiplier": {
        "name": "emissions_multiplier",
        "type": "double",
        "mode": "[R]",
        "doc": "The emissions multiplier for this recip"
      },
      "enabled": {
        "name": "enabled",
        "type": "boolean",
        "mode": "[R]",
        "doc": "If this recipe prototype is enabled by default (enabled at the beginning of a game"
      },
      "energy": {
        "name": "energy",
        "type": "double",
        "mode": "[R]",
        "doc": "Energy required to execute this recipe. This directly affects the crafting time: Recipe's ener  \nis exactly its crafting time in seconds, when crafted in an assembling machine with crafting spe  \nexactly equal to one."
      },
      "group": {
        "name": "group",
        "type": "LuaGroup",
        "mode": "[R]",
        "doc": "Group of this recip"
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "hidden": {
        "name": "hidden",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is the recipe hidden? Hidden recipe don't show up in the crafting men"
      },
      "hidden_from_flow_stats": {
        "name": "hidden_from_flow_stats",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is the recipe hidden from flow statistics (item/fluid production statistics"
      },
      "hidden_from_player_crafting": {
        "name": "hidden_from_player_crafting",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is the recipe hidden from player crafting? The recipe will still show up for selection in machine"
      },
      "ingredients": {
        "name": "ingredients",
        "type": "array of Ingredient",
        "mode": "[R]",
        "doc": "Ingredients for this recip"
      },
      "localised_description": {
        "name": "localised_description",
        "type": "LocalisedString",
        "mode": "[R]"
      },
      "localised_name": {
        "name": "localised_name",
        "type": "LocalisedString",
        "mode": "[R]",
        "doc": "Localised name of the recip"
      },
      "main_product": {
        "name": "main_product",
        "type": "Product",
        "mode": "[R]",
        "doc": "The main product of this recipe, ````\nnil````\nif no main product is defined."
      },
      "name": {
        "name": "name",
        "type": "string",
        "mode": "[R]",
        "doc": "Name of the recipe. This can be different than the name of the result items as there cou  \nbe more recipes to make the same ite"
      },
      "object_name": {
        "name": "object_name",
        "type": "string",
        "mode": "[R]",
        "doc": "The class name of this object."
      },
      "order": {
        "name": "order",
        "type": "string",
        "mode": "[R]",
        "doc": "Order string. This is used to sort the crafting men"
      },
      "overload_multiplier": {
        "name": "overload_multiplier",
        "type": "uint",
        "mode": "[R]",
        "doc": "Used to determine how many extra items are put into an assembling machine before it's considered \"full enough"
      },
      "products": {
        "name": "products",
        "type": "array of Product",
        "mode": "[R]",
        "doc": "The results of this recipe."
      },
      "request_paste_multiplier": {
        "name": "request_paste_multiplier",
        "type": "uint",
        "mode": "[R]",
        "doc": "The multiplier used when this recipe is copied from an assembling machine to a requester ches  \nFor each item in the recipe the item count * this value is set in the requester ches"
      },
      "show_amount_in_title": {
        "name": "show_amount_in_title",
        "type": "boolean",
        "mode": "[R]",
        "doc": "If the amount is shown in the recipe tooltip title when the recipe produces more than 1 produc"
      },
      "subgroup": {
        "name": "subgroup",
        "type": "LuaGroup",
        "mode": "[R]",
        "doc": "Subgroup of this recip"
      },
      "unlock_results": {
        "name": "unlock_results",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this recipe unlocks the result item(s) so they're shown in filter-select GUI"
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": "If this recipe prototype is enabled by default (enabled at the beginning of a game)."
  },
  "LuaRemote": {
    "name": "LuaRemote",
    "type": "LuaRemote",
    "inherits": [],
    "properties": {
      "add_interface": {
        "name": "add_interface",
        "doc": "Add a remote interface    \n\n**Parameters**  \nname :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Name of the interface.  \nfunctions :: dictionary [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) → function: List of functions that are members of the new interface.  \n\n**Note: ** It is an error if the given interface ````\nname````\nis already registered.",
        "type": "function",
        "args": {
          "functions": {
            "name": "functions",
            "type": "dictionary string → function",
            "doc": "functions :: dictionary [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) → function: List of functions that are members of the new interface."
          },
          "name": {
            "name": "name",
            "type": "string",
            "doc": "name :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Name of the interface."
          }
        }
      },
      "call": {
        "name": "call",
        "doc": "Call a function of an interface.   \n\n**Parameters**  \ninterface :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Interface to look up ````\nfunction````\nin.  \nfunction :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Function name that belongs to ````\ninterface````\n.  \n...: Arguments to pass to the called function.  \n\n**Return value**  \nAnything, including most LuaObjects.",
        "type": "function",
        "returns": "Anything",
        "args": {
          "...": {
            "name": "...",
            "doc": "...: Arguments to pass to the called function.",
            "type": "..."
          },
          "function": {
            "name": "function",
            "type": "string",
            "doc": "function :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Function name that belongs to ````\ninterface````\n."
          },
          "interface": {
            "name": "interface",
            "type": "string",
            "doc": "interface :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Interface to look up ````\nfunction````\nin."
          }
        }
      },
      "interfaces": {
        "name": "interfaces",
        "type": "dictionary string → dictionary string → boolean",
        "mode": "[R]",
        "doc": "List of all registered interfaces. For each interface name, ````\nremote.interfaces[name]````\nis a dictiona  \nmapping the interface's registered functions to the value ````\ntrue````\n.   \n\n**Example**  \nAssuming the \"human interactor\" interface is registered as abo    \n````\ngame.player.print(tostring(remote.interfaces[\"human interactor\"][\"hello\"]))        -- prints true  \ngame.player.print(tostring(remote.interfaces[\"human interactor\"][\"nonexistent\"]))  -- prints nil````"
      },
      "object_name": {
        "name": "object_name",
        "type": "string",
        "mode": "[R]",
        "doc": "This object's nam"
      },
      "remove_interface": {
        "name": "remove_interface",
        "type": "function",
        "doc": "Removes an interface with the given nam    \n\n**Parameters**  \nname :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Name of the interface.  \n\n**Return value**  \nIf the interface was removed. ````\nFalse````\nif the interface didn't exist.",
        "returns": "boolean",
        "args": {
          "name": {
            "name": "name",
            "type": "string",
            "doc": "name :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Name of the interface."
          }
        }
      }
    },
    "doc": "Add a remote interface."
  },
  "LuaRendering": {
    "name": "LuaRendering",
    "type": "LuaRendering",
    "inherits": [],
    "properties": {
      "bring_to_front": {
        "name": "bring_to_front",
        "doc": "Reorder this object so that it is drawn in front of the already existing object    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)",
        "type": "function",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "clear": {
        "name": "clear",
        "doc": "Destroys all render object    \n\n**Parameters**  \nmod_name :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): If provided, only the render objects created by this mod are destroyed.",
        "type": "function",
        "args": {
          "mod_name": {
            "name": "mod_name",
            "type": "string",
            "doc": "mod_name :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): If provided, only the render objects created by this mod are destroyed."
          }
        }
      },
      "destroy": {
        "name": "destroy",
        "doc": "Destroy the object with the given i    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)",
        "type": "function",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "draw_animation": {
        "name": "draw_animation",
        "type": "function",
        "doc": "Create an animatio    \n\n**Parameters**  \nTable with the following fields:   \nanimation :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Name of an <a href=\"https://wiki.factorio.com/Prototype/Animation\"> animation prototype</a>.  \norientation :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float) (optional): The orientation of the animation. Default is 0.  \nx_scale :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional): Horizontal scale of the animation. Default is 1.  \ny_scale :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional): Vertical scale of the animation. Default is 1.  \ntint :: [Color](http://lua-api.factorio.com/latest/Concepts.html#Color) (optional)  \nrender_layer :: [RenderLayer](http://lua-api.factorio.com/latest/Concepts.html#RenderLayer) (optional)  \nanimation_speed :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional): How many frames the animation goes forward per tick. Default is 1.  \nanimation_offset :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional): Offset of the animation in frames. Default is 0.  \norientation_target :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html) (optional): If given, the animation rotates so that it faces this target. Note that ````\norientation````\nis still applied to the animation.  \norientation_target_offset :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector) (optional): Only used if ````\norientation_target````\nis a LuaEntity.  \noriented_offset :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector) (optional): Offsets the center of the animation if ````\norientation_target````\nis given. This offset will rotate together with the animation.  \ntarget :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html): Center of the animation.  \ntarget_offset :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector) (optional): Only used if ````\ntarget````\nis a LuaEntity.  \nsurface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification)  \ntime_to_live :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional): In ticks. Defaults to living forever.  \nforces :: array of [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional): The forces that this object is rendered to.  \nplayers :: array of [PlayerSpecification](http://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional): The players that this object is rendered to.  \nvisible :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If this is rendered to anyone at all. Defaults to true.  \nonly_in_alt_mode :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If this should only be rendered in alt mode. Defaults to false.  \n\n**Return value**  \nId of the render object",
        "returns": "uint64",
        "args": {
          "animation": {
            "name": "animation",
            "type": "string",
            "doc": "Table with the following fields:   \nanimation :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Name of an <a href=\"https://wiki.factorio.com/Prototype/Animation\"> animation prototype</a>.  \norientation :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float) (optional): The orientation of the animation. Default is 0.  \nx_scale :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional): Horizontal scale of the animation. Default is 1.  \ny_scale :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional): Vertical scale of the animation. Default is 1.  \ntint :: [Color](http://lua-api.factorio.com/latest/Concepts.html#Color) (optional)  \nrender_layer :: [RenderLayer](http://lua-api.factorio.com/latest/Concepts.html#RenderLayer) (optional)  \nanimation_speed :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional): How many frames the animation goes forward per tick. Default is 1.  \nanimation_offset :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional): Offset of the animation in frames. Default is 0.  \norientation_target :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html) (optional): If given, the animation rotates so that it faces this target. Note that ````\norientation````\nis still applied to the animation.  \norientation_target_offset :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector) (optional): Only used if ````\norientation_target````\nis a LuaEntity.  \noriented_offset :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector) (optional): Offsets the center of the animation if ````\norientation_target````\nis given. This offset will rotate together with the animation.  \ntarget :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html): Center of the animation.  \ntarget_offset :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector) (optional): Only used if ````\ntarget````\nis a LuaEntity.  \nsurface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification)  \ntime_to_live :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional): In ticks. Defaults to living forever.  \nforces :: array of [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional): The forces that this object is rendered to.  \nplayers :: array of [PlayerSpecification](http://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional): The players that this object is rendered to.  \nvisible :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If this is rendered to anyone at all. Defaults to true.  \nonly_in_alt_mode :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If this should only be rendered in alt mode. Defaults to false."
          }
        }
      },
      "draw_arc": {
        "name": "draw_arc",
        "type": "function",
        "doc": "Create an ar    \n\n**Parameters**  \nTable with the following fields:   \ncolor :: [Color](http://lua-api.factorio.com/latest/Concepts.html#Color)  \nmax_radius :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double): The radius of the outer edge of the arc, in tiles.  \nmin_radius :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double): The radius of the inner edge of the arc, in tiles.  \nstart_angle :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float): Where the arc starts, in radian.  \nangle :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float): The angle of the arc, in radian.  \ntarget :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)  \ntarget_offset :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector) (optional): Only used if ````\ntarget````\nis a LuaEntity.  \nsurface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification)  \ntime_to_live :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional): In ticks. Defaults to living forever.  \nforces :: array of [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional): The forces that this object is rendered to.  \nplayers :: array of [PlayerSpecification](http://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional): The players that this object is rendered to.  \nvisible :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If this is rendered to anyone at all. Defaults to true.  \ndraw_on_ground :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If this should be drawn below sprites and entities.  \nonly_in_alt_mode :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If this should only be rendered in alt mode. Defaults to false.  \n\n**Return value**  \nId of the render object",
        "returns": "uint64",
        "args": {
          "color": {
            "name": "color",
            "type": "Color",
            "doc": "Table with the following fields:   \ncolor :: [Color](http://lua-api.factorio.com/latest/Concepts.html#Color)  \nmax_radius :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double): The radius of the outer edge of the arc, in tiles.  \nmin_radius :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double): The radius of the inner edge of the arc, in tiles.  \nstart_angle :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float): Where the arc starts, in radian.  \nangle :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float): The angle of the arc, in radian.  \ntarget :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)  \ntarget_offset :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector) (optional): Only used if ````\ntarget````\nis a LuaEntity.  \nsurface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification)  \ntime_to_live :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional): In ticks. Defaults to living forever.  \nforces :: array of [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional): The forces that this object is rendered to.  \nplayers :: array of [PlayerSpecification](http://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional): The players that this object is rendered to.  \nvisible :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If this is rendered to anyone at all. Defaults to true.  \ndraw_on_ground :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If this should be drawn below sprites and entities.  \nonly_in_alt_mode :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If this should only be rendered in alt mode. Defaults to false."
          }
        }
      },
      "draw_circle": {
        "name": "draw_circle",
        "type": "function",
        "doc": "Create a circl    \n\n**Parameters**  \nTable with the following fields:   \ncolor :: [Color](http://lua-api.factorio.com/latest/Concepts.html#Color)  \nradius :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double): In tiles.  \nwidth :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float) (optional): Width of the outline, used only if filled = false. Value is in pixels (32 per tile).  \nfilled :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean): If the circle should be filled.  \ntarget :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)  \ntarget_offset :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector) (optional): Only used if ````\ntarget````\nis a LuaEntity.  \nsurface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification)  \ntime_to_live :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional): In ticks. Defaults to living forever.  \nforces :: array of [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional): The forces that this object is rendered to.  \nplayers :: array of [PlayerSpecification](http://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional): The players that this object is rendered to.  \nvisible :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If this is rendered to anyone at all. Defaults to true.  \ndraw_on_ground :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If this should be drawn below sprites and entities.  \nonly_in_alt_mode :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If this should only be rendered in alt mode. Defaults to false.  \n\n**Return value**  \nId of the render object",
        "returns": "uint64",
        "args": {
          "color": {
            "name": "color",
            "type": "Color",
            "doc": "Table with the following fields:   \ncolor :: [Color](http://lua-api.factorio.com/latest/Concepts.html#Color)  \nradius :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double): In tiles.  \nwidth :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float) (optional): Width of the outline, used only if filled = false. Value is in pixels (32 per tile).  \nfilled :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean): If the circle should be filled.  \ntarget :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)  \ntarget_offset :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector) (optional): Only used if ````\ntarget````\nis a LuaEntity.  \nsurface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification)  \ntime_to_live :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional): In ticks. Defaults to living forever.  \nforces :: array of [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional): The forces that this object is rendered to.  \nplayers :: array of [PlayerSpecification](http://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional): The players that this object is rendered to.  \nvisible :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If this is rendered to anyone at all. Defaults to true.  \ndraw_on_ground :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If this should be drawn below sprites and entities.  \nonly_in_alt_mode :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If this should only be rendered in alt mode. Defaults to false."
          }
        }
      },
      "draw_light": {
        "name": "draw_light",
        "type": "function",
        "doc": "Create a ligh    \n\n**Parameters**  \nTable with the following fields:   \nsprite :: [SpritePath](http://lua-api.factorio.com/latest/Concepts.html#SpritePath)  \norientation :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float) (optional): The orientation of the light. Default is 0.  \nscale :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float) (optional): Default is 1.  \nintensity :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float) (optional): Default is 1.  \nminimum_darkness :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float) (optional): The minimum darkness at which this light is rendered. Default is 0.  \noriented :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If this light has the same orientation as the entity target, default is false. Note that ````\norientation````\nis still applied to the sprite.  \ncolor :: [Color](http://lua-api.factorio.com/latest/Concepts.html#Color) (optional): Defaults to white (no tint).  \ntarget :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html): Center of the light.  \ntarget_offset :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector) (optional): Only used if ````\ntarget````\nis a LuaEntity.  \nsurface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification)  \ntime_to_live :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional): In ticks. Defaults to living forever.  \nforces :: array of [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional): The forces that this object is rendered to.  \nplayers :: array of [PlayerSpecification](http://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional): The players that this object is rendered to.  \nvisible :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If this is rendered to anyone at all. Defaults to true.  \nonly_in_alt_mode :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If this should only be rendered in alt mode. Defaults to false.  \n\n**Return value**  \nId of the render object  \n\n**Note: ** The base game uses the utility sprites ````\nlight_medium````\nand ````\nlight_small````\nfor lights.",
        "returns": "uint64",
        "args": {
          "sprite": {
            "name": "sprite",
            "type": "SpritePath",
            "doc": "Table with the following fields:   \nsprite :: [SpritePath](http://lua-api.factorio.com/latest/Concepts.html#SpritePath)  \norientation :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float) (optional): The orientation of the light. Default is 0.  \nscale :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float) (optional): Default is 1.  \nintensity :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float) (optional): Default is 1.  \nminimum_darkness :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float) (optional): The minimum darkness at which this light is rendered. Default is 0.  \noriented :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If this light has the same orientation as the entity target, default is false. Note that ````\norientation````\nis still applied to the sprite.  \ncolor :: [Color](http://lua-api.factorio.com/latest/Concepts.html#Color) (optional): Defaults to white (no tint).  \ntarget :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html): Center of the light.  \ntarget_offset :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector) (optional): Only used if ````\ntarget````\nis a LuaEntity.  \nsurface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification)  \ntime_to_live :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional): In ticks. Defaults to living forever.  \nforces :: array of [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional): The forces that this object is rendered to.  \nplayers :: array of [PlayerSpecification](http://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional): The players that this object is rendered to.  \nvisible :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If this is rendered to anyone at all. Defaults to true.  \nonly_in_alt_mode :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If this should only be rendered in alt mode. Defaults to false."
          }
        }
      },
      "draw_line": {
        "name": "draw_line",
        "type": "function",
        "doc": "Create a lin    \n\n**Parameters**  \nTable with the following fields:   \ncolor :: [Color](http://lua-api.factorio.com/latest/Concepts.html#Color)  \nwidth :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float): In pixels (32 per tile).  \ngap_length :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional): Length of the gaps that this line has, in tiles. Default is 0.  \ndash_length :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional): Length of the dashes that this line has. Used only if gap_length &gt; 0. Default is 0.  \nfrom :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)  \nfrom_offset :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector) (optional): Only used if ````\nfrom````\nis a LuaEntity.  \nto :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)  \nto_offset :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector) (optional): Only used if ````\nto````\nis a LuaEntity.  \nsurface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification)  \ntime_to_live :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional): In ticks. Defaults to living forever.  \nforces :: array of [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional): The forces that this object is rendered to.  \nplayers :: array of [PlayerSpecification](http://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional): The players that this object is rendered to.  \nvisible :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If this is rendered to anyone at all. Defaults to true.  \ndraw_on_ground :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If this should be drawn below sprites and entities.  \nonly_in_alt_mode :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If this should only be rendered in alt mode. Defaults to false.  \n\n**Return value**  \nId of the render object  \n\n**Example**  \nDraw a white and 2 pixel wide line from {0, 0} to {2, 2    \n````\nrendering.draw_line{surface = game.player.surface, from = {0, 0}, to = {2, 2}, color = {1, 1, 1}, width = 2}````  \n\n**Example**  \nDraw a red and 3 pixel wide line from {0, 0} to {0, 5}. The line has 1 tile long dashes and gap    \n````\nrendering.draw_line{surface = game.player.surface, from = {0, 0}, to = {0, 5}, color = {r = 1}, width = 3, gap_length = 1, dash_length = 1}````",
        "returns": "uint64",
        "args": {
          "color": {
            "name": "color",
            "type": "Color",
            "doc": "Table with the following fields:   \ncolor :: [Color](http://lua-api.factorio.com/latest/Concepts.html#Color)  \nwidth :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float): In pixels (32 per tile).  \ngap_length :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional): Length of the gaps that this line has, in tiles. Default is 0.  \ndash_length :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional): Length of the dashes that this line has. Used only if gap_length &gt; 0. Default is 0.  \nfrom :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)  \nfrom_offset :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector) (optional): Only used if ````\nfrom````\nis a LuaEntity.  \nto :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)  \nto_offset :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector) (optional): Only used if ````\nto````\nis a LuaEntity.  \nsurface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification)  \ntime_to_live :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional): In ticks. Defaults to living forever.  \nforces :: array of [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional): The forces that this object is rendered to.  \nplayers :: array of [PlayerSpecification](http://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional): The players that this object is rendered to.  \nvisible :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If this is rendered to anyone at all. Defaults to true.  \ndraw_on_ground :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If this should be drawn below sprites and entities.  \nonly_in_alt_mode :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If this should only be rendered in alt mode. Defaults to false."
          }
        }
      },
      "draw_polygon": {
        "name": "draw_polygon",
        "type": "function",
        "doc": "Create a triangle mesh defined by a triangle stri    \n\n**Parameters**  \nTable with the following fields:   \ncolor :: [Color](http://lua-api.factorio.com/latest/Concepts.html#Color)  \nvertices :: array of CustomScriptRenderTarget    \ntarget :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)  \ntarget_offset :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector) (optional): Only used if ````\ntarget````\nis a LuaEntity.  \ntarget :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html) (optional): Acts like an offset applied to all vertices that are not set to an entity.  \ntarget_offset :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector) (optional): Only used if ````\ntarget````\nis a LuaEntity.  \norientation :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float) (optional): The orientation applied to all vertices. Default is 0.  \norientation_target :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html) (optional): If given, the vertices (that are not set to an entity) rotate so that it faces this target. Note that ````\norientation````\nis still applied.  \norientation_target_offset :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector) (optional): Only used if ````\norientation_target````\nis a LuaEntity.  \nsurface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification)  \ntime_to_live :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional): In ticks. Defaults to living forever.  \nforces :: array of [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional): The forces that this object is rendered to.  \nplayers :: array of [PlayerSpecification](http://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional): The players that this object is rendered to.  \nvisible :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If this is rendered to anyone at all. Defaults to true.  \ndraw_on_ground :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If this should be drawn below sprites and entities.  \nonly_in_alt_mode :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If this should only be rendered in alt mode. Defaults to false.  \n\n**Return value**  \nId of the render object",
        "returns": "uint64",
        "args": {
          "color": {
            "name": "color",
            "type": "Color",
            "doc": "Table with the following fields:   \ncolor :: [Color](http://lua-api.factorio.com/latest/Concepts.html#Color)  \nvertices :: array of CustomScriptRenderTarget    \ntarget :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)  \ntarget_offset :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector) (optional): Only used if ````\ntarget````\nis a LuaEntity.  \ntarget :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html) (optional): Acts like an offset applied to all vertices that are not set to an entity.  \ntarget_offset :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector) (optional): Only used if ````\ntarget````\nis a LuaEntity.  \norientation :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float) (optional): The orientation applied to all vertices. Default is 0.  \norientation_target :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html) (optional): If given, the vertices (that are not set to an entity) rotate so that it faces this target. Note that ````\norientation````\nis still applied.  \norientation_target_offset :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector) (optional): Only used if ````\norientation_target````\nis a LuaEntity.  \nsurface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification)  \ntime_to_live :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional): In ticks. Defaults to living forever.  \nforces :: array of [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional): The forces that this object is rendered to.  \nplayers :: array of [PlayerSpecification](http://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional): The players that this object is rendered to.  \nvisible :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If this is rendered to anyone at all. Defaults to true.  \ndraw_on_ground :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If this should be drawn below sprites and entities.  \nonly_in_alt_mode :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If this should only be rendered in alt mode. Defaults to false."
          }
        }
      },
      "draw_rectangle": {
        "name": "draw_rectangle",
        "type": "function",
        "doc": "Create a rectangl    \n\n**Parameters**  \nTable with the following fields:   \ncolor :: [Color](http://lua-api.factorio.com/latest/Concepts.html#Color)  \nwidth :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float) (optional): Width of the outline, used only if filled = false. Value is in pixels (32 per tile).  \nfilled :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean): If the rectangle should be filled.  \nleft_top :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)  \nleft_top_offset :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector) (optional): Only used if ````\nleft_top````\nis a LuaEntity.  \nright_bottom :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)  \nright_bottom_offset :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector) (optional): Only used if ````\nright_bottom````\nis a LuaEntity.  \nsurface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification)  \ntime_to_live :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional): In ticks. Defaults to living forever.  \nforces :: array of [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional): The forces that this object is rendered to.  \nplayers :: array of [PlayerSpecification](http://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional): The players that this object is rendered to.  \nvisible :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If this is rendered to anyone at all. Defaults to true.  \ndraw_on_ground :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If this should be drawn below sprites and entities.  \nonly_in_alt_mode :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If this should only be rendered in alt mode. Defaults to false.  \n\n**Return value**  \nId of the render object",
        "returns": "uint64",
        "args": {
          "color": {
            "name": "color",
            "type": "Color",
            "doc": "Table with the following fields:   \ncolor :: [Color](http://lua-api.factorio.com/latest/Concepts.html#Color)  \nwidth :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float) (optional): Width of the outline, used only if filled = false. Value is in pixels (32 per tile).  \nfilled :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean): If the rectangle should be filled.  \nleft_top :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)  \nleft_top_offset :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector) (optional): Only used if ````\nleft_top````\nis a LuaEntity.  \nright_bottom :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)  \nright_bottom_offset :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector) (optional): Only used if ````\nright_bottom````\nis a LuaEntity.  \nsurface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification)  \ntime_to_live :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional): In ticks. Defaults to living forever.  \nforces :: array of [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional): The forces that this object is rendered to.  \nplayers :: array of [PlayerSpecification](http://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional): The players that this object is rendered to.  \nvisible :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If this is rendered to anyone at all. Defaults to true.  \ndraw_on_ground :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If this should be drawn below sprites and entities.  \nonly_in_alt_mode :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If this should only be rendered in alt mode. Defaults to false."
          }
        }
      },
      "draw_sprite": {
        "name": "draw_sprite",
        "type": "function",
        "doc": "Create a sprit    \n\n**Parameters**  \nTable with the following fields:   \nsprite :: [SpritePath](http://lua-api.factorio.com/latest/Concepts.html#SpritePath)  \norientation :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float) (optional): The orientation of the sprite. Default is 0.  \nx_scale :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional): Horizontal scale of the sprite. Default is 1.  \ny_scale :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional): Vertical scale of the sprite. Default is 1.  \ntint :: [Color](http://lua-api.factorio.com/latest/Concepts.html#Color) (optional)  \nrender_layer :: [RenderLayer](http://lua-api.factorio.com/latest/Concepts.html#RenderLayer) (optional)  \norientation_target :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html) (optional): If given, the sprite rotates so that it faces this target. Note that ````\norientation````\nis still applied to the sprite.  \norientation_target_offset :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector) (optional): Only used if ````\norientation_target````\nis a LuaEntity.  \noriented_offset :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector) (optional): Offsets the center of the sprite if ````\norientation_target````\nis given. This offset will rotate together with the sprite.  \ntarget :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html): Center of the sprite.  \ntarget_offset :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector) (optional): Only used if ````\ntarget````\nis a LuaEntity.  \nsurface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification)  \ntime_to_live :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional): In ticks. Defaults to living forever.  \nforces :: array of [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional): The forces that this object is rendered to.  \nplayers :: array of [PlayerSpecification](http://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional): The players that this object is rendered to.  \nvisible :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If this is rendered to anyone at all. Defaults to true.  \nonly_in_alt_mode :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If this should only be rendered in alt mode. Defaults to false.  \n\n**Return value**  \nId of the render object  \n\n**Example**  \nThis will draw an iron plate icon at the character's feet. The sprite will move together with the characte    \n````\nrendering.draw_sprite{sprite = \"item.iron-plate\", target = game.player.character, surface = game.player.surface}````  \n\n**Example**  \nThis will draw an iron plate icon at the character's head. The sprite will move together with the characte    \n````\nrendering.draw_sprite{sprite = \"item.iron-plate\", target = game.player.character, target_offset = {0, -2}, surface = game.player.surface}````",
        "returns": "uint64",
        "args": {
          "sprite": {
            "name": "sprite",
            "type": "SpritePath",
            "doc": "Table with the following fields:   \nsprite :: [SpritePath](http://lua-api.factorio.com/latest/Concepts.html#SpritePath)  \norientation :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float) (optional): The orientation of the sprite. Default is 0.  \nx_scale :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional): Horizontal scale of the sprite. Default is 1.  \ny_scale :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional): Vertical scale of the sprite. Default is 1.  \ntint :: [Color](http://lua-api.factorio.com/latest/Concepts.html#Color) (optional)  \nrender_layer :: [RenderLayer](http://lua-api.factorio.com/latest/Concepts.html#RenderLayer) (optional)  \norientation_target :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html) (optional): If given, the sprite rotates so that it faces this target. Note that ````\norientation````\nis still applied to the sprite.  \norientation_target_offset :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector) (optional): Only used if ````\norientation_target````\nis a LuaEntity.  \noriented_offset :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector) (optional): Offsets the center of the sprite if ````\norientation_target````\nis given. This offset will rotate together with the sprite.  \ntarget :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html): Center of the sprite.  \ntarget_offset :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector) (optional): Only used if ````\ntarget````\nis a LuaEntity.  \nsurface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification)  \ntime_to_live :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional): In ticks. Defaults to living forever.  \nforces :: array of [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional): The forces that this object is rendered to.  \nplayers :: array of [PlayerSpecification](http://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional): The players that this object is rendered to.  \nvisible :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If this is rendered to anyone at all. Defaults to true.  \nonly_in_alt_mode :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If this should only be rendered in alt mode. Defaults to false."
          }
        }
      },
      "draw_text": {
        "name": "draw_text",
        "type": "function",
        "doc": "Create a tex    \n\n**Parameters**  \nTable with the following fields:   \ntext :: [LocalisedString](http://lua-api.factorio.com/latest/Concepts.html#LocalisedString): The text to display.  \nsurface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification)  \ntarget :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)  \ntarget_offset :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector) (optional): Only used if ````\ntarget````\nis a LuaEntity.  \ncolor :: [Color](http://lua-api.factorio.com/latest/Concepts.html#Color)  \nscale :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional)  \nfont :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): Name of font to use. Defaults to the same font as flying-text.  \ntime_to_live :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional): In ticks. Defaults to living forever.  \nforces :: array of [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional): The forces that this object is rendered to.  \nplayers :: array of [PlayerSpecification](http://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional): The players that this object is rendered to.  \nvisible :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If this is rendered to anyone at all. Defaults to true.  \ndraw_on_ground :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If this should be drawn below sprites and entities.  \norientation :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float) (optional): The orientation of the text. Default is 0.  \nalignment :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): Defaults to \"left\". Other options are \"right\" and \"center\".  \nscale_with_zoom :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): Defaults to false. If true, the text scales with player zoom, resulting in it always being the same size on screen, and the size compared to the game world changes.  \nonly_in_alt_mode :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If this should only be rendered in alt mode. Defaults to false.  \n\n**Return value**  \nId of the render object  \n\n**Note: ** Not all fonts support scaling.",
        "returns": "uint64",
        "args": {
          "text": {
            "name": "text",
            "type": "LocalisedString",
            "doc": "Table with the following fields:   \ntext :: [LocalisedString](http://lua-api.factorio.com/latest/Concepts.html#LocalisedString): The text to display.  \nsurface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification)  \ntarget :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)  \ntarget_offset :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector) (optional): Only used if ````\ntarget````\nis a LuaEntity.  \ncolor :: [Color](http://lua-api.factorio.com/latest/Concepts.html#Color)  \nscale :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional)  \nfont :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): Name of font to use. Defaults to the same font as flying-text.  \ntime_to_live :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional): In ticks. Defaults to living forever.  \nforces :: array of [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional): The forces that this object is rendered to.  \nplayers :: array of [PlayerSpecification](http://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional): The players that this object is rendered to.  \nvisible :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If this is rendered to anyone at all. Defaults to true.  \ndraw_on_ground :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If this should be drawn below sprites and entities.  \norientation :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float) (optional): The orientation of the text. Default is 0.  \nalignment :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): Defaults to \"left\". Other options are \"right\" and \"center\".  \nscale_with_zoom :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): Defaults to false. If true, the text scales with player zoom, resulting in it always being the same size on screen, and the size compared to the game world changes.  \nonly_in_alt_mode :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If this should only be rendered in alt mode. Defaults to false."
          }
        }
      },
      "get_alignment": {
        "name": "get_alignment",
        "type": "function",
        "doc": "Get the alignment of the text with this id or ````\nnil````\nif the object is not a tex    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n_Can only be used if this is Text_",
        "returns": "string",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "get_all_ids": {
        "name": "get_all_ids",
        "type": "function",
        "doc": "Gets an array of all valid object id    \n\n**Parameters**  \nmod_name :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): If provided, get only the render objects created by this mod.",
        "returns": "array of uint64",
        "args": {
          "mod_name": {
            "name": "mod_name",
            "type": "string",
            "doc": "mod_name :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): If provided, get only the render objects created by this mod."
          }
        }
      },
      "get_angle": {
        "name": "get_angle",
        "type": "function",
        "doc": "Get the angle of the arc with this id or ````\nnil````\nif the object is not a ar    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n\n**Return value**  \nangle in radian  \n_Can only be used if this is Arc_",
        "returns": "float",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "get_animation": {
        "name": "get_animation",
        "type": "function",
        "doc": "Get the animation prototype name of the animation with this id or ````\nnil````\nif the object is not an animatio    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n_Can only be used if this is Animation_",
        "returns": "string",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "get_animation_offset": {
        "name": "get_animation_offset",
        "type": "function",
        "doc": "Get the animation offset of the animation with this id or ````\nnil````\nif the object is not an animatio    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n\n**Return value**  \nAnimation offset in frames.  \n_Can only be used if this is Animation_",
        "returns": "double",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "get_animation_speed": {
        "name": "get_animation_speed",
        "type": "function",
        "doc": "Get the animation speed of the animation with this id or ````\nnil````\nif the object is not an animatio    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n\n**Return value**  \nAnimation speed in frames per tick.  \n_Can only be used if this is Animation_",
        "returns": "double",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "get_color": {
        "name": "get_color",
        "type": "function",
        "doc": "Get the color or tint of the object with this i    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n\n**Return value**  \nor ````\nnil````\nif the object does not support color.  \n_Can only be used if this is Text, Line, Circle, Rectangle, Arc, Polygon, Sprite, Light, or Animation_",
        "returns": "Color",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "get_dash_length": {
        "name": "get_dash_length",
        "type": "function",
        "doc": "Get the dash length of the line with this id or ````\nnil````\nif the object is not a lin    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n_Can only be used if this is Line_",
        "returns": "double",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "get_draw_on_ground": {
        "name": "get_draw_on_ground",
        "type": "function",
        "doc": "Get whether this is being drawn on the ground, under most entities and sprite    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n_Can only be used if this is Text, Line, Circle, Rectangle, Arc, or Polygon_",
        "returns": "boolean",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "get_filled": {
        "name": "get_filled",
        "type": "function",
        "doc": "Get if the circle or rectangle with this id is filled or ````\nnil````\nif the object is not a circle or rectangl    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n_Can only be used if this is Circle or Rectangle_",
        "returns": "boolean",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "get_font": {
        "name": "get_font",
        "type": "function",
        "doc": "Get the font of the text with this id or ````\nnil````\nif the object is not a tex    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n_Can only be used if this is Text_",
        "returns": "string",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "get_forces": {
        "name": "get_forces",
        "type": "function",
        "doc": "Get the forces that the object with this id is rendered to or ````\nnil````\nif visible to all force    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)",
        "returns": "array of LuaForce",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "get_from": {
        "name": "get_from",
        "type": "function",
        "doc": "Get from where the line with this id is drawn or ````\nnil````\nif this object is not a lin    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n_Can only be used if this is Line_",
        "returns": "ScriptRenderTarget",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "get_gap_length": {
        "name": "get_gap_length",
        "type": "function",
        "doc": "Get the length of the gaps in the line with this id or ````\nnil````\nif the object is not a lin    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n_Can only be used if this is Line_",
        "returns": "double",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "get_intensity": {
        "name": "get_intensity",
        "type": "function",
        "doc": "Get the intensity of the light with this id or ````\nnil````\nif the object is not a ligh    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n_Can only be used if this is Light_",
        "returns": "float",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "get_left_top": {
        "name": "get_left_top",
        "type": "function",
        "doc": "Get where top left corner of the rectangle with this id is drawn or ````\nnil````\nif the object is not a rectangl    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n_Can only be used if this is Rectangle_",
        "returns": "ScriptRenderTarget",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "get_max_radius": {
        "name": "get_max_radius",
        "type": "function",
        "doc": "Get the radius of the outer edge of the arc with this id or ````\nnil````\nif the object is not a ar    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n_Can only be used if this is Arc_",
        "returns": "double",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "get_min_radius": {
        "name": "get_min_radius",
        "type": "function",
        "doc": "Get the radius of the inner edge of the arc with this id or ````\nnil````\nif the object is not a ar    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n_Can only be used if this is Arc_",
        "returns": "double",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "get_minimum_darkness": {
        "name": "get_minimum_darkness",
        "type": "function",
        "doc": "Get the minimum darkness at which the light with this id is rendered or ````\nnil````\nif the object is not a ligh    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n_Can only be used if this is Light_",
        "returns": "float",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "get_only_in_alt_mode": {
        "name": "get_only_in_alt_mode",
        "type": "function",
        "doc": "Get whether this is only rendered in alt-mod    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)",
        "returns": "boolean",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "get_orientation": {
        "name": "get_orientation",
        "type": "function",
        "doc": "Get the orientation of the object with this id or ````\nnil````\nif the object is not a text, polygon, sprite, light or animatio    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n\n**Note: ** Polygon vertices that are set to an entity will ignore this.  \n_Can only be used if this is Text, Polygon, Sprite, Light, or Animation_",
        "returns": "float",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "get_orientation_target": {
        "name": "get_orientation_target",
        "type": "function",
        "doc": "The object rotates so that it faces this target. Note that ````\norientation````\nis still applied to the objec  \nGet the orientation_target of the object with this id or ````\nnil````\nif no target or if this object is not a polygon, sprite, or animatio    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n\n**Note: ** Polygon vertices that are set to an entity will ignore this.  \n_Can only be used if this is Polygon, Sprite, or Animation_",
        "returns": "ScriptRenderTarget",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "get_oriented": {
        "name": "get_oriented",
        "type": "function",
        "doc": "Get if the light with this id is rendered has the same orientation as the target entity or ````\nnil````\nif the object is not a ligh  \nNote that ````\norientation````\nis still applied to the sprit    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n_Can only be used if this is Light_",
        "returns": "boolean",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "get_oriented_offset": {
        "name": "get_oriented_offset",
        "type": "function",
        "doc": "Offsets the center of the sprite or animation if ````\norientation_target````\nis given. This offset will rotate together with the sprite or animatio  \nGet the oriented_offset of the sprite or animation with this id or ````\nnil````\nif this object is not a sprite or animatio    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n_Can only be used if this is Sprite or Animation_",
        "returns": "Vector",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "get_players": {
        "name": "get_players",
        "type": "function",
        "doc": "Get the players that the object with this id is rendered to or ````\nnil````\nif visible to all player    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)",
        "returns": "array of LuaPlayer",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "get_radius": {
        "name": "get_radius",
        "type": "function",
        "doc": "Get the radius of the circle with this id or ````\nnil````\nif the object is not a circl    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n_Can only be used if this is Circle_",
        "returns": "double",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "get_render_layer": {
        "name": "get_render_layer",
        "type": "function",
        "doc": "Get the render layer of the sprite or animation with this id or ````\nnil````\nif the object is not a sprite or animatio    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n_Can only be used if this is Sprite or Animation_",
        "returns": "RenderLayer",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "get_right_bottom": {
        "name": "get_right_bottom",
        "type": "function",
        "doc": "Get where bottom right corner of the rectangle with this id is drawn or ````\nnil````\nif the object is not a rectangl    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n_Can only be used if this is Rectangle_",
        "returns": "ScriptRenderTarget",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "get_scale": {
        "name": "get_scale",
        "type": "function",
        "doc": "Get the scale of the text or light with this id or ````\nnil````\nif the object is not a text or ligh    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n_Can only be used if this is Text or Light_",
        "returns": "double",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "get_scale_with_zoom": {
        "name": "get_scale_with_zoom",
        "type": "function",
        "doc": "Get if the text with this id scales with player zoom or ````\nnil````\nif the object is not a tex    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n_Can only be used if this is Text_",
        "returns": "boolean",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "get_sprite": {
        "name": "get_sprite",
        "type": "function",
        "doc": "Get the sprite of the sprite or light with this id or ````\nnil````\nif the object is not a sprite or ligh    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n_Can only be used if this is Sprite or Light_",
        "returns": "SpritePath",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "get_start_angle": {
        "name": "get_start_angle",
        "type": "function",
        "doc": "Get where the arc with this id starts or ````\nnil````\nif the object is not a ar    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n\n**Return value**  \nangle in radian  \n_Can only be used if this is Arc_",
        "returns": "float",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "get_surface": {
        "name": "get_surface",
        "type": "function",
        "doc": "The surface the object with this id is rendered o    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)",
        "returns": "LuaSurface",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "get_target": {
        "name": "get_target",
        "type": "function",
        "doc": "Get where the object with this id is drawn or ````\nnil````\nif the object does not support targe    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n\n**Note: ** Polygon vertices that are set to an entity will ignore this.  \n_Can only be used if this is Text, Circle, Arc, Polygon, Sprite, Light, or Animation_",
        "returns": "ScriptRenderTarget",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "get_text": {
        "name": "get_text",
        "type": "function",
        "doc": "Get the text that is displayed by the text with this id or ````\nnil````\nif the object is not a tex    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n_Can only be used if this is Text_",
        "returns": "LocalisedString",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "get_time_to_live": {
        "name": "get_time_to_live",
        "type": "function",
        "doc": "Get the time to live of the object with this id. This will be 0 if the object does not expir    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)",
        "returns": "uint",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "get_to": {
        "name": "get_to",
        "type": "function",
        "doc": "Get where the line with this id is drawn to or ````\nnil````\nif the object is not a lin    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n_Can only be used if this is Line_",
        "returns": "ScriptRenderTarget",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "get_type": {
        "name": "get_type",
        "type": "function",
        "doc": "Gets the type of the given object. The types are \"text\", \"line\", \"circle\", \"rectangle\", \"arc\", \"polygon\", \"sprite\", \"light\" and \"animation    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)",
        "returns": "string",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "get_vertices": {
        "name": "get_vertices",
        "type": "function",
        "doc": "Get the vertices of the polygon with this id or ````\nnil````\nif the object is not a polygo    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n_Can only be used if this is Polygon_",
        "returns": "array of ScriptRenderTarget",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "get_visible": {
        "name": "get_visible",
        "type": "function",
        "doc": "Get whether this is rendered to anyone at al    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)",
        "returns": "boolean",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "get_width": {
        "name": "get_width",
        "type": "function",
        "doc": "Get the width of the object with this id. Value is in pixels (32 per tile    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n\n**Return value**  \nor ````\nnil````\nif the object does not support width.  \n_Can only be used if this is Line, Circle, or Rectangle_",
        "returns": "float",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "get_x_scale": {
        "name": "get_x_scale",
        "type": "function",
        "doc": "Get the horizontal scale of the sprite or animation with this id or ````\nnil````\nif the object is not a sprite or animatio    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n_Can only be used if this is Sprite or Animation_",
        "returns": "double",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "get_y_scale": {
        "name": "get_y_scale",
        "type": "function",
        "doc": "Get the vertical scale of the sprite or animation with this id or ````\nnil````\nif the object is not a sprite or animatio    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n_Can only be used if this is Sprite or Animation_",
        "returns": "double",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "is_font_valid": {
        "name": "is_font_valid",
        "type": "function",
        "doc": "Does a font with this name exis    \n\n**Parameters**  \nfont_name :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string)",
        "returns": "boolean",
        "args": {
          "font_name": {
            "name": "font_name",
            "type": "string",
            "doc": "font_name :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string)"
          }
        }
      },
      "is_valid": {
        "name": "is_valid",
        "type": "function",
        "doc": "Does a valid object with this id exis    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)",
        "returns": "boolean",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "object_name": {
        "name": "object_name",
        "type": "string",
        "mode": "[R]",
        "doc": "This object's nam"
      },
      "set_alignment": {
        "name": "set_alignment",
        "doc": "Set the alignment of the text with this id. Does nothing if this object is not a tex    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \nalignment :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): \"left\", \"right\" or \"center\".  \n_Can only be used if this is Text_",
        "type": "function",
        "args": {
          "alignment": {
            "name": "alignment",
            "type": "string",
            "doc": "alignment :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): \"left\", \"right\" or \"center\"."
          },
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "set_angle": {
        "name": "set_angle",
        "doc": "Set the angle of the arc with this id. Does nothing if this object is not a ar    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \nangle :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float): angle in radian  \n_Can only be used if this is Arc_",
        "type": "function",
        "args": {
          "angle": {
            "name": "angle",
            "type": "float",
            "doc": "angle :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float): angle in radian"
          },
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "set_animation": {
        "name": "set_animation",
        "doc": "Set the animation prototype name of the animation with this id. Does nothing if this object is not an animatio    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \nanimation :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string)  \n_Can only be used if this is Animation_",
        "type": "function",
        "args": {
          "animation": {
            "name": "animation",
            "type": "string",
            "doc": "animation :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string)"
          },
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "set_animation_offset": {
        "name": "set_animation_offset",
        "doc": "Set the animation offset of the animation with this id. Does nothing if this object is not an animatio    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \nanimation_offset :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double): Animation offset in frames.  \n_Can only be used if this is Animation_",
        "type": "function",
        "args": {
          "animation_offset": {
            "name": "animation_offset",
            "type": "double",
            "doc": "animation_offset :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double): Animation offset in frames."
          },
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "set_animation_speed": {
        "name": "set_animation_speed",
        "doc": "Set the animation speed of the animation with this id. Does nothing if this object is not an animatio    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \nanimation_speed :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double): Animation speed in frames per tick.  \n_Can only be used if this is Animation_",
        "type": "function",
        "args": {
          "animation_speed": {
            "name": "animation_speed",
            "type": "double",
            "doc": "animation_speed :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double): Animation speed in frames per tick."
          },
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "set_color": {
        "name": "set_color",
        "doc": "Set the color or tint of the object with this id. Does nothing if this object does not support colo    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \ncolor :: [Color](http://lua-api.factorio.com/latest/Concepts.html#Color)  \n_Can only be used if this is Text, Line, Circle, Rectangle, Arc, Polygon, Sprite, Light, or Animation_",
        "type": "function",
        "args": {
          "color": {
            "name": "color",
            "type": "Color",
            "doc": "color :: [Color](http://lua-api.factorio.com/latest/Concepts.html#Color)"
          },
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "set_corners": {
        "name": "set_corners",
        "doc": "Set the corners of the rectangle with this id. Does nothing if this object is not a rectangl    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \nleft_top :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)  \nleft_top_offset :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector)  \nright_bottom :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)  \nright_bottom_offset :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector)  \n_Can only be used if this is Rectangle_",
        "type": "function",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          },
          "left_top": {
            "name": "left_top",
            "type": "Position or LuaEntity",
            "doc": "left_top :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)"
          },
          "left_top_offset": {
            "name": "left_top_offset",
            "type": "Vector",
            "doc": "left_top_offset :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector)"
          },
          "right_bottom": {
            "name": "right_bottom",
            "type": "Position or LuaEntity",
            "doc": "right_bottom :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)"
          },
          "right_bottom_offset": {
            "name": "right_bottom_offset",
            "type": "Vector",
            "doc": "right_bottom_offset :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector)"
          }
        }
      },
      "set_dash_length": {
        "name": "set_dash_length",
        "doc": "Set the dash length of the line with this id. Does nothing if this object is not a lin    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \ndash_length :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double)  \n_Can only be used if this is Line_",
        "type": "function",
        "args": {
          "dash_length": {
            "name": "dash_length",
            "type": "double",
            "doc": "dash_length :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double)"
          },
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "set_dashes": {
        "name": "set_dashes",
        "doc": "Set the length of the dashes and the length of the gaps in the line with this id. Does nothing if this object is not a lin    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \ndash_length :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double)  \ngap_length :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double)  \n_Can only be used if this is Line_",
        "type": "function",
        "args": {
          "dash_length": {
            "name": "dash_length",
            "type": "double",
            "doc": "dash_length :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double)"
          },
          "gap_length": {
            "name": "gap_length",
            "type": "double",
            "doc": "gap_length :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double)"
          },
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "set_draw_on_ground": {
        "name": "set_draw_on_ground",
        "doc": "Set whether this is being drawn on the ground, under most entities and sprite    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \ndraw_on_ground :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean)  \n_Can only be used if this is Text, Line, Circle, Rectangle, Arc, or Polygon_",
        "type": "function",
        "args": {
          "draw_on_ground": {
            "name": "draw_on_ground",
            "type": "boolean",
            "doc": "draw_on_ground :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean)"
          },
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "set_filled": {
        "name": "set_filled",
        "doc": "Set if the circle or rectangle with this id is filled. Does nothing if this object is not a circle or rectangl    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \nfilled :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean)  \n_Can only be used if this is Circle or Rectangle_",
        "type": "function",
        "args": {
          "filled": {
            "name": "filled",
            "type": "boolean",
            "doc": "filled :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean)"
          },
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "set_font": {
        "name": "set_font",
        "doc": "Set the font of the text with this id. Does nothing if this object is not a tex    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \nfont :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string)  \n_Can only be used if this is Text_",
        "type": "function",
        "args": {
          "font": {
            "name": "font",
            "type": "string",
            "doc": "font :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string)"
          },
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "set_forces": {
        "name": "set_forces",
        "doc": "Set the forces that the object with this id is rendered t    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \nforces :: array of [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification): Providing an empty array will set the object to be visible to all forces.",
        "type": "function",
        "args": {
          "forces": {
            "name": "forces",
            "type": "array of ForceSpecification",
            "doc": "forces :: array of [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification): Providing an empty array will set the object to be visible to all forces."
          },
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "set_from": {
        "name": "set_from",
        "doc": "Set from where the line with this id is drawn. Does nothing if the object is not a lin    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \nfrom :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)  \nfrom_offset :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector) (optional)  \n_Can only be used if this is Line_",
        "type": "function",
        "args": {
          "from": {
            "name": "from",
            "type": "Position or LuaEntity",
            "doc": "from :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)"
          },
          "from_offset": {
            "name": "from_offset",
            "type": "Vector",
            "doc": "from_offset :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector) (optional)"
          },
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "set_gap_length": {
        "name": "set_gap_length",
        "doc": "Set the length of the gaps in the line with this id. Does nothing if this object is not a lin    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \ngap_length :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double)  \n_Can only be used if this is Line_",
        "type": "function",
        "args": {
          "gap_length": {
            "name": "gap_length",
            "type": "double",
            "doc": "gap_length :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double)"
          },
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "set_intensity": {
        "name": "set_intensity",
        "doc": "Set the intensity of the light with this id. Does nothing if this object is not a ligh    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \nintensity :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float)  \n_Can only be used if this is Light_",
        "type": "function",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          },
          "intensity": {
            "name": "intensity",
            "type": "float",
            "doc": "intensity :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float)"
          }
        }
      },
      "set_left_top": {
        "name": "set_left_top",
        "doc": "Set where top left corner of the rectangle with this id is drawn. Does nothing if this object is not a rectangl    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \nleft_top :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)  \nleft_top_offset :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector) (optional)  \n_Can only be used if this is Rectangle_",
        "type": "function",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          },
          "left_top": {
            "name": "left_top",
            "type": "Position or LuaEntity",
            "doc": "left_top :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)"
          },
          "left_top_offset": {
            "name": "left_top_offset",
            "type": "Vector",
            "doc": "left_top_offset :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector) (optional)"
          }
        }
      },
      "set_max_radius": {
        "name": "set_max_radius",
        "doc": "Set the radius of the outer edge of the arc with this id. Does nothing if this object is not a ar    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \nmax_radius :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double)  \n_Can only be used if this is Arc_",
        "type": "function",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          },
          "max_radius": {
            "name": "max_radius",
            "type": "double",
            "doc": "max_radius :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double)"
          }
        }
      },
      "set_min_radius": {
        "name": "set_min_radius",
        "doc": "Set the radius of the inner edge of the arc with this id. Does nothing if this object is not a ar    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \nmin_radius :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double)  \n_Can only be used if this is Arc_",
        "type": "function",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          },
          "min_radius": {
            "name": "min_radius",
            "type": "double",
            "doc": "min_radius :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double)"
          }
        }
      },
      "set_minimum_darkness": {
        "name": "set_minimum_darkness",
        "doc": "Set the minimum darkness at which the light with this id is rendered. Does nothing if this object is not a ligh    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \nminimum_darkness :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float)  \n_Can only be used if this is Light_",
        "type": "function",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          },
          "minimum_darkness": {
            "name": "minimum_darkness",
            "type": "float",
            "doc": "minimum_darkness :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float)"
          }
        }
      },
      "set_only_in_alt_mode": {
        "name": "set_only_in_alt_mode",
        "doc": "Set whether this is only rendered in alt-mod    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \nonly_in_alt_mode :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean)",
        "type": "function",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          },
          "only_in_alt_mode": {
            "name": "only_in_alt_mode",
            "type": "boolean",
            "doc": "only_in_alt_mode :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean)"
          }
        }
      },
      "set_orientation": {
        "name": "set_orientation",
        "doc": "Set the orientation of the object with this id. Does nothing if this object is not a text, polygon, sprite, light or animatio    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \norientation :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float)  \n\n**Note: ** Polygon vertices that are set to an entity will ignore this.  \n_Can only be used if this is Text, Polygon, Sprite, Light, or Animation_",
        "type": "function",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          },
          "orientation": {
            "name": "orientation",
            "type": "float",
            "doc": "orientation :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float)"
          }
        }
      },
      "set_orientation_target": {
        "name": "set_orientation_target",
        "doc": "The object rotates so that it faces this target. Note that ````\norientation````\nis still applied to the objec  \nSet the orientation_target of the object with this id. Does nothing if this object is not a polygon, sprite, or animatio  \nSet to ````\nnil````\nif the object should not have an orientation_targe    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \norientation_target :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)  \norientation_target_offset :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector) (optional)  \n\n**Note: ** Polygon vertices that are set to an entity will ignore this.  \n_Can only be used if this is Polygon, Sprite, or Animation_",
        "type": "function",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          },
          "orientation_target": {
            "name": "orientation_target",
            "type": "Position or LuaEntity",
            "doc": "orientation_target :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)"
          },
          "orientation_target_offset": {
            "name": "orientation_target_offset",
            "type": "Vector",
            "doc": "orientation_target_offset :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector) (optional)"
          }
        }
      },
      "set_oriented": {
        "name": "set_oriented",
        "doc": "Set if the light with this id is rendered has the same orientation as the target entity. Does nothing if this object is not a ligh  \nNote that ````\norientation````\nis still applied to the sprit    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \noriented :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean)  \n_Can only be used if this is Light_",
        "type": "function",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          },
          "oriented": {
            "name": "oriented",
            "type": "boolean",
            "doc": "oriented :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean)"
          }
        }
      },
      "set_oriented_offset": {
        "name": "set_oriented_offset",
        "doc": "Offsets the center of the sprite or animation if ````\norientation_target````\nis given. This offset will rotate together with the sprite or animatio  \nSet the oriented_offset of the sprite or animation with this id. Does nothing if this object is not a sprite or animatio    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \noriented_offset :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector)  \n_Can only be used if this is Sprite or Animation_",
        "type": "function",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          },
          "oriented_offset": {
            "name": "oriented_offset",
            "type": "Vector",
            "doc": "oriented_offset :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector)"
          }
        }
      },
      "set_players": {
        "name": "set_players",
        "doc": "Set the players that the object with this id is rendered t    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \nplayers :: array of [PlayerSpecification](http://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification): Providing an empty array will set the object to be visible to all players.",
        "type": "function",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          },
          "players": {
            "name": "players",
            "type": "array of PlayerSpecification",
            "doc": "players :: array of [PlayerSpecification](http://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification): Providing an empty array will set the object to be visible to all players."
          }
        }
      },
      "set_radius": {
        "name": "set_radius",
        "doc": "Set the radius of the circle with this id. Does nothing if this object is not a circl    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \nradius :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double)  \n_Can only be used if this is Circle_",
        "type": "function",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          },
          "radius": {
            "name": "radius",
            "type": "double",
            "doc": "radius :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double)"
          }
        }
      },
      "set_render_layer": {
        "name": "set_render_layer",
        "doc": "Set the render layer of the sprite or animation with this id. Does nothing if this object is not a sprite or animatio    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \nrender_layer :: [RenderLayer](http://lua-api.factorio.com/latest/Concepts.html#RenderLayer)  \n_Can only be used if this is Sprite or Animation_",
        "type": "function",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          },
          "render_layer": {
            "name": "render_layer",
            "type": "RenderLayer",
            "doc": "render_layer :: [RenderLayer](http://lua-api.factorio.com/latest/Concepts.html#RenderLayer)"
          }
        }
      },
      "set_right_bottom": {
        "name": "set_right_bottom",
        "doc": "Set where top bottom right of the rectangle with this id is drawn. Does nothing if this object is not a rectangl    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \nright_bottom :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)  \nright_bottom_offset :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector) (optional)  \n_Can only be used if this is Rectangle_",
        "type": "function",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          },
          "right_bottom": {
            "name": "right_bottom",
            "type": "Position or LuaEntity",
            "doc": "right_bottom :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)"
          },
          "right_bottom_offset": {
            "name": "right_bottom_offset",
            "type": "Vector",
            "doc": "right_bottom_offset :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector) (optional)"
          }
        }
      },
      "set_scale": {
        "name": "set_scale",
        "doc": "Set the scale of the text or light with this id. Does nothing if this object is not a text or ligh    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \nscale :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double)  \n_Can only be used if this is Text or Light_",
        "type": "function",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          },
          "scale": {
            "name": "scale",
            "type": "double",
            "doc": "scale :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double)"
          }
        }
      },
      "set_scale_with_zoom": {
        "name": "set_scale_with_zoom",
        "doc": "Set if the text with this id scales with player zoom, resulting in it always being the same size on screen, and the size compared to the game world change  \nDoes nothing if this object is not a tex    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \nscale_with_zoom :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean)  \n_Can only be used if this is Text_",
        "type": "function",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          },
          "scale_with_zoom": {
            "name": "scale_with_zoom",
            "type": "boolean",
            "doc": "scale_with_zoom :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean)"
          }
        }
      },
      "set_sprite": {
        "name": "set_sprite",
        "doc": "Set the sprite of the sprite or light with this id. Does nothing if this object is not a sprite or ligh    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \nsprite :: [SpritePath](http://lua-api.factorio.com/latest/Concepts.html#SpritePath)  \n_Can only be used if this is Sprite or Light_",
        "type": "function",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          },
          "sprite": {
            "name": "sprite",
            "type": "SpritePath",
            "doc": "sprite :: [SpritePath](http://lua-api.factorio.com/latest/Concepts.html#SpritePath)"
          }
        }
      },
      "set_start_angle": {
        "name": "set_start_angle",
        "doc": "Set where the arc with this id starts. Does nothing if this object is not a ar    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \nstart_angle :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float): angle in radian  \n_Can only be used if this is Arc_",
        "type": "function",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          },
          "start_angle": {
            "name": "start_angle",
            "type": "float",
            "doc": "start_angle :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float): angle in radian"
          }
        }
      },
      "set_target": {
        "name": "set_target",
        "doc": "Set where the object with this id is drawn. Does nothing if this object does not support targe    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \ntarget :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)  \ntarget_offset :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector) (optional)  \n\n**Note: ** Polygon vertices that are set to an entity will ignore this.  \n_Can only be used if this is Text, Circle, Arc, Polygon, Sprite, Light, or Animation_",
        "type": "function",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          },
          "target": {
            "name": "target",
            "type": "Position or LuaEntity",
            "doc": "target :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)"
          },
          "target_offset": {
            "name": "target_offset",
            "type": "Vector",
            "doc": "target_offset :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector) (optional)"
          }
        }
      },
      "set_text": {
        "name": "set_text",
        "doc": "Set the text that is displayed by the text with this id. Does nothing if this object is not a tex    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \ntext :: [LocalisedString](http://lua-api.factorio.com/latest/Concepts.html#LocalisedString)  \n_Can only be used if this is Text_",
        "type": "function",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          },
          "text": {
            "name": "text",
            "type": "LocalisedString",
            "doc": "text :: [LocalisedString](http://lua-api.factorio.com/latest/Concepts.html#LocalisedString)"
          }
        }
      },
      "set_time_to_live": {
        "name": "set_time_to_live",
        "doc": "Set the time to live of the object with this id. Set to 0 if the object should not expir    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \ntime_to_live :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)",
        "type": "function",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          },
          "time_to_live": {
            "name": "time_to_live",
            "type": "uint",
            "doc": "time_to_live :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)"
          }
        }
      },
      "set_to": {
        "name": "set_to",
        "doc": "Set where the line with this id is drawn to. Does nothing if this object is not a lin    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \nto :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)  \nto_offset :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector) (optional)  \n_Can only be used if this is Line_",
        "type": "function",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          },
          "to": {
            "name": "to",
            "type": "Position or LuaEntity",
            "doc": "to :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)"
          },
          "to_offset": {
            "name": "to_offset",
            "type": "Vector",
            "doc": "to_offset :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector) (optional)"
          }
        }
      },
      "set_vertices": {
        "name": "set_vertices",
        "doc": "Set the vertices of the polygon with this id. Does nothing if this object is not a polygo    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \nvertices :: array of [ScriptRenderTarget](http://lua-api.factorio.com/latest/Concepts.html#ScriptRenderTarget)  \n_Can only be used if this is Polygon_",
        "type": "function",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          },
          "vertices": {
            "name": "vertices",
            "type": "array of ScriptRenderTarget",
            "doc": "vertices :: array of [ScriptRenderTarget](http://lua-api.factorio.com/latest/Concepts.html#ScriptRenderTarget)"
          }
        }
      },
      "set_visible": {
        "name": "set_visible",
        "doc": "Set whether this is rendered to anyone at al    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \nvisible :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean)",
        "type": "function",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          },
          "visible": {
            "name": "visible",
            "type": "boolean",
            "doc": "visible :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean)"
          }
        }
      },
      "set_width": {
        "name": "set_width",
        "doc": "Set the width of the object with this id. Does nothing if this object does not support width. Value is in pixels (32 per tile    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \nwidth :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float)  \n_Can only be used if this is Line, Circle, or Rectangle_",
        "type": "function",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          },
          "width": {
            "name": "width",
            "type": "float",
            "doc": "width :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float)"
          }
        }
      },
      "set_x_scale": {
        "name": "set_x_scale",
        "doc": "Set the horizontal scale of the sprite or animation with this id. Does nothing if this object is not a sprite or animatio    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \nx_scale :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double)  \n_Can only be used if this is Sprite or Animation_",
        "type": "function",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          },
          "x_scale": {
            "name": "x_scale",
            "type": "double",
            "doc": "x_scale :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double)"
          }
        }
      },
      "set_y_scale": {
        "name": "set_y_scale",
        "doc": "Set the vertical scale of the sprite or animation with this id. Does nothing if this object is not a sprite or animatio    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \ny_scale :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double)  \n_Can only be used if this is Sprite or Animation_",
        "type": "function",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          },
          "y_scale": {
            "name": "y_scale",
            "type": "double",
            "doc": "y_scale :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double)"
          }
        }
      }
    },
    "doc": "Create a line."
  },
  "LuaResourceCategoryPrototype": {
    "name": "LuaResourceCategoryPrototype",
    "type": "LuaResourceCategoryPrototype",
    "inherits": [],
    "properties": {
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "localised_description": {
        "name": "localised_description",
        "type": "LocalisedString",
        "mode": "[R]"
      },
      "localised_name": {
        "name": "localised_name",
        "type": "LocalisedString",
        "mode": "[R]"
      },
      "name": {
        "name": "name",
        "type": "string",
        "mode": "[R]",
        "doc": "Name of this prototype."
      },
      "object_name": {
        "name": "object_name",
        "type": "string",
        "mode": "[R]",
        "doc": "The class name of this object."
      },
      "order": {
        "name": "order",
        "type": "string",
        "mode": "[R]",
        "doc": "Order string of this prototype."
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": ""
  },
  "LuaRoboportControlBehavior": {
    "name": "LuaRoboportControlBehavior",
    "type": "LuaRoboportControlBehavior",
    "inherits": [
      "Inherited from LuaControlBehavior: get_circuit_network, type, entity"
    ],
    "properties": {
      "available_construction_output_signal": {
        "name": "available_construction_output_signal",
        "type": "SignalID",
        "mode": "[RW]"
      },
      "available_logistic_output_signal": {
        "name": "available_logistic_output_signal",
        "type": "SignalID",
        "mode": "[RW]"
      },
      "entity": {
        "name": "entity",
        "type": "LuaEntity",
        "mode": "[R]",
        "doc": "The entity this control behavior belongs to."
      },
      "get_circuit_network": {
        "name": "get_circuit_network",
        "type": "function",
        "returns": "LuaCircuitNetwork",
        "args": {
          "circuit_connector": {
            "name": "circuit_connector",
            "type": "defines.circuit_connector_id",
            "doc": "circuit_connector :: [defines.circuit_connector_id](http://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional): The connector to get circuit network fo  \nMust be specified for entities with more than one circuit network connector."
          },
          "wire": {
            "name": "wire",
            "type": "defines.wire_type",
            "doc": "wire :: [defines.wire_type](http://lua-api.factorio.com/latest/defines.html#defines.wire_type): Wire color of the network connected to this entity."
          }
        },
        "doc": "**Parameters**  \nwire :: [defines.wire_type](http://lua-api.factorio.com/latest/defines.html#defines.wire_type): Wire color of the network connected to this entity.  \ncircuit_connector :: [defines.circuit_connector_id](http://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional): The connector to get circuit network fo  \nMust be specified for entities with more than one circuit network connector.  \n\n**Return value**  \nThe circuit network or nil."
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "object_name": {
        "name": "object_name",
        "type": "string",
        "mode": "[R]",
        "doc": "The class name of this object."
      },
      "read_logistics": {
        "name": "read_logistics",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "````\ntrue````\nif the roboport should report the logistics network content to the circuit network."
      },
      "read_robot_stats": {
        "name": "read_robot_stats",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "````\ntrue````\nif the roboport should report the robot statistics to the circuit network."
      },
      "total_construction_output_signal": {
        "name": "total_construction_output_signal",
        "type": "SignalID",
        "mode": "[RW]"
      },
      "total_logistic_output_signal": {
        "name": "total_logistic_output_signal",
        "type": "SignalID",
        "mode": "[RW]"
      },
      "type": {
        "name": "type",
        "type": "defines.control_behavior.type",
        "mode": "[R]",
        "doc": "The concrete type of this control behavior."
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": "Control behavior for roboports."
  },
  "LuaSettings": {
    "name": "LuaSettings",
    "type": "LuaSettings",
    "inherits": [],
    "properties": {
      "get_player_settings": {
        "name": "get_player_settings",
        "type": "function",
        "returns": "CustomDictionary string → ModSetting",
        "args": {
          "player": {
            "name": "player",
            "type": "PlayerSpecification",
            "doc": "player :: [PlayerSpecification](http://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification)"
          }
        },
        "doc": "**Parameters**  \nplayer :: [PlayerSpecification](http://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification)  \n\n**Note: ** This can become invalid if during operation if the given player becomes invalid."
      },
      "global": {
        "name": "global",
        "type": "CustomDictionary string → ModSetting",
        "mode": "[R]"
      },
      "object_name": {
        "name": "object_name",
        "type": "string",
        "mode": "[R]",
        "doc": "This object's nam"
      },
      "player": {
        "name": "player",
        "type": "CustomDictionary string → ModSetting",
        "mode": "[R]"
      },
      "startup": {
        "name": "startup",
        "type": "CustomDictionary string → ModSetting",
        "mode": "[R]"
      }
    },
    "doc": ""
  },
  "LuaShortcutPrototype": {
    "name": "LuaShortcutPrototype",
    "type": "LuaShortcutPrototype",
    "inherits": [],
    "properties": {
      "action": {
        "name": "action",
        "type": "string",
        "mode": "[R]"
      },
      "associated_control_input": {
        "name": "associated_control_input",
        "type": "string",
        "mode": "[R]"
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "item_to_spawn": {
        "name": "item_to_spawn",
        "type": "LuaItemPrototype",
        "mode": "[R]"
      },
      "localised_description": {
        "name": "localised_description",
        "type": "LocalisedString",
        "mode": "[R]"
      },
      "localised_name": {
        "name": "localised_name",
        "type": "LocalisedString",
        "mode": "[R]"
      },
      "name": {
        "name": "name",
        "type": "string",
        "mode": "[R]",
        "doc": "Name of this prototype."
      },
      "object_name": {
        "name": "object_name",
        "type": "string",
        "mode": "[R]",
        "doc": "The class name of this object."
      },
      "order": {
        "name": "order",
        "type": "string",
        "mode": "[R]",
        "doc": "Order string of this prototype."
      },
      "technology_to_unlock": {
        "name": "technology_to_unlock",
        "type": "LuaTechnologyPrototype",
        "mode": "[R]"
      },
      "toggleable": {
        "name": "toggleable",
        "type": "boolean",
        "mode": "[R]"
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": ""
  },
  "LuaStorageTankControlBehavior": {
    "name": "LuaStorageTankControlBehavior",
    "type": "LuaStorageTankControlBehavior",
    "inherits": [
      "Inherited from LuaControlBehavior: get_circuit_network, type, entity"
    ],
    "properties": {
      "entity": {
        "name": "entity",
        "type": "LuaEntity",
        "mode": "[R]",
        "doc": "The entity this control behavior belongs to."
      },
      "get_circuit_network": {
        "name": "get_circuit_network",
        "type": "function",
        "returns": "LuaCircuitNetwork",
        "args": {
          "circuit_connector": {
            "name": "circuit_connector",
            "type": "defines.circuit_connector_id",
            "doc": "circuit_connector :: [defines.circuit_connector_id](http://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional): The connector to get circuit network fo  \nMust be specified for entities with more than one circuit network connector."
          },
          "wire": {
            "name": "wire",
            "type": "defines.wire_type",
            "doc": "wire :: [defines.wire_type](http://lua-api.factorio.com/latest/defines.html#defines.wire_type): Wire color of the network connected to this entity."
          }
        },
        "doc": "**Parameters**  \nwire :: [defines.wire_type](http://lua-api.factorio.com/latest/defines.html#defines.wire_type): Wire color of the network connected to this entity.  \ncircuit_connector :: [defines.circuit_connector_id](http://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional): The connector to get circuit network fo  \nMust be specified for entities with more than one circuit network connector.  \n\n**Return value**  \nThe circuit network or nil."
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "object_name": {
        "name": "object_name",
        "type": "string",
        "mode": "[R]",
        "doc": "The class name of this object."
      },
      "type": {
        "name": "type",
        "type": "defines.control_behavior.type",
        "mode": "[R]",
        "doc": "The concrete type of this control behavior."
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": "Control behavior for storage tanks."
  },
  "LuaStyle": {
    "name": "LuaStyle",
    "type": "LuaStyle",
    "inherits": [],
    "properties": {
      "badge_font": {
        "name": "badge_font",
        "type": "string",
        "mode": "[RW]",
        "doc": "_Can only be used if this is TabStyle_"
      },
      "badge_horizontal_spacing": {
        "name": "badge_horizontal_spacing",
        "type": "int",
        "mode": "[RW]",
        "doc": "_Can only be used if this is TabStyle_"
      },
      "bottom_cell_padding": {
        "name": "bottom_cell_padding",
        "type": "int",
        "mode": "[RW]",
        "doc": "Space between the table cell contents bottom and borde    \n_Can only be used if this is LuaTableStyle_"
      },
      "bottom_margin": {
        "name": "bottom_margin",
        "type": "int",
        "mode": "[RW]"
      },
      "bottom_padding": {
        "name": "bottom_padding",
        "type": "int",
        "mode": "[RW]"
      },
      "cell_padding": {
        "name": "cell_padding",
        "type": "int",
        "mode": "[W]",
        "doc": "Space between the table cell contents and border. Sets top/right/bottom/left cell paddings to this valu    \n_Can only be used if this is LuaTableStyle_"
      },
      "clicked_font_color": {
        "name": "clicked_font_color",
        "type": "Color",
        "mode": "[RW]",
        "doc": "_Can only be used if this is LuaButtonStyle_"
      },
      "clicked_vertical_offset": {
        "name": "clicked_vertical_offset",
        "type": "int",
        "mode": "[RW]",
        "doc": "_Can only be used if this is LuaButtonStyle_"
      },
      "color": {
        "name": "color",
        "type": "Color",
        "mode": "[RW]",
        "doc": "_Can only be used if this is LuaProgressBarStyle_"
      },
      "column_alignments": {
        "name": "column_alignments",
        "type": "CustomArray of Alignment",
        "mode": "[R]",
        "doc": "Alignment for every column of this table. Even though this property is marked as read-only, the alignment can be changed by indexing this CustomArray, like so:   \n\n**Example**  \n````\ntable_element.style.column_alignments[1] = \"center\"````"
      },
      "default_badge_font_color": {
        "name": "default_badge_font_color",
        "type": "Color",
        "mode": "[RW]",
        "doc": "_Can only be used if this is TabStyle_"
      },
      "disabled_badge_font_color": {
        "name": "disabled_badge_font_color",
        "type": "Color",
        "mode": "[RW]",
        "doc": "_Can only be used if this is TabStyle_"
      },
      "disabled_font_color": {
        "name": "disabled_font_color",
        "type": "Color",
        "mode": "[RW]",
        "doc": "_Can only be used if this is LuaButtonStyle or LuaTabStyle_"
      },
      "extra_bottom_margin_when_activated": {
        "name": "extra_bottom_margin_when_activated",
        "type": "int",
        "mode": "[RW]",
        "doc": "_Can only be used if this is ScrollPaneStyle_"
      },
      "extra_bottom_padding_when_activated": {
        "name": "extra_bottom_padding_when_activated",
        "type": "int",
        "mode": "[RW]",
        "doc": "_Can only be used if this is ScrollPaneStyle_"
      },
      "extra_left_margin_when_activated": {
        "name": "extra_left_margin_when_activated",
        "type": "int",
        "mode": "[RW]",
        "doc": "_Can only be used if this is ScrollPaneStyle_"
      },
      "extra_left_padding_when_activated": {
        "name": "extra_left_padding_when_activated",
        "type": "int",
        "mode": "[RW]",
        "doc": "_Can only be used if this is ScrollPaneStyle_"
      },
      "extra_margin_when_activated": {
        "name": "extra_margin_when_activated",
        "type": "int or array of int",
        "mode": "[W]",
        "doc": "Sets extra_top/right/bottom/left_margin_when_activated to this valu  \nAn array with two values sets top/bottom margin to the first value and left/right margin to the second valu  \nAn array with four values sets top, right, bottom, left margin respectively."
      },
      "extra_padding_when_activated": {
        "name": "extra_padding_when_activated",
        "type": "int or array of int",
        "mode": "[W]",
        "doc": "Sets extra_top/right/bottom/left_padding_when_actived to this valu  \nAn array with two values sets top/bottom padding to the first value and left/right padding to the second valu  \nAn array with four values sets top, right, bottom, left padding respectively."
      },
      "extra_right_margin_when_activated": {
        "name": "extra_right_margin_when_activated",
        "type": "int",
        "mode": "[RW]",
        "doc": "_Can only be used if this is ScrollPaneStyle_"
      },
      "extra_right_padding_when_activated": {
        "name": "extra_right_padding_when_activated",
        "type": "int",
        "mode": "[RW]",
        "doc": "_Can only be used if this is ScrollPaneStyle_"
      },
      "extra_top_margin_when_activated": {
        "name": "extra_top_margin_when_activated",
        "type": "int",
        "mode": "[RW]",
        "doc": "_Can only be used if this is ScrollPaneStyle_"
      },
      "extra_top_padding_when_activated": {
        "name": "extra_top_padding_when_activated",
        "type": "int",
        "mode": "[RW]",
        "doc": "_Can only be used if this is ScrollPaneStyle_"
      },
      "font": {
        "name": "font",
        "type": "string",
        "mode": "[RW]"
      },
      "font_color": {
        "name": "font_color",
        "type": "Color",
        "mode": "[RW]"
      },
      "gui": {
        "name": "gui",
        "type": "LuaGui",
        "mode": "[R]",
        "doc": "Gui of the [LuaGuiElement](http://lua-api.factorio.com/latest/LuaGuiElement.html) of this style."
      },
      "height": {
        "name": "height",
        "type": "int",
        "mode": "[W]",
        "doc": "Sets both minimal and maximal height to the given value."
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "horizontal_align": {
        "name": "horizontal_align",
        "type": "string",
        "mode": "[RW]",
        "doc": "Horizontal align of the inner content of the widget, possible values are \"left\", \"center\" or \"righ"
      },
      "horizontal_spacing": {
        "name": "horizontal_spacing",
        "type": "int",
        "mode": "[RW]",
        "doc": "Horizontal space between individual cell    \n_Can only be used if this is LuaTableStyle, LuaFlowStyle, or LuaHorizontalFlow_"
      },
      "horizontally_squashable": {
        "name": "horizontally_squashable",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "If the GUI element can be squashed (by maximal width of some parent element) horizontall  \nThis is mainly meant to be used for scroll-pane The default value is fals"
      },
      "horizontally_stretchable": {
        "name": "horizontally_stretchable",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "If the GUI element stretches its size horizontally to other element"
      },
      "hovered_font_color": {
        "name": "hovered_font_color",
        "type": "Color",
        "mode": "[RW]",
        "doc": "_Can only be used if this is LuaButtonStyle_"
      },
      "left_cell_padding": {
        "name": "left_cell_padding",
        "type": "int",
        "mode": "[RW]",
        "doc": "Space between the table cell contents left and borde    \n_Can only be used if this is LuaTableStyle_"
      },
      "left_margin": {
        "name": "left_margin",
        "type": "int",
        "mode": "[RW]"
      },
      "left_padding": {
        "name": "left_padding",
        "type": "int",
        "mode": "[RW]"
      },
      "margin": {
        "name": "margin",
        "type": "int or array of int",
        "mode": "[W]",
        "doc": "Sets top/right/bottom/left margins to this valu  \nAn array with two values sets top/bottom margin to the first value and left/right margin to the second valu  \nAn array with four values sets top, right, bottom, left margin respectively."
      },
      "maximal_height": {
        "name": "maximal_height",
        "type": "int",
        "mode": "[RW]",
        "doc": "Maximal height ensures, that the widget will never be bigger than than that size. It can't be stretched to be bigge"
      },
      "maximal_width": {
        "name": "maximal_width",
        "type": "int",
        "mode": "[RW]",
        "doc": "Maximal width ensures, that the widget will never be bigger than than that size. It can't be stretched to be bigge"
      },
      "minimal_height": {
        "name": "minimal_height",
        "type": "int",
        "mode": "[RW]",
        "doc": "Minimal height ensures, that the widget will never be smaller than than that size. It can't be squashed to be smalle"
      },
      "minimal_width": {
        "name": "minimal_width",
        "type": "int",
        "mode": "[RW]",
        "doc": "Minimal width ensures, that the widget will never be smaller than than that size. It can't be squashed to be smalle"
      },
      "name": {
        "name": "name",
        "type": "string",
        "mode": "[R]",
        "doc": "Name of this style."
      },
      "natural_height": {
        "name": "natural_height",
        "type": "int",
        "mode": "[RW]",
        "doc": "Natural height specifies the height of the element tries to have, but it can still be squashed/stretched to have a smaller or bigger siz"
      },
      "natural_width": {
        "name": "natural_width",
        "type": "int",
        "mode": "[RW]",
        "doc": "Natural width specifies the width of the element tries to have, but it can still be squashed/stretched to have a smaller or bigger siz"
      },
      "object_name": {
        "name": "object_name",
        "type": "string",
        "mode": "[R]",
        "doc": "The class name of this object."
      },
      "padding": {
        "name": "padding",
        "type": "int or array of int",
        "mode": "[W]",
        "doc": "Sets top/right/bottom/left paddings to this valu  \nAn array with two values sets top/bottom padding to the first value and left/right padding to the second valu  \nAn array with four values sets top, right, bottom, left padding respectively."
      },
      "pie_progress_color": {
        "name": "pie_progress_color",
        "type": "Color",
        "mode": "[RW]",
        "doc": "_Can only be used if this is LuaButtonStyle_"
      },
      "rich_text_setting": {
        "name": "rich_text_setting",
        "type": "defines.rich_text_setting",
        "mode": "[RW]",
        "doc": "How this GUI element handles rich tex    \n_Can only be used if this is LuaLabelStyle, LuaTextBoxStyle, or LuaTextFieldStyle_"
      },
      "right_cell_padding": {
        "name": "right_cell_padding",
        "type": "int",
        "mode": "[RW]",
        "doc": "Space between the table cell contents right and borde    \n_Can only be used if this is LuaTableStyle_"
      },
      "right_margin": {
        "name": "right_margin",
        "type": "int",
        "mode": "[RW]"
      },
      "right_padding": {
        "name": "right_padding",
        "type": "int",
        "mode": "[RW]"
      },
      "selected_badge_font_color": {
        "name": "selected_badge_font_color",
        "type": "Color",
        "mode": "[RW]",
        "doc": "_Can only be used if this is TabStyle_"
      },
      "selected_clicked_font_color": {
        "name": "selected_clicked_font_color",
        "type": "Color",
        "mode": "[RW]",
        "doc": "_Can only be used if this is LuaButtonStyle_"
      },
      "selected_font_color": {
        "name": "selected_font_color",
        "type": "Color",
        "mode": "[RW]",
        "doc": "_Can only be used if this is LuaButtonStyle_"
      },
      "selected_hovered_font_color": {
        "name": "selected_hovered_font_color",
        "type": "Color",
        "mode": "[RW]",
        "doc": "_Can only be used if this is LuaButtonStyle_"
      },
      "single_line": {
        "name": "single_line",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "_Can only be used if this is LabelStyle_"
      },
      "size": {
        "name": "size",
        "type": "int or array of int",
        "mode": "[W]",
        "doc": "Sets both width and height to the given valu  \nAlso accepts an array with two values, setting width to the first and height to the second one."
      },
      "stretch_image_to_widget_size": {
        "name": "stretch_image_to_widget_size",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "_Can only be used if this is ImageStyle_"
      },
      "strikethrough_color": {
        "name": "strikethrough_color",
        "type": "Color",
        "mode": "[RW]",
        "doc": "_Can only be used if this is LuaButtonStyle_"
      },
      "top_cell_padding": {
        "name": "top_cell_padding",
        "type": "int",
        "mode": "[RW]",
        "doc": "Space between the table cell contents top and borde    \n_Can only be used if this is LuaTableStyle_"
      },
      "top_margin": {
        "name": "top_margin",
        "type": "int",
        "mode": "[RW]"
      },
      "top_padding": {
        "name": "top_padding",
        "type": "int",
        "mode": "[RW]"
      },
      "use_header_filler": {
        "name": "use_header_filler",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "_Can only be used if this is LuaFrameStyle_"
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      },
      "vertical_align": {
        "name": "vertical_align",
        "type": "string",
        "mode": "[RW]",
        "doc": "Vertical align of the inner content of the widget, possible values are \"top\", \"center\" or \"botto"
      },
      "vertical_spacing": {
        "name": "vertical_spacing",
        "type": "int",
        "mode": "[RW]",
        "doc": "Vertical space between individual cell    \n_Can only be used if this is LuaTableStyle, LuaFlowStyle, LuaVerticalFlowStyle, or LuaTabbedPaneStyle_"
      },
      "vertically_squashable": {
        "name": "vertically_squashable",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "If the GUI element can be squashed (by maximal height of some parent element) verticall  \nThis is mainly meant to be used for scroll-pane The default (parent) value for scroll pane is true, false otherwis"
      },
      "vertically_stretchable": {
        "name": "vertically_stretchable",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "If the GUI element stretches its size vertically to other element"
      },
      "width": {
        "name": "width",
        "type": "int",
        "mode": "[W]",
        "doc": "Sets both minimal and maximal width to the given value."
      }
    },
    "doc": ""
  },
  "LuaSurface": {
    "name": "LuaSurface",
    "type": "LuaSurface",
    "inherits": [],
    "properties": {}
  },
  "LuaTechnology": {
    "name": "LuaTechnology",
    "type": "LuaTechnology",
    "inherits": [],
    "properties": {
      "effects": {
        "name": "effects",
        "type": "array of Modifier",
        "mode": "[R]",
        "doc": "Effects applied when this technology is researched."
      },
      "enabled": {
        "name": "enabled",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "Can this technology be researched?"
      },
      "force": {
        "name": "force",
        "type": "LuaForce",
        "mode": "[R]",
        "doc": "The force this technology belongs to."
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "level": {
        "name": "level",
        "type": "uint",
        "mode": "[RW]",
        "doc": "The current level of this technology. For level-based technology writing to this is the same as researching the technology to the *previous* level. Writing the level will set [LuaTechnology::enabled](http://lua-api.factorio.com/latest/LuaTechnology.html#LuaTechnology.enabled) to ````\ntrue````"
      },
      "localised_description": {
        "name": "localised_description",
        "type": "LocalisedString",
        "mode": "[R]"
      },
      "localised_name": {
        "name": "localised_name",
        "type": "LocalisedString",
        "mode": "[R]",
        "doc": "Localised name of this technology."
      },
      "name": {
        "name": "name",
        "type": "string",
        "mode": "[R]",
        "doc": "Name of this technology."
      },
      "object_name": {
        "name": "object_name",
        "type": "string",
        "mode": "[R]",
        "doc": "The class name of this object."
      },
      "order": {
        "name": "order",
        "type": "string",
        "mode": "[R]",
        "doc": "Order string for this prototype."
      },
      "prerequisites": {
        "name": "prerequisites",
        "type": "dictionary string → LuaTechnology",
        "mode": "[R]",
        "doc": "Prerequisites of this technology. The result maps technology name to the [LuaTechnology](http://lua-api.factorio.com/latest/LuaTechnology.htm  \nobject."
      },
      "prototype": {
        "name": "prototype",
        "type": "LuaTechnologyPrototype",
        "mode": "[R]",
        "doc": "The prototype of this technolog"
      },
      "reload": {
        "name": "reload",
        "doc": "Reload this technology from its prototype.",
        "type": "function"
      },
      "research_unit_count": {
        "name": "research_unit_count",
        "type": "uint",
        "mode": "[R]",
        "doc": "Number of research units required for this technolog    \n\n**Note: ** This is multiplied by the current research cost multiplier, unless [LuaTechnologyPrototype::ignore_tech_cost_multiplier](http://lua-api.factorio.com/latest/LuaTechnologyPrototype.html#LuaTechnologyPrototype.ignore_tech_cost_multiplier) is ````\ntrue````\n.  \nSee also  \n[LuaTechnology::research_unit_ingredients](http://lua-api.factorio.com/latest/LuaTechnology.html#LuaTechnology.research_unit_ingredients)"
      },
      "research_unit_count_formula": {
        "name": "research_unit_count_formula",
        "type": "string",
        "mode": "[R]",
        "doc": "The count formula used for this infinite research or nil if this isn't an infinite researc    \nSee also  \n[LuaGameScript::evaluate_expression](http://lua-api.factorio.com/latest/LuaGameScript.html#LuaGameScript.evaluate_expression)"
      },
      "research_unit_energy": {
        "name": "research_unit_energy",
        "type": "double",
        "mode": "[R]",
        "doc": "Amount of energy required to finish a unit of research."
      },
      "research_unit_ingredients": {
        "name": "research_unit_ingredients",
        "type": "array of Ingredient",
        "mode": "[R]",
        "doc": "Ingredients labs will require to research this technolog    \nSee also  \n[LuaTechnology::research_unit_count](http://lua-api.factorio.com/latest/LuaTechnology.html#LuaTechnology.research_unit_count)"
      },
      "researched": {
        "name": "researched",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "Has this technology been researched? Switching from ````\nfalse````\nto ````\ntrue````\nwill trigger the technolo  \nadvancement perks; switching from ````\ntrue````\nto ````\nfalse````\nwill reverse them."
      },
      "upgrade": {
        "name": "upgrade",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this an upgrade-type research?"
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      },
      "visible_when_disabled": {
        "name": "visible_when_disabled",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "If this technology will be visible in the research GUI even though it is disabled."
      }
    },
    "doc": "Reload this technology from its prototype."
  },
  "LuaTechnologyPrototype": {
    "name": "LuaTechnologyPrototype",
    "type": "LuaTechnologyPrototype",
    "inherits": [],
    "properties": {
      "effects": {
        "name": "effects",
        "type": "array of Modifier",
        "mode": "[R]",
        "doc": "Effects applied when this technology is researched."
      },
      "enabled": {
        "name": "enabled",
        "type": "boolean",
        "mode": "[R]",
        "doc": "If this technology prototype is enabled by default (enabled at the beginning of a game"
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "hidden": {
        "name": "hidden",
        "type": "boolean",
        "mode": "[R]",
        "doc": "If this technology prototype is hidde"
      },
      "ignore_tech_cost_multiplier": {
        "name": "ignore_tech_cost_multiplier",
        "type": "boolean",
        "mode": "[R]",
        "doc": "If this technology ignores the technology cost multiplier settin    \n\n**Note: ** [LuaTechnologyPrototype::research_unit_count](http://lua-api.factorio.com/latest/LuaTechnologyPrototype.html#LuaTechnologyPrototype.research_unit_count) will already take this setting into account."
      },
      "level": {
        "name": "level",
        "type": "uint",
        "mode": "[R]",
        "doc": "The level of this research."
      },
      "localised_description": {
        "name": "localised_description",
        "type": "LocalisedString",
        "mode": "[R]"
      },
      "localised_name": {
        "name": "localised_name",
        "type": "LocalisedString",
        "mode": "[R]",
        "doc": "Localised name of this technology."
      },
      "max_level": {
        "name": "max_level",
        "type": "uint",
        "mode": "[R]",
        "doc": "The max level of this research."
      },
      "name": {
        "name": "name",
        "type": "string",
        "mode": "[R]",
        "doc": "Name of this technology."
      },
      "object_name": {
        "name": "object_name",
        "type": "string",
        "mode": "[R]",
        "doc": "The class name of this object."
      },
      "order": {
        "name": "order",
        "type": "string",
        "mode": "[R]",
        "doc": "Order string for this prototype."
      },
      "prerequisites": {
        "name": "prerequisites",
        "type": "dictionary string → LuaTechnologyPrototype",
        "mode": "[R]",
        "doc": "Prerequisites of this technology. The result maps technology name to the [LuaTechnologyPrototype](http://lua-api.factorio.com/latest/LuaTechnologyPrototype.html) object."
      },
      "research_unit_count": {
        "name": "research_unit_count",
        "type": "uint",
        "mode": "[R]",
        "doc": "Number of research units required for this technolog    \n\n**Note: ** This is multiplied by the current research cost multiplier, unless [LuaTechnologyPrototype::ignore_tech_cost_multiplier](http://lua-api.factorio.com/latest/LuaTechnologyPrototype.html#LuaTechnologyPrototype.ignore_tech_cost_multiplier) is ````\ntrue````\n.  \nSee also  \n[LuaTechnologyPrototype::research_unit_ingredients](http://lua-api.factorio.com/latest/LuaTechnologyPrototype.html#LuaTechnologyPrototype.research_unit_ingredients)"
      },
      "research_unit_count_formula": {
        "name": "research_unit_count_formula",
        "type": "string",
        "mode": "[R]",
        "doc": "The count formula used for this infinite research or nil if this isn't an infinite researc    \nSee also  \n[LuaGameScript::evaluate_expression](http://lua-api.factorio.com/latest/LuaGameScript.html#LuaGameScript.evaluate_expression)"
      },
      "research_unit_energy": {
        "name": "research_unit_energy",
        "type": "double",
        "mode": "[R]",
        "doc": "Amount of energy required to finish a unit of research."
      },
      "research_unit_ingredients": {
        "name": "research_unit_ingredients",
        "type": "array of Ingredient",
        "mode": "[R]",
        "doc": "Ingredients labs will require to research this technolog    \nSee also  \n[LuaTechnologyPrototype::research_unit_count](http://lua-api.factorio.com/latest/LuaTechnologyPrototype.html#LuaTechnologyPrototype.research_unit_count)"
      },
      "upgrade": {
        "name": "upgrade",
        "type": "boolean",
        "mode": "[R]",
        "doc": "If the is technology prototype is an upgrade to some other technolog"
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      },
      "visible_when_disabled": {
        "name": "visible_when_disabled",
        "type": "boolean",
        "mode": "[R]",
        "doc": "If this technology will be visible in the research GUI even though it is disable"
      }
    },
    "doc": ""
  },
  "LuaTile": {
    "name": "LuaTile",
    "type": "LuaTile",
    "inherits": [],
    "properties": {
      "cancel_deconstruction": {
        "name": "cancel_deconstruction",
        "doc": "Cancels deconstruction if it is scheduled, does nothing otherwis    \n\n**Parameters**  \nforce :: [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification): The force who did the deconstruction order.  \nplayer :: [PlayerSpecification](http://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional): The player to set the last_user to if any.",
        "type": "function",
        "args": {
          "force": {
            "name": "force",
            "type": "ForceSpecification",
            "doc": "force :: [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification): The force who did the deconstruction order."
          },
          "player": {
            "name": "player",
            "type": "PlayerSpecification",
            "doc": "player :: [PlayerSpecification](http://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional): The player to set the last_user to if any."
          }
        }
      },
      "collides_with": {
        "name": "collides_with",
        "type": "function",
        "doc": "What type of things can collide with this tile    \n\n**Parameters**  \nlayer :: [CollisionMaskLayer](http://lua-api.factorio.com/latest/Concepts.html#CollisionMaskLayer)  \n\n**Example**  \nCheck if the character would collide with a ti    \n````\ngame.player.print(tostring(game.player.surface.get_tile(1, 1).collides_with(\"player-layer\")))````",
        "returns": "boolean",
        "args": {
          "layer": {
            "name": "layer",
            "type": "CollisionMaskLayer",
            "doc": "layer :: [CollisionMaskLayer](http://lua-api.factorio.com/latest/Concepts.html#CollisionMaskLayer)"
          }
        }
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "hidden_tile": {
        "name": "hidden_tile",
        "type": "string",
        "mode": "[R]"
      },
      "name": {
        "name": "name",
        "type": "string",
        "mode": "[R]",
        "doc": "Prototype name of this tile. E.g. ````\n\"sand-3\"````\nor ````\n\"grass-2\"````\n."
      },
      "object_name": {
        "name": "object_name",
        "type": "string",
        "mode": "[R]",
        "doc": "The class name of this object."
      },
      "order_deconstruction": {
        "name": "order_deconstruction",
        "type": "function",
        "doc": "Orders deconstruction of this tile by the given forc    \n\n**Parameters**  \nforce :: [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification): The force whose robots are supposed to do the deconstruction.  \nplayer :: [PlayerSpecification](http://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional): The player to set the last_user to if any.  \n\n**Return value**  \nThe deconstructible tile proxy created if any or ````\nnil````\n.",
        "returns": "LuaEntity",
        "args": {
          "force": {
            "name": "force",
            "type": "ForceSpecification",
            "doc": "force :: [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification): The force whose robots are supposed to do the deconstruction."
          },
          "player": {
            "name": "player",
            "type": "PlayerSpecification",
            "doc": "player :: [PlayerSpecification](http://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional): The player to set the last_user to if any."
          }
        }
      },
      "position": {
        "name": "position",
        "type": "Position",
        "mode": "[R]",
        "doc": "The position this tile reference"
      },
      "prototype": {
        "name": "prototype",
        "type": "LuaTilePrototype",
        "mode": "[R]"
      },
      "surface": {
        "name": "surface",
        "type": "LuaSurface",
        "mode": "[R]",
        "doc": "The surface this tile is o"
      },
      "to_be_deconstructed": {
        "name": "to_be_deconstructed",
        "type": "function",
        "doc": "Is this tile marked for deconstructio",
        "returns": "boolean"
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": "What type of things can collide with this tile?"
  },
  "LuaTilePrototype": {
    "name": "LuaTilePrototype",
    "type": "LuaTilePrototype",
    "inherits": [],
    "properties": {
      "allowed_neighbors": {
        "name": "allowed_neighbors",
        "type": "dictionary string → LuaTilePrototype",
        "mode": "[R]"
      },
      "automatic_neighbors": {
        "name": "automatic_neighbors",
        "type": "boolean",
        "mode": "[R]"
      },
      "autoplace_specification": {
        "name": "autoplace_specification",
        "type": "AutoplaceSpecification",
        "mode": "[R]",
        "doc": "Autoplace specification for this prototype. ````\nnil````\nif non"
      },
      "can_be_part_of_blueprint": {
        "name": "can_be_part_of_blueprint",
        "type": "boolean",
        "mode": "[R]",
        "doc": "False if this tile is not allowed in blueprints regardless of the ability to build it."
      },
      "collision_mask": {
        "name": "collision_mask",
        "type": "CollisionMask",
        "mode": "[R]",
        "doc": "The collision mask this tile uses"
      },
      "collision_mask_with_flags": {
        "name": "collision_mask_with_flags",
        "type": "CollisionMaskWithFlags",
        "mode": "[R]"
      },
      "decorative_removal_probability": {
        "name": "decorative_removal_probability",
        "type": "float",
        "mode": "[R]",
        "doc": "The probability that decorative entities will be removed from on top of this tile when this tile is generated."
      },
      "emissions_per_second": {
        "name": "emissions_per_second",
        "type": "double",
        "mode": "[R]",
        "doc": "Amount of pollution emissions per second this tile will absorb."
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "items_to_place_this": {
        "name": "items_to_place_this",
        "type": "array of SimpleItemStack",
        "mode": "[R]",
        "doc": "Items that when placed will produce this tile. It is a dictionary indexed by the item prototype name."
      },
      "layer": {
        "name": "layer",
        "type": "uint",
        "mode": "[R]"
      },
      "localised_description": {
        "name": "localised_description",
        "type": "LocalisedString",
        "mode": "[R]"
      },
      "localised_name": {
        "name": "localised_name",
        "type": "LocalisedString",
        "mode": "[R]"
      },
      "map_color": {
        "name": "map_color",
        "type": "Color",
        "mode": "[R]"
      },
      "mineable_properties": {
        "name": "mineable_properties",
        "type": "table",
        "mode": "[R]",
        "doc": "It is a table:   \nminable :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean): Is this tile mineable at all?  \nminingtime :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double): Energy required to mine a tile.  \nminingparticle :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): Prototype name of the particle produced when mining this til  \nWill only be present if this tile produces any particle during mining.  \nproducts :: array of [Product](http://lua-api.factorio.com/latest/Concepts.html#Product): Products obtained by mining this tile."
      },
      "name": {
        "name": "name",
        "type": "string",
        "mode": "[R]",
        "doc": "Name of this prototype."
      },
      "needs_correction": {
        "name": "needs_correction",
        "type": "boolean",
        "mode": "[R]",
        "doc": "If this tile needs correction logic applied when it's generated in the world"
      },
      "next_direction": {
        "name": "next_direction",
        "type": "LuaTilePrototype",
        "mode": "[R]",
        "doc": "The next direction of this tile or ````\nnil````\n- used when a tile has multiple directions (such as hazard concret"
      },
      "object_name": {
        "name": "object_name",
        "type": "string",
        "mode": "[R]",
        "doc": "The class name of this object."
      },
      "order": {
        "name": "order",
        "type": "string",
        "mode": "[R]",
        "doc": "Order string of this prototype."
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      },
      "vehicle_friction_modifier": {
        "name": "vehicle_friction_modifier",
        "type": "float",
        "mode": "[R]"
      },
      "walking_speed_modifier": {
        "name": "walking_speed_modifier",
        "type": "float",
        "mode": "[R]"
      }
    },
    "doc": ""
  },
  "LuaTrain": {
    "name": "LuaTrain",
    "type": "LuaTrain",
    "inherits": [],
    "properties": {
      "back_rail": {
        "name": "back_rail",
        "type": "LuaEntity",
        "mode": "[R]",
        "doc": "The rail at the back end of the train, possibly ````\nnil````\n."
      },
      "back_stock": {
        "name": "back_stock",
        "type": "LuaEntity",
        "mode": "[R]",
        "doc": "The back stock of this train or ````\nnil````\n."
      },
      "cargo_wagons": {
        "name": "cargo_wagons",
        "type": "array of LuaEntity",
        "mode": "[R]",
        "doc": "The cargo carriages the train contains."
      },
      "carriages": {
        "name": "carriages",
        "type": "array of LuaEntity",
        "mode": "[R]",
        "doc": "Rolling stocks the train is composed of."
      },
      "clear_fluids_inside": {
        "name": "clear_fluids_inside",
        "doc": "Clears all fluids in this train.",
        "type": "function"
      },
      "clear_items_inside": {
        "name": "clear_items_inside",
        "doc": "Clear all items in this train.",
        "type": "function"
      },
      "fluid_wagons": {
        "name": "fluid_wagons",
        "type": "array of LuaEntity",
        "mode": "[R]",
        "doc": "The fluid carriages the train contains."
      },
      "front_rail": {
        "name": "front_rail",
        "type": "LuaEntity",
        "mode": "[R]",
        "doc": "The rail at the front end of the train, possibly ````\nnil````\n."
      },
      "front_stock": {
        "name": "front_stock",
        "type": "LuaEntity",
        "mode": "[R]",
        "doc": "The front stock of this train or ````\nnil````\n."
      },
      "get_contents": {
        "name": "get_contents",
        "type": "function",
        "doc": "Get a mapping of the train's inventory.   \n\n**Return value**  \nThe counts, indexed by item names.",
        "returns": "dictionary string → uint"
      },
      "get_fluid_contents": {
        "name": "get_fluid_contents",
        "type": "function",
        "doc": "Gets a mapping of the train's fluid inventor    \n\n**Return value**  \nThe counts, indexed by fluid names.",
        "returns": "dictionary string → double"
      },
      "get_fluid_count": {
        "name": "get_fluid_count",
        "type": "function",
        "doc": "Get the amount of a particular fluid stored in the trai    \n\n**Parameters**  \nfluid :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): Fluid name to count. If not given, counts all fluids.",
        "returns": "double",
        "args": {
          "fluid": {
            "name": "fluid",
            "type": "string",
            "doc": "fluid :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): Fluid name to count. If not given, counts all fluids."
          }
        }
      },
      "get_item_count": {
        "name": "get_item_count",
        "type": "function",
        "doc": "Get the amount of a particular item stored in the train.   \n\n**Parameters**  \nitem :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): Item name to count. If not given, counts all items.",
        "returns": "uint",
        "args": {
          "item": {
            "name": "item",
            "type": "string",
            "doc": "item :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): Item name to count. If not given, counts all items."
          }
        }
      },
      "get_rails": {
        "name": "get_rails",
        "type": "function",
        "doc": "Gets all rails under the trai",
        "returns": "array of LuaEntity"
      },
      "go_to_station": {
        "name": "go_to_station",
        "doc": "Go to the station specified by the index in the train's schedul    \n\n**Parameters**  \nindex :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)",
        "type": "function",
        "args": {
          "index": {
            "name": "index",
            "type": "uint",
            "doc": "index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)"
          }
        }
      },
      "has_path": {
        "name": "has_path",
        "type": "boolean",
        "mode": "[R]",
        "doc": "If this train has a pat"
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "id": {
        "name": "id",
        "type": "uint",
        "mode": "[R]",
        "doc": "The unique train I"
      },
      "insert": {
        "name": "insert",
        "doc": "Insert a stack into the train.   \n\n**Parameters**  \nstack :: [ItemStackSpecification](http://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification)",
        "type": "function",
        "args": {
          "stack": {
            "name": "stack",
            "type": "ItemStackSpecification",
            "doc": "stack :: [ItemStackSpecification](http://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification)"
          }
        }
      },
      "insert_fluid": {
        "name": "insert_fluid",
        "type": "function",
        "doc": "Inserts the given fluid into the first available location in this trai    \n\n**Parameters**  \nfluid :: [Fluid](http://lua-api.factorio.com/latest/Concepts.html#Fluid)  \n\n**Return value**  \nThe amount inserted.",
        "returns": "double",
        "args": {
          "fluid": {
            "name": "fluid",
            "type": "Fluid",
            "doc": "fluid :: [Fluid](http://lua-api.factorio.com/latest/Concepts.html#Fluid)"
          }
        }
      },
      "kill_count": {
        "name": "kill_count",
        "type": "uint",
        "mode": "[R]",
        "doc": "The total number of kills by this trai"
      },
      "killed_players": {
        "name": "killed_players",
        "type": "dictionary uint → uint",
        "mode": "[R]",
        "doc": "The players killed by this trai    \nThe keys are the player indexes, the values are how often this train killed that player."
      },
      "locomotives": {
        "name": "locomotives",
        "type": "dictionary string → array of LuaEntity",
        "mode": "[R]",
        "doc": "Arrays of locomotives. The result is two arrays, indexed by ````\n\"front_movers\"````\nand ````\n\"back_movers\"````  \ncontaining the locomotives. E.g. ````\n{front_movers={loco1, loco2}, back_movers={loco3}}````\n."
      },
      "manual_mode": {
        "name": "manual_mode",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "When ````\ntrue````\n, the train is explicitly controlled by the player or script. When ````\nfalse````\n, t  \ntrain moves autonomously according to its schedule."
      },
      "max_backward_speed": {
        "name": "max_backward_speed",
        "type": "double",
        "mode": "[R]",
        "doc": "Current max speed when moving backwards, depends on locomotive prototype and fuel."
      },
      "max_forward_speed": {
        "name": "max_forward_speed",
        "type": "double",
        "mode": "[R]",
        "doc": "Current max speed when moving forward, depends on locomotive prototype and fuel."
      },
      "object_name": {
        "name": "object_name",
        "type": "string",
        "mode": "[R]",
        "doc": "The class name of this object."
      },
      "passengers": {
        "name": "passengers",
        "type": "array of LuaPlayer",
        "mode": "[R]",
        "doc": "The player passengers on the tra    \n\n**Note: ** This does *not* index using player index. See [LuaPlayer::index](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.index) on each player instance for the player index."
      },
      "path": {
        "name": "path",
        "type": "LuaRailPath",
        "mode": "[R]",
        "doc": "The path this train is using or ````\nnil````\nif non"
      },
      "path_end_rail": {
        "name": "path_end_rail",
        "type": "LuaEntity",
        "mode": "[R]",
        "doc": "The destination rail this train is currently pathing to or ````\nnil````"
      },
      "path_end_stop": {
        "name": "path_end_stop",
        "type": "LuaEntity",
        "mode": "[R]",
        "doc": "The destination train stop this train is currently pathing to or ````\nnil````"
      },
      "rail_direction_from_back_rail": {
        "name": "rail_direction_from_back_rail",
        "type": "defines.rail_direction",
        "mode": "[R]"
      },
      "rail_direction_from_front_rail": {
        "name": "rail_direction_from_front_rail",
        "type": "defines.rail_direction",
        "mode": "[R]"
      },
      "recalculate_path": {
        "name": "recalculate_path",
        "type": "function",
        "doc": "Checks if the path is invalid and tries to re-path if it isn'    \n\n**Parameters**  \nforce :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): Forces the train to re-path regardless of the current path being valid or not.  \n\n**Return value**  \nIf the train has a path after the repath attempt.",
        "returns": "boolean",
        "args": {
          "force": {
            "name": "force",
            "type": "boolean",
            "doc": "force :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): Forces the train to re-path regardless of the current path being valid or not."
          }
        }
      },
      "remove_fluid": {
        "name": "remove_fluid",
        "type": "function",
        "doc": "Remove some fluid from the trai    \n\n**Parameters**  \nfluid :: [Fluid](http://lua-api.factorio.com/latest/Concepts.html#Fluid)  \n\n**Return value**  \nThe amount of fluid actually removed.",
        "returns": "double",
        "args": {
          "fluid": {
            "name": "fluid",
            "type": "Fluid",
            "doc": "fluid :: [Fluid](http://lua-api.factorio.com/latest/Concepts.html#Fluid)"
          }
        }
      },
      "remove_item": {
        "name": "remove_item",
        "type": "function",
        "doc": "Remove some items from the train.   \n\n**Parameters**  \nstack :: [ItemStackSpecification](http://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification): The amount and type of items to remove  \n\n**Return value**  \nNumber of items actually removed.",
        "returns": "uint",
        "args": {
          "stack": {
            "name": "stack",
            "type": "ItemStackSpecification",
            "doc": "stack :: [ItemStackSpecification](http://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification): The amount and type of items to remove"
          }
        }
      },
      "riding_state": {
        "name": "riding_state",
        "type": "RidingState",
        "mode": "[R]",
        "doc": "The riding state of this trai"
      },
      "schedule": {
        "name": "schedule",
        "type": "TrainSchedule",
        "mode": "[RW]",
        "doc": "The trains current schedule or ````\nnil````\nif empty. Set to ````\nnil````\nto clea    \n\n**Note: ** The schedule can't be changed by modifying the returned table. Instead, changes mu  \nbe made by assigning a new table to this attribute."
      },
      "signal": {
        "name": "signal",
        "type": "LuaEntity",
        "mode": "[R]",
        "doc": "The signal this train is arriving or waiting at or ````\nnil````\nif non"
      },
      "speed": {
        "name": "speed",
        "type": "double",
        "mode": "[RW]",
        "doc": "Current spee    \n\n**Note: ** Changing the speed of the train is potentially an unsafe operation because tra  \nuses the speed for its internal calculations of break distances, etc."
      },
      "state": {
        "name": "state",
        "type": "defines.train_state",
        "mode": "[R]",
        "doc": "This train's current state."
      },
      "station": {
        "name": "station",
        "type": "LuaEntity",
        "mode": "[R]",
        "doc": "The train stop this train is stopped at or ````\nnil````"
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      },
      "weight": {
        "name": "weight",
        "type": "double",
        "mode": "[R]",
        "doc": "The weight of this train."
      }
    },
    "doc": "Get the amount of a particular item stored in the train."
  },
  "LuaTrainStopControlBehavior": {
    "name": "LuaTrainStopControlBehavior",
    "type": "LuaTrainStopControlBehavior",
    "inherits": [
      "Inherited from LuaControlBehavior: get_circuit_network, type, entity",
      "Inherited from LuaGenericOnOffControlBehavior: disabled, circuit_condition, logistic_condition, connect_to_logistic_network"
    ],
    "properties": {
      "circuit_condition": {
        "name": "circuit_condition",
        "type": "CircuitConditionSpecification",
        "mode": "[RW]",
        "doc": "The circuit condition    \n\n**Note: ** ````\ncondition````\nmay be ````\nnil````\nin order to clear the circuit condition.  \n\n**Example**  \nTell an entity to be active (e.g. a lamp to be lit) when it receives a circuit signal of more than 4 cha  \nsignal    \n````\na_behavior.circuit_condition = {condition={comparator=\"&gt;\",  \n                                           first_signal={type=\"item\", name=\"rail-chain-signal\"},  \n                                           constant=4}}````"
      },
      "connect_to_logistic_network": {
        "name": "connect_to_logistic_network",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "````\ntrue````\nif this should connect to the logistic network."
      },
      "disabled": {
        "name": "disabled",
        "type": "boolean",
        "mode": "[R]",
        "doc": "If the entity is currently disabled because of the control behavior."
      },
      "enable_disable": {
        "name": "enable_disable",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "````\ntrue````\nif the train stop is enabled/disabled through the circuit network."
      },
      "entity": {
        "name": "entity",
        "type": "LuaEntity",
        "mode": "[R]",
        "doc": "The entity this control behavior belongs to."
      },
      "get_circuit_network": {
        "name": "get_circuit_network",
        "type": "function",
        "returns": "LuaCircuitNetwork",
        "args": {
          "circuit_connector": {
            "name": "circuit_connector",
            "type": "defines.circuit_connector_id",
            "doc": "circuit_connector :: [defines.circuit_connector_id](http://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional): The connector to get circuit network fo  \nMust be specified for entities with more than one circuit network connector."
          },
          "wire": {
            "name": "wire",
            "type": "defines.wire_type",
            "doc": "wire :: [defines.wire_type](http://lua-api.factorio.com/latest/defines.html#defines.wire_type): Wire color of the network connected to this entity."
          }
        },
        "doc": "**Parameters**  \nwire :: [defines.wire_type](http://lua-api.factorio.com/latest/defines.html#defines.wire_type): Wire color of the network connected to this entity.  \ncircuit_connector :: [defines.circuit_connector_id](http://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional): The connector to get circuit network fo  \nMust be specified for entities with more than one circuit network connector.  \n\n**Return value**  \nThe circuit network or nil."
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "logistic_condition": {
        "name": "logistic_condition",
        "type": "CircuitConditionSpecification",
        "mode": "[RW]",
        "doc": "The logistic condition    \n\n**Note: ** ````\ncondition````\nmay be ````\nnil````\nin order to clear the logistic condition.  \n\n**Example**  \nTell an entity to be active (e.g. a lamp to be lit) when the logistics network it's connected to has more th  \n4 chain signal    \n````\na_behavior.logistic_condition = {condition={comparator=\"&gt;\",  \n                                            first_signal={type=\"item\", name=\"rail-chain-signal\"},  \n                                            constant=4}}````"
      },
      "object_name": {
        "name": "object_name",
        "type": "string",
        "mode": "[R]",
        "doc": "The class name of this object."
      },
      "read_from_train": {
        "name": "read_from_train",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "````\ntrue````\nif the train stop should send the train contents to the circuit network."
      },
      "read_stopped_train": {
        "name": "read_stopped_train",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "````\ntrue````\nif the train stop should send the stopped train id to the circuit network."
      },
      "read_trains_count": {
        "name": "read_trains_count",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "````\ntrue````\nif the train stop should send amount of incoming trains to the circuit network."
      },
      "send_to_train": {
        "name": "send_to_train",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "````\ntrue````\nif the train stop should send the circuit network contents to the train to use."
      },
      "set_trains_limit": {
        "name": "set_trains_limit",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "````\ntrue````\nif the trains_limit_signal is used to set a limit of trains incoming for train stop."
      },
      "stopped_train_signal": {
        "name": "stopped_train_signal",
        "type": "SignalID",
        "mode": "[RW]",
        "doc": "The signal that will be sent when using the send-train-id optio"
      },
      "trains_count_signal": {
        "name": "trains_count_signal",
        "type": "SignalID",
        "mode": "[RW]",
        "doc": "The signal that will be sent when using the read-trains-count optio"
      },
      "trains_limit_signal": {
        "name": "trains_limit_signal",
        "type": "SignalID",
        "mode": "[RW]",
        "doc": "The signal to be used by set-trains-limit to limit amount of incoming trai"
      },
      "type": {
        "name": "type",
        "type": "defines.control_behavior.type",
        "mode": "[R]",
        "doc": "The concrete type of this control behavior."
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": "Control behavior for train stops."
  },
  "LuaTransportBeltControlBehavior": {
    "name": "LuaTransportBeltControlBehavior",
    "type": "LuaTransportBeltControlBehavior",
    "inherits": [
      "Inherited from LuaControlBehavior: get_circuit_network, type, entity",
      "Inherited from LuaGenericOnOffControlBehavior: disabled, circuit_condition, logistic_condition, connect_to_logistic_network"
    ],
    "properties": {
      "circuit_condition": {
        "name": "circuit_condition",
        "type": "CircuitConditionSpecification",
        "mode": "[RW]",
        "doc": "The circuit condition    \n\n**Note: ** ````\ncondition````\nmay be ````\nnil````\nin order to clear the circuit condition.  \n\n**Example**  \nTell an entity to be active (e.g. a lamp to be lit) when it receives a circuit signal of more than 4 cha  \nsignal    \n````\na_behavior.circuit_condition = {condition={comparator=\"&gt;\",  \n                                           first_signal={type=\"item\", name=\"rail-chain-signal\"},  \n                                           constant=4}}````"
      },
      "connect_to_logistic_network": {
        "name": "connect_to_logistic_network",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "````\ntrue````\nif this should connect to the logistic network."
      },
      "disabled": {
        "name": "disabled",
        "type": "boolean",
        "mode": "[R]",
        "doc": "If the entity is currently disabled because of the control behavior."
      },
      "enable_disable": {
        "name": "enable_disable",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "If the belt will be enabled/disabled based off the circuit networ"
      },
      "entity": {
        "name": "entity",
        "type": "LuaEntity",
        "mode": "[R]",
        "doc": "The entity this control behavior belongs to."
      },
      "get_circuit_network": {
        "name": "get_circuit_network",
        "type": "function",
        "returns": "LuaCircuitNetwork",
        "args": {
          "circuit_connector": {
            "name": "circuit_connector",
            "type": "defines.circuit_connector_id",
            "doc": "circuit_connector :: [defines.circuit_connector_id](http://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional): The connector to get circuit network fo  \nMust be specified for entities with more than one circuit network connector."
          },
          "wire": {
            "name": "wire",
            "type": "defines.wire_type",
            "doc": "wire :: [defines.wire_type](http://lua-api.factorio.com/latest/defines.html#defines.wire_type): Wire color of the network connected to this entity."
          }
        },
        "doc": "**Parameters**  \nwire :: [defines.wire_type](http://lua-api.factorio.com/latest/defines.html#defines.wire_type): Wire color of the network connected to this entity.  \ncircuit_connector :: [defines.circuit_connector_id](http://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional): The connector to get circuit network fo  \nMust be specified for entities with more than one circuit network connector.  \n\n**Return value**  \nThe circuit network or nil."
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "logistic_condition": {
        "name": "logistic_condition",
        "type": "CircuitConditionSpecification",
        "mode": "[RW]",
        "doc": "The logistic condition    \n\n**Note: ** ````\ncondition````\nmay be ````\nnil````\nin order to clear the logistic condition.  \n\n**Example**  \nTell an entity to be active (e.g. a lamp to be lit) when the logistics network it's connected to has more th  \n4 chain signal    \n````\na_behavior.logistic_condition = {condition={comparator=\"&gt;\",  \n                                            first_signal={type=\"item\", name=\"rail-chain-signal\"},  \n                                            constant=4}}````"
      },
      "object_name": {
        "name": "object_name",
        "type": "string",
        "mode": "[R]",
        "doc": "The class name of this object."
      },
      "read_contents": {
        "name": "read_contents",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "If the belt will read the contents and send them to the circuit networ"
      },
      "read_contents_mode": {
        "name": "read_contents_mode",
        "type": "defines.control_behavior.transport_belt.content_read_mode",
        "mode": "[RW]",
        "doc": "The read mode for the belt."
      },
      "type": {
        "name": "type",
        "type": "defines.control_behavior.type",
        "mode": "[R]",
        "doc": "The concrete type of this control behavior."
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": "Control behavior for transport belts."
  },
  "LuaTransportLine": {
    "name": "LuaTransportLine",
    "type": "LuaTransportLine",
    "inherits": [],
    "properties": {
      "can_insert_at": {
        "name": "can_insert_at",
        "type": "function",
        "doc": "Can an item be inserted at a given position?   \n\n**Parameters**  \nposition :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float): Where to insert an item.",
        "returns": "boolean",
        "args": {
          "position": {
            "name": "position",
            "type": "float",
            "doc": "position :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float): Where to insert an item."
          }
        }
      },
      "can_insert_at_back": {
        "name": "can_insert_at_back",
        "type": "function",
        "doc": "Can an item be inserted at the back of this line?",
        "returns": "boolean"
      },
      "clear": {
        "name": "clear",
        "doc": "Remove all items from this transport line.",
        "type": "function"
      },
      "get_contents": {
        "name": "get_contents",
        "type": "function",
        "doc": "Get counts of all items on this line.   \n\n**Return value**  \nThe counts, indexed by item names.  \nSee also  \n[LuaInventory::get_contents](http://lua-api.factorio.com/latest/LuaInventory.html#LuaInventory.get_contents)",
        "returns": "dictionary string → uint"
      },
      "get_item_count": {
        "name": "get_item_count",
        "type": "function",
        "doc": "Count some or all items on this line    \n\n**Parameters**  \nitem :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): Prototype name of the item to count. If not specified, count all items.  \nSee also  \n[LuaInventory::get_item_count](http://lua-api.factorio.com/latest/LuaInventory.html#LuaInventory.get_item_count)",
        "returns": "uint",
        "args": {
          "item": {
            "name": "item",
            "type": "string",
            "doc": "item :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): Prototype name of the item to count. If not specified, count all items."
          }
        }
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "input_lines": {
        "name": "input_lines",
        "type": "array of LuaTransportLine",
        "mode": "[R]",
        "doc": "The transport lines that this transport line is fed by or an empty table if none."
      },
      "insert_at": {
        "name": "insert_at",
        "type": "function",
        "doc": "Insert items at a given position.   \n\n**Parameters**  \nposition :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float): Where on the line to insert the items.  \nitems :: [ItemStackSpecification](http://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification): Items to insert.  \n\n**Return value**  \nWere the items inserted successfully?",
        "returns": "boolean",
        "args": {
          "items": {
            "name": "items",
            "type": "ItemStackSpecification",
            "doc": "items :: [ItemStackSpecification](http://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification): Items to insert."
          },
          "position": {
            "name": "position",
            "type": "float",
            "doc": "position :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float): Where on the line to insert the items."
          }
        }
      },
      "insert_at_back": {
        "name": "insert_at_back",
        "type": "function",
        "doc": "Insert items at the back of this line.   \n\n**Parameters**  \nitems :: [ItemStackSpecification](http://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification)  \n\n**Return value**  \nWere the items inserted successfully?",
        "returns": "boolean",
        "args": {
          "items": {
            "name": "items",
            "type": "ItemStackSpecification",
            "doc": "items :: [ItemStackSpecification](http://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification)"
          }
        }
      },
      "line_equals": {
        "name": "line_equals",
        "type": "function",
        "doc": "Returns whether the associated internal transport line of this line is the same as the others associated internal transport lin    \n\n**Parameters**  \nother :: [LuaTransportLine](http://lua-api.factorio.com/latest/LuaTransportLine.html)  \n\n**Note: ** This can return true even when the [LuaTransportLine::owner](http://lua-api.factorio.com/latest/LuaTransportLine.html#LuaTransportLine.owner)s are different (so ````\nthis == other````\nis false), because the internal transport lines can span multiple tiles.",
        "returns": "boolean",
        "args": {
          "other": {
            "name": "other",
            "type": "LuaTransportLine",
            "doc": "other :: [LuaTransportLine](http://lua-api.factorio.com/latest/LuaTransportLine.html)"
          }
        }
      },
      "object_name": {
        "name": "object_name",
        "type": "string",
        "mode": "[R]",
        "doc": "The class name of this object."
      },
      "operator []": {
        "name": "operator []",
        "type": "LuaItemStack",
        "mode": "[R]",
        "doc": "The indexing operator."
      },
      "operator #": {
        "name": "operator #",
        "type": "uint",
        "mode": "[R]",
        "doc": "Get the number of items on this transport line."
      },
      "output_lines": {
        "name": "output_lines",
        "type": "array of LuaTransportLine",
        "mode": "[R]",
        "doc": "The transport lines that this transport line outputs items to or an empty table if none."
      },
      "owner": {
        "name": "owner",
        "type": "LuaEntity",
        "mode": "[R]",
        "doc": "The entity this transport line belongs to."
      },
      "remove_item": {
        "name": "remove_item",
        "type": "function",
        "doc": "Remove some items from this line.   \n\n**Parameters**  \nitems :: [ItemStackSpecification](http://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification): Items to remove.  \n\n**Return value**  \nNumber of items actually removed.",
        "returns": "uint",
        "args": {
          "items": {
            "name": "items",
            "type": "ItemStackSpecification",
            "doc": "items :: [ItemStackSpecification](http://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification): Items to remove."
          }
        }
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": "Remove all items from this transport line."
  },
  "LuaTrivialSmokePrototype": {
    "name": "LuaTrivialSmokePrototype",
    "type": "LuaTrivialSmokePrototype",
    "inherits": [],
    "properties": {
      "affected_by_wind": {
        "name": "affected_by_wind",
        "type": "boolean",
        "mode": "[R]"
      },
      "color": {
        "name": "color",
        "type": "Color",
        "mode": "[R]"
      },
      "cyclic": {
        "name": "cyclic",
        "type": "boolean",
        "mode": "[R]"
      },
      "duration": {
        "name": "duration",
        "type": "uint",
        "mode": "[R]"
      },
      "end_scale": {
        "name": "end_scale",
        "type": "double",
        "mode": "[R]"
      },
      "fade_away_duration": {
        "name": "fade_away_duration",
        "type": "uint",
        "mode": "[R]"
      },
      "fade_in_duration": {
        "name": "fade_in_duration",
        "type": "uint",
        "mode": "[R]"
      },
      "glow_animation": {
        "name": "glow_animation",
        "type": "boolean",
        "mode": "[R]"
      },
      "glow_fade_away_duration": {
        "name": "glow_fade_away_duration",
        "type": "uint",
        "mode": "[R]"
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "localised_description": {
        "name": "localised_description",
        "type": "LocalisedString",
        "mode": "[R]"
      },
      "localised_name": {
        "name": "localised_name",
        "type": "LocalisedString",
        "mode": "[R]"
      },
      "movement_slow_down_factor": {
        "name": "movement_slow_down_factor",
        "type": "double",
        "mode": "[R]"
      },
      "name": {
        "name": "name",
        "type": "string",
        "mode": "[R]",
        "doc": "Name of this prototype."
      },
      "object_name": {
        "name": "object_name",
        "type": "string",
        "mode": "[R]",
        "doc": "The class name of this object."
      },
      "order": {
        "name": "order",
        "type": "string",
        "mode": "[R]",
        "doc": "Order string of this prototype."
      },
      "render_layer": {
        "name": "render_layer",
        "type": "RenderLayer",
        "mode": "[R]"
      },
      "show_when_smoke_off": {
        "name": "show_when_smoke_off",
        "type": "boolean",
        "mode": "[R]"
      },
      "spread_duration": {
        "name": "spread_duration",
        "type": "uint",
        "mode": "[R]"
      },
      "start_scale": {
        "name": "start_scale",
        "type": "double",
        "mode": "[R]"
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": ""
  },
  "LuaUnitGroup": {
    "name": "LuaUnitGroup",
    "type": "LuaUnitGroup",
    "inherits": [],
    "properties": {
      "add_member": {
        "name": "add_member",
        "doc": "Make a unit a member of this group. Has the same effect as giving a ````\ngroup_command````\nwith th  \ngroup to the unit    \n\n**Parameters**  \nunit :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)  \n\n**Note: ** The member must have the same force as the unit group.",
        "type": "function",
        "args": {
          "unit": {
            "name": "unit",
            "type": "LuaEntity",
            "doc": "unit :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)"
          }
        }
      },
      "command": {
        "name": "command",
        "type": "Command",
        "mode": "[R]",
        "doc": "The command given to this group or ````\nnil````\nis the group has no comman"
      },
      "destroy": {
        "name": "destroy",
        "doc": "Dissolve this group. Its members won't be destroyed, they will be merely unlinked fr  \nthis group.",
        "type": "function"
      },
      "distraction_command": {
        "name": "distraction_command",
        "type": "Command",
        "mode": "[R]",
        "doc": "The distraction command given to this group or ````\nnil````\nis the group currently isn't distracte"
      },
      "force": {
        "name": "force",
        "type": "LuaForce",
        "mode": "[R]",
        "doc": "The force of this unit group."
      },
      "group_number": {
        "name": "group_number",
        "type": "uint",
        "mode": "[R]",
        "doc": "The group number for this unit grou"
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "is_script_driven": {
        "name": "is_script_driven",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Whether this unit group is controlled by a script or by the game engin    \nSee also  \n[LuaUnitGroup::set_autonomous](http://lua-api.factorio.com/latest/LuaUnitGroup.html#LuaUnitGroup.set_autonomous)"
      },
      "members": {
        "name": "members",
        "type": "array of LuaEntity",
        "mode": "[R]",
        "doc": "Members of this group."
      },
      "object_name": {
        "name": "object_name",
        "type": "string",
        "mode": "[R]",
        "doc": "The class name of this object."
      },
      "position": {
        "name": "position",
        "type": "Position",
        "mode": "[R]",
        "doc": "Group position. This can have different meanings depending on the group state. When the gro  \nis gathering, the position is the place of gathering. When the group is moving, the position   \nthe expected position of its members along the path. When the group is attacking, it is t  \naverage position of its members."
      },
      "set_autonomous": {
        "name": "set_autonomous",
        "doc": "Make this group autonomous. Autonomous groups will automatically attack polluted areas. Autonomous grou  \naren't considered to be script driv    \nSee also  \n[LuaUnitGroup::is_script_driven](http://lua-api.factorio.com/latest/LuaUnitGroup.html#LuaUnitGroup.is_script_driven)",
        "type": "function"
      },
      "set_command": {
        "name": "set_command",
        "doc": "Give this group a command.   \n\n**Parameters**  \ncommand :: [Command](http://lua-api.factorio.com/latest/Concepts.html#Command)  \nSee also  \n[LuaEntity::set_command](http://lua-api.factorio.com/latest/LuaEntity.html#LuaEntity.set_command)",
        "type": "function",
        "args": {
          "command": {
            "name": "command",
            "type": "Command",
            "doc": "command :: [Command](http://lua-api.factorio.com/latest/Concepts.html#Command)"
          }
        }
      },
      "start_moving": {
        "name": "start_moving",
        "doc": "Make the group start moving even if some of its members haven't yet arrived.",
        "type": "function"
      },
      "state": {
        "name": "state",
        "type": "defines.group_state",
        "mode": "[R]",
        "doc": "Whether this group is gathering, moving or attacking."
      },
      "surface": {
        "name": "surface",
        "type": "LuaSurface",
        "mode": "[R]",
        "doc": "The surface of this unit group."
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": "Make a unit a member of this group. Has the same effect as giving a group_command with this\n group to the unit."
  },
  "LuaVirtualSignalPrototype": {
    "name": "LuaVirtualSignalPrototype",
    "type": "LuaVirtualSignalPrototype",
    "inherits": [],
    "properties": {
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "localised_description": {
        "name": "localised_description",
        "type": "LocalisedString",
        "mode": "[R]"
      },
      "localised_name": {
        "name": "localised_name",
        "type": "LocalisedString",
        "mode": "[R]"
      },
      "name": {
        "name": "name",
        "type": "string",
        "mode": "[R]",
        "doc": "Name of this prototype."
      },
      "object_name": {
        "name": "object_name",
        "type": "string",
        "mode": "[R]",
        "doc": "The class name of this object."
      },
      "order": {
        "name": "order",
        "type": "string",
        "mode": "[R]",
        "doc": "Order string of this prototype."
      },
      "special": {
        "name": "special",
        "type": "boolean",
        "mode": "[R]",
        "doc": "If this is a special sign"
      },
      "subgroup": {
        "name": "subgroup",
        "type": "LuaGroup",
        "mode": "[R]"
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": ""
  },
  "LuaVoidEnergySourcePrototype": {
    "name": "LuaVoidEnergySourcePrototype",
    "type": "LuaVoidEnergySourcePrototype",
    "inherits": [],
    "properties": {
      "emissions": {
        "name": "emissions",
        "type": "double",
        "mode": "[R]"
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "object_name": {
        "name": "object_name",
        "type": "string",
        "mode": "[R]",
        "doc": "The class name of this object."
      },
      "render_no_network_icon": {
        "name": "render_no_network_icon",
        "type": "boolean",
        "mode": "[R]"
      },
      "render_no_power_icon": {
        "name": "render_no_power_icon",
        "type": "boolean",
        "mode": "[R]"
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": ""
  },
  "LuaWallControlBehavior": {
    "name": "LuaWallControlBehavior",
    "type": "LuaWallControlBehavior",
    "inherits": [
      "Inherited from LuaControlBehavior: get_circuit_network, type, entity"
    ],
    "properties": {
      "circuit_condition": {
        "name": "circuit_condition",
        "type": "CircuitConditionSpecification",
        "mode": "[RW]",
        "doc": "The circuit condition."
      },
      "entity": {
        "name": "entity",
        "type": "LuaEntity",
        "mode": "[R]",
        "doc": "The entity this control behavior belongs to."
      },
      "get_circuit_network": {
        "name": "get_circuit_network",
        "type": "function",
        "returns": "LuaCircuitNetwork",
        "args": {
          "circuit_connector": {
            "name": "circuit_connector",
            "type": "defines.circuit_connector_id",
            "doc": "circuit_connector :: [defines.circuit_connector_id](http://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional): The connector to get circuit network fo  \nMust be specified for entities with more than one circuit network connector."
          },
          "wire": {
            "name": "wire",
            "type": "defines.wire_type",
            "doc": "wire :: [defines.wire_type](http://lua-api.factorio.com/latest/defines.html#defines.wire_type): Wire color of the network connected to this entity."
          }
        },
        "doc": "**Parameters**  \nwire :: [defines.wire_type](http://lua-api.factorio.com/latest/defines.html#defines.wire_type): Wire color of the network connected to this entity.  \ncircuit_connector :: [defines.circuit_connector_id](http://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional): The connector to get circuit network fo  \nMust be specified for entities with more than one circuit network connector.  \n\n**Return value**  \nThe circuit network or nil."
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "object_name": {
        "name": "object_name",
        "type": "string",
        "mode": "[R]",
        "doc": "The class name of this object."
      },
      "open_gate": {
        "name": "open_gate",
        "type": "boolean",
        "mode": "[RW]"
      },
      "output_signal": {
        "name": "output_signal",
        "type": "SignalID",
        "mode": "[RW]"
      },
      "read_sensor": {
        "name": "read_sensor",
        "type": "boolean",
        "mode": "[RW]"
      },
      "type": {
        "name": "type",
        "type": "defines.control_behavior.type",
        "mode": "[R]",
        "doc": "The concrete type of this control behavior."
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": "Control behavior for walls."
  }
}